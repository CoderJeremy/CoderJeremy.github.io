<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeremy&#39;s Blog</title>
  
  <subtitle>艰险我奋进，困乏我多情</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://coderjeremy.github.io/"/>
  <updated>2020-02-15T11:07:19.988Z</updated>
  <id>https://coderjeremy.github.io/</id>
  
  <author>
    <name>吴健伟_Jeremy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDBC</title>
    <link href="https://coderjeremy.github.io/2020/02/15/JDBC/"/>
    <id>https://coderjeremy.github.io/2020/02/15/JDBC/</id>
    <published>2020-02-15T11:06:46.000Z</published>
    <updated>2020-02-15T11:07:19.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>Java DataBase Connectivity(Java数据库连接)：Java语言操作数据库</li><li>本质：其实是官方（SUN公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动和jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码时驱动jar包中的实现类。</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>导入驱动jar包<ul><li>复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下</li><li>右键–&gt;Add As Library</li></ul></li><li>注册驱动 <code>DriverManager</code></li><li>获取数据库连接对象 <code>Connection</code></li><li>定义SQL</li><li>获取执行SQL语句的对象 <code>Statement</code></li><li>执行SQL，接收返回结果</li><li>处理结果</li><li>释放资源</li></ol><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li>DriverManager：驱动管理对象</li><li>Connection：数据库连接对象</li><li>Statement：执行SQL的对象</li><li>ResultSet：结果集对象</li><li>PreparedStatement：执行SQL的对象</li></ul><h3 id="DriverManager驱动管理对象"><a href="#DriverManager驱动管理对象" class="headerlink" title="DriverManager驱动管理对象"></a>DriverManager驱动管理对象</h3><ul><li><p>注册驱动：告诉程序该使用哪一个数据库驱动jar</p><ul><li>方法：<code>static void registerDriver(Driver driver)</code>:注册与给定的驱动程序<code>DriverManager</code></li><li><p>写代码时使用：<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't register driver!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意：mysql5之后的驱动jar包可以省略注册驱动的步骤</p></li></ul></li><li><p>获取数据库连接（DriverManager）</p><ul><li>方法：<code>static Connection getConnection(String url,String user,String password)</code></li><li>参数：<ul><li>url：指定连接的路径</li><li>语法：<code>jdbc:mysql://ip地址(域名):端口号/数据库名称</code><blockquote><p>如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：<code>jdbc:mysql:///数据库名称</code></p></blockquote></li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ul><h3 id="Connection数据库连接对象"><a href="#Connection数据库连接对象" class="headerlink" title="Connection数据库连接对象"></a>Connection数据库连接对象</h3><ul><li>功能：<ul><li>获取执行SQL的对象<ul><li><code>Statement createStatement()</code></li><li><code>PreparedStatement prepareStatement(String sql)</code></li></ul></li><li>管理事务<ul><li>开启事务：<code>void setAutoCommit(boolean autoCommit)</code>:调用改方法设置参数为false。即开启事务</li><li>提交事务：<code>void commit()</code></li><li>回滚事务：<code>void rollback()</code></li></ul></li></ul></li></ul><h3 id="Statement执行静态SQL的对象"><a href="#Statement执行静态SQL的对象" class="headerlink" title="Statement执行静态SQL的对象"></a>Statement执行静态SQL的对象</h3><ul><li>执行SQL<ul><li><code>boolean execute(String sql)</code>:可以执行任意的sql</li><li><code>int executeUpdate(String sql)</code>:执行DML(insert、update、delete)语句，DDL(create、alter、drop)语句<ul><li>返回值：影响的行数。可以通过这个影响的行数判断DML语句是否执行成功，返回值&gt;0则执行成功。</li></ul></li><li><code>ResultSet executeQuery(String sql)</code>:执行DQL(select)语句</li></ul></li><li>样例  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 导入驱动</span></span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        Statement smt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 静态SQL语句</span></span><br><span class="line">            String s1 = <span class="string">"insert into emp values ()"</span>;</span><br><span class="line">            String s2 = <span class="string">"delete from emp where salary&gt;8000"</span>;</span><br><span class="line">            String s3 = <span class="string">"update emp set gender='女' where name='jdbc'"</span>;</span><br><span class="line">            <span class="comment">// 注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">// 获取数据库连接对象Connection</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/demo"</span>,</span><br><span class="line">                    <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">            <span class="comment">// 获取Statement对象</span></span><br><span class="line">            smt = conn.createStatement();</span><br><span class="line">            <span class="comment">// 执行sql语句</span></span><br><span class="line">            <span class="keyword">int</span> r1 = smt.executeUpdate(s1);</span><br><span class="line">            <span class="keyword">int</span> r2 = smt.executeUpdate(s2);</span><br><span class="line">            <span class="keyword">int</span> r3 = smt.executeUpdate(s3);</span><br><span class="line">            System.out.println(r1);</span><br><span class="line">            System.out.println(r2);</span><br><span class="line">            System.out.println(r3);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放资源</span></span><br><span class="line">            <span class="comment">// 避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span> (smt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    smt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ResultSet结果集对象"><a href="#ResultSet结果集对象" class="headerlink" title="ResultSet结果集对象"></a>ResultSet结果集对象</h3><ul><li>封装查询结果</li><li><code>boolean next()</code>：游标向下移动一行，判断当前行是否是最后一行末尾（是否有数据）。如果是，则返回false，如果不是返回true；</li><li><code>XXX getXXX(参数)</code>：获取一列数据<ul><li>XXX：代表数据类型， 如：int getInt()</li><li>参数：<ul><li>int：代表列的编号，如： getString(1)</li><li>String：代表列名称，如： getString(“name”)</li></ul></li></ul></li><li>使用步骤：<ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ResultSet resultSet = smt.executeQuery(s1);</span><br><span class="line"><span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">    System.out.println(resultSet.getString(<span class="string">"name"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="PreparedStatement执行SQL语句的对象"><a href="#PreparedStatement执行SQL语句的对象" class="headerlink" title="PreparedStatement执行SQL语句的对象"></a>PreparedStatement执行SQL语句的对象</h3><ul><li><p>SQL注入问题：在拼接SQL时，有一些SQL的特殊关键字参与字符串的拼接，会造成安全性问题</p><blockquote><ol><li>输入用户随便，输入密码：a’ or ‘a’ = ‘a’</li><li>sql：select * from user where username = ‘fhdsjkf’ and password = ‘a’ or ‘a’ = ‘a’ </li></ol></blockquote></li><li><p>解决方案：使用<code>PreparedStatement</code>对象</p></li><li>预编译的SQL：参数使用<code>？</code>作为占位符</li><li>使用步骤：<ol><li>导入驱动jar包</li><li>注册驱动</li><li>获取数据库连接对象Connection</li><li>定义SQL<blockquote><p>sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;</p></blockquote></li><li>获取执行SQL语句的对象PreparedStatement <ul><li><code>Connection.prepareStatement(String sql)</code></li></ul></li><li>给？赋值：<blockquote><p>方法：<code>setXXX(参数1，参数2)</code></p><ul><li>参数1：?的位置编号，从1开始</li><li>参数2：?的值</li></ul></blockquote></li><li>执行SQL：接受返回值结果，不需要传递SQL语句</li><li>处理结果</li><li>释放资源</li></ol></li><li>注意：使用PreparedStatement来完成增删改查的所有操作<ol><li>可以防止SQL注入</li><li>效率更高</li><li>语句中使用了占位符，规定了sql语句的结构。用户可以设置”?”的值，但是不能改变sql语句的结构，因此解决了SQL注入</li></ol></li></ul><h1 id="JDBC工具类：JDBCUtils"><a href="#JDBC工具类：JDBCUtils" class="headerlink" title="JDBC工具类：JDBCUtils"></a>JDBC工具类：JDBCUtils</h1><ul><li>目的：简化书写</li><li><p>分析：</p><ol><li>注册驱动抽取</li><li><p>抽取一个方法获取连接对象</p><ul><li>需求：不想传递参数（麻烦），还得保证工具类的通用性。</li><li>解决：配置文件<code>jdbc.properties</code>（文件的读取，只需要读取一次即可拿到这些值。使用静态代码块）  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=</span><br><span class="line"><span class="attr">user</span>=</span><br><span class="line"><span class="attr">password</span>=</span><br><span class="line"><span class="attr">driver</span>=</span><br></pre></td></tr></table></figure></li></ul></li><li><p>抽取一个方法释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nogizaka.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 读取资源文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1 创建Properties类</span></span><br><span class="line">            Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 获取src路径下的文件的方式：ClassLoader 类加载器</span></span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            <span class="comment">// 获取字符串路径</span></span><br><span class="line">            String path = res.getPath();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2 加载文件</span></span><br><span class="line">            prop.load(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">            <span class="comment">// 3 获取数据 赋值</span></span><br><span class="line">            url = prop.getProperty(<span class="string">"url"</span>);</span><br><span class="line">            user = prop.getProperty(<span class="string">"user"</span>);</span><br><span class="line">            password = prop.getProperty(<span class="string">"password"</span>);</span><br><span class="line">            driver = prop.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">            <span class="comment">// 4 注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据库连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet res, Statement stmt, Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                res.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>注意：</p><ul><li>properties文件放在src目录下</li><li><strong>获取src路径下的文件的方式：ClassLoader 类加载器</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">URL res = classLoader.getResource(<span class="string">"jdbc.properties"</span>);</span><br><span class="line"><span class="comment">// 获取字符串路径</span></span><br><span class="line">String path = res.getPath();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="JDBC事务控制"><a href="#JDBC事务控制" class="headerlink" title="JDBC事务控制"></a>JDBC事务控制</h1><ul><li>使用<code>Connection</code>对象来管理事务<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<blockquote><p>在执行sql之前开启事务</p></blockquote></li><li>提交事务：commit() <blockquote><p>当所有sql都执行完提交事务</p></blockquote></li><li>回滚事务：rollback() <blockquote><p>在catch中回滚事务</p></blockquote></li></ul></li></ul><h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><ul><li>概念：其实就是一个容器（集合），存放数据库连接的容器。当系统初始化好后，容器被创建，容器中会申请一些连接对象当用户来访问数据库时，从容器中获取连接对象，用户访问完以后，会将连接对象归还给容器。</li><li>好处：节约资源，提供访问效率</li><li>实现：<ul><li>标准接口：<code>javax.sql.DataSource</code></li><li>方法：<ul><li>获取连接：<code>getConnection()</code></li><li>归还连接：<code>Connection.close()</code> 如果连接对象Connection是从连接池中获取的，那么调用<code>Connection.close()</code>方法，则不会再关闭连接，而是归还连接</li></ul></li><li>一般由数据库厂商实现<ul><li>C3P0:数据库连接池技术</li><li>Druid:数据库连接池实现技术（阿里）</li></ul></li></ul></li></ul><h2 id="C3P0-数据库连接池技术"><a href="#C3P0-数据库连接池技术" class="headerlink" title="C3P0 数据库连接池技术"></a>C3P0 数据库连接池技术</h2><ul><li>步骤：<ol><li>导入jar包<ul><li><code>c3p0-0.9.5.2.jar</code></li><li><code>mchange-commons-java-0.2.12.jar</code></li></ul></li><li>定义配置文件：<ul><li>名称：c3p0.properties 或者 c3p0-config.xml</li><li>路径：src目录下</li></ul></li><li>创建核心对象 数据率连接池对象 <code>new ComboPooledDataSource()</code></li><li>获取连接：<code>getConnection()</code></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数据库连接池对象</span></span><br><span class="line">DataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">// 获取连接对象,getConnection()可以传递配置名，不同配置效果不同，不传使用默认配置</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line"><span class="comment">// 归还连接</span></span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><ul><li>配置文件：c3p0-config.xml<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--初始化申请的连接数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--最大连接数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--超时时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Druid-数据库连接池实现技术"><a href="#Druid-数据库连接池实现技术" class="headerlink" title="Druid 数据库连接池实现技术"></a>Druid 数据库连接池实现技术</h2><ul><li>步骤：<ol><li>导入jar包 <ul><li><code>druid-1.0.9.jar</code></li></ul></li><li>定义配置文件<ul><li>Properties</li><li>可以放在任意目录下</li></ul></li><li>加载配置文件</li><li>获取数据库连接池对象：通过工厂来获取 <code>DruidDataSourceFactory.createDataSource()</code></li><li>获取连接：<code>getConnection()</code></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义配置文件</span></span><br><span class="line"><span class="comment">// 加载配置文件</span></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"><span class="comment">// 将properties文件转换为字节输入流</span></span><br><span class="line">InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>);</span><br><span class="line"><span class="comment">// 读取属性列表(键和元素对)从输入字节流。</span></span><br><span class="line">prop.load(is);</span><br><span class="line"><span class="comment">// 获取连接池对象,通过工厂来获取，参数为配置文件</span></span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br></pre></td></tr></table></figure><ul><li>定义工具类<ol><li>定义一个类 JDBCUtils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池获取连接</li><li>释放资源</li><li>获取连接池的方法   </li></ol></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.定义成员变量 DataSource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>));</span><br><span class="line">            <span class="comment">//2.获取DataSource</span></span><br><span class="line">            ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 获取连接</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 释放资源</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Statement stmt,Connection conn)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        close(<span class="keyword">null</span>,stmt,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(ResultSet rs , Statement stmt, Connection conn)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(stmt != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();<span class="comment">//归还连接</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 获取连接池方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring-JDBC-JDBC-Template"><a href="#Spring-JDBC-JDBC-Template" class="headerlink" title="Spring JDBC:JDBC Template"></a>Spring JDBC:JDBC Template</h1><ul><li>Spring框架对JDBC的简单封装，提供了一个JDBCTemplate对象简化JDBC的开发</li><li><p>步骤</p><ol><li><p>导入jar包</p><ul><li>commons-logging-1.2.jar</li><li>spring-beans-5.0.0.RELEASE.jar</li><li>spring-core-5.0.0.RELEASE.jar</li><li>spring-jdbc-5.0.0.RELEASE.jar</li><li>spring-tx-5.0.0.RELEASE.jar</li></ul></li><li><p>创建JdbcTemplate对象，依赖于数据源DataSource</p><ul><li><code>JdbcTemplate template = new JdbcTemplate(ds);</code></li></ul></li><li><p>调用JdbcTemplate的方法来完成CRUD的操作</p><ul><li><p><code>update()</code>：执行DML语句。增、删、改语句</p></li><li><p><code>queryForMap()</code>：查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合</p><blockquote><p>注意：这个方法查询的结果集长度只能是1</p></blockquote></li><li><p><code>queryForList()</code>：查询结果将结果集封装为list集合</p><blockquote><p>注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</p></blockquote></li><li><p><code>query()</code>：查询结果，将结果封装为JavaBean对象</p><blockquote><ul><li>query的参数：RowMapper</li><li>一般我们使用<code>BeanPropertyRowMapper</code>实现类。可以完成数据到JavaBean的<strong>自动封装</strong></li><li><code>new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</code></li></ul></blockquote></li><li><p><code>queryForObject()</code>：查询结果，将结果封装为对象</p><blockquote><p> 一般用于聚合函数的查询</p></blockquote></li></ul></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 需求：</span></span><br><span class="line"><span class="comment">1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">2. 添加一条记录</span></span><br><span class="line"><span class="comment">3. 删除刚才添加的记录</span></span><br><span class="line"><span class="comment">4. 查询id为1的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">7. 查询总记录数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateDemo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Junit单元测试，可以让方法独立执行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取JDBCTemplate对象</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 1. 修改1号数据的 salary 为 10000</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 定义sql</span></span><br><span class="line">        String sql = <span class="string">"update emp set salary = 10000 where id = 1001"</span>;</span><br><span class="line">        <span class="comment">//3. 执行sql</span></span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 2. 添加一条记录</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"insert into emp(id,ename,dept_id) values(?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>, <span class="string">"郭靖"</span>, <span class="number">10</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 3.删除刚才添加的记录</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"delete from emp where id = ?"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = template.update(sql, <span class="number">1015</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 4.查询id为1001的记录，将其封装为Map集合</span></span><br><span class="line"><span class="comment">        * 注意：这个方法查询的结果集长度只能是1</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp where id = ? or id = ?"</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = template.queryForMap(sql, <span class="number">1001</span>,<span class="number">1002</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;id=1001, ename=孙悟空, job_id=4, mgr=1004, joindate=2000-12-17, salary=10000.00, bonus=null, dept_id=20&#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 5. 查询所有记录，将其封装为List</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">            System.out.println(stringObjectMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Emp <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                Emp emp = <span class="keyword">new</span> Emp();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">                String ename = rs.getString(<span class="string">"ename"</span>);</span><br><span class="line">                <span class="keyword">int</span> job_id = rs.getInt(<span class="string">"job_id"</span>);</span><br><span class="line">                <span class="keyword">int</span> mgr = rs.getInt(<span class="string">"mgr"</span>);</span><br><span class="line">                Date joindate = rs.getDate(<span class="string">"joindate"</span>);</span><br><span class="line">                <span class="keyword">double</span> salary = rs.getDouble(<span class="string">"salary"</span>);</span><br><span class="line">                <span class="keyword">double</span> bonus = rs.getDouble(<span class="string">"bonus"</span>);</span><br><span class="line">                <span class="keyword">int</span> dept_id = rs.getInt(<span class="string">"dept_id"</span>);</span><br><span class="line"></span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setEname(ename);</span><br><span class="line">                emp.setJob_id(job_id);</span><br><span class="line">                emp.setMgr(mgr);</span><br><span class="line">                emp.setJoindate(joindate);</span><br><span class="line">                emp.setSalary(salary);</span><br><span class="line">                emp.setBonus(bonus);</span><br><span class="line">                emp.setDept_id(dept_id);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> emp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 6. 查询所有记录，将其封装为Emp对象的List集合</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6_2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select * from emp"</span>;</span><br><span class="line">        List&lt;Emp&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 7. 查询总记录数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select count(id) from emp"</span>;</span><br><span class="line">        Long total = template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDBC&quot;&gt;&lt;a href=&quot;#JDBC&quot; class=&quot;headerlink&quot; title=&quot;JDBC&quot;&gt;&lt;/a&gt;JDBC&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h
      
    
    </summary>
    
    
      <category term="java,mysql" scheme="https://coderjeremy.github.io/tags/java-mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://coderjeremy.github.io/2020/02/13/MySQL/"/>
    <id>https://coderjeremy.github.io/2020/02/13/MySQL/</id>
    <published>2020-02-13T13:44:40.000Z</published>
    <updated>2020-02-13T13:50:50.409Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="启动与关闭"><a href="#启动与关闭" class="headerlink" title="启动与关闭"></a>启动与关闭</h2><ul><li>MySQL服务启动：<ol><li>手动</li><li>cmd–&gt; services.msc打开服务窗口</li><li>使用管理员打开cmd<ul><li>net start mysql：启动mysql服务</li><li>net stop mysql：关闭mysql服务</li></ul></li></ol></li></ul><h2 id="登录与退出"><a href="#登录与退出" class="headerlink" title="登录与退出"></a>登录与退出</h2><ul><li>MySQL登录<ul><li><code>mysql -u[user] -p[password]</code></li><li><code>mysql -h[ip] -u[user] -p[password]</code></li><li><code>mysql --host=[ip] --user=[user] --password=[password]</code></li></ul></li><li>MySQL退出<ul><li>exit</li><li>quit</li></ul></li><li>MySQL目录结构<ul><li>安装目录<ul><li>配置文件 my.ini</li></ul></li><li>数据目录<ul><li>数据库</li><li>表</li><li>数据</li></ul></li></ul></li></ul><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><ul><li>结构化查询语言。定义了操作所有关系型数据库的规则</li></ul><h2 id="SQL通用语法"><a href="#SQL通用语法" class="headerlink" title="SQL通用语法"></a>SQL通用语法</h2><ul><li>SQL语句可以单行或者多行书写，以分号结尾</li><li></li><li>可以使用空格和缩进来增强语句的可读性</li><li>MySQL数据库的SQL语句不区分大小写，关键字建议使用大写</li><li>注释：<ul><li>单行注释：<code>-- 注释内容</code> 或<code># 注释内容</code>（MySQL特有）</li><li>多行注释： <code>/* 注释 */</code></li></ul></li></ul><h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><ul><li>DDL(Data Definition Language)数据定义语言<blockquote><p>用来定义数据库对象：数据库，表，列等。关键字：<code>create</code>, <code>drop</code>,<code>alter</code> 等</p></blockquote></li><li>DML(Data Manipulation Language)数据操作语言<blockquote><p>用来对数据库中表的数据进行增删改。关键字：<code>insert</code>, <code>delete</code>, <code>update</code> 等</p></blockquote></li><li>DQL(Data Query Language)数据查询语言<blockquote><p>用来查询数据库中表的记录(数据)。关键字：<code>select</code>, <code>where</code> 等</p></blockquote></li><li>DCL(Data Control Language)数据控制语言<blockquote><p>用来定义数据库的访问权限和安全级别，及创建用户。关键字：<code>GRANT</code>， <code>REVOKE</code> 等</p></blockquote></li></ul><h3 id="DDL数据定义语言"><a href="#DDL数据定义语言" class="headerlink" title="DDL数据定义语言"></a>DDL数据定义语言</h3><h4 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h4><ul><li>CRUD：增删改查</li></ul><h5 id="CREATE创建"><a href="#CREATE创建" class="headerlink" title="CREATE创建"></a>CREATE创建</h5><ul><li>创建数据库：<code>CREATE DATABASE 数据库名称;</code></li><li>创建数据库，判断不存在，再创建：<code>CREATE DATABASE IF NOT EXISTS 数据库名称;</code></li><li>创建数据库，并指定字符集：<code>CREATE DATABASE 数据库名称 CHARACTER SET 字符集名;</code></li></ul><h5 id="RETRIEVE查询"><a href="#RETRIEVE查询" class="headerlink" title="RETRIEVE查询"></a>RETRIEVE查询</h5><ul><li>查询所有数据库名称：<code>SHOW DATABASES;</code></li><li>查询某个数据库的字符集：<code>SHOW CREATE DATABASE 数据库名称;</code>（查询某个数据库的创建语句）</li></ul><h5 id="UPDATE修改"><a href="#UPDATE修改" class="headerlink" title="UPDATE修改"></a>UPDATE修改</h5><ul><li>修改数据库的字符集：<code>ALTER DATABASE 数据库名称 CHARACTER SET 字符集名称;</code></li></ul><h5 id="DELETE删除"><a href="#DELETE删除" class="headerlink" title="DELETE删除"></a>DELETE删除</h5><ul><li>删除数据库：<code>DROP DATABASE 数据库名称;</code></li><li>判断数据库存在，存在再删除：<code>DROP DATABASE IF EXISTS 数据库名称;</code></li></ul><h5 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h5><ul><li>查询当前正在使用的数据库名称：<code>SELECT DATABASE();</code></li><li>使用数据库：<code>USE 数据库名称;</code></li></ul><h4 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h4><h5 id="CREATE创建-1"><a href="#CREATE创建-1" class="headerlink" title="CREATE创建"></a>CREATE创建</h5><ul><li><p>格式</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    列名<span class="number">1</span> 数据类型<span class="number">1</span>,</span><br><span class="line">    列名<span class="number">2</span> 数据类型<span class="number">2</span>,</span><br><span class="line">    ....</span><br><span class="line">    列名n 数据类型n</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>注意：最后一列，不需要加逗号</p></li><li>数据库类型<ul><li>int()：整数类型</li><li>double(,)：浮点数</li><li>date：日期，只包含年月日 yyyy-MM-dd</li><li>datetime：日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss</li><li>timestamp：时间戳类型，包含年月日时分秒 yyyy-MM-dd HH:mm:ss<blockquote><p>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</p></blockquote></li><li>varchar()：字符串</li></ul></li><li>复制表：<code>CREATE TABLE 表名 LIKE 被复制的表名</code></li></ul><h5 id="RETRIEVE查询-1"><a href="#RETRIEVE查询-1" class="headerlink" title="RETRIEVE查询"></a>RETRIEVE查询</h5><ul><li>查询某个数据库中所有的表名称：<code>SHOW TABLES;</code></li><li>查询表结构：<code>DESC 表名;</code></li></ul><h5 id="UPDATE修改-1"><a href="#UPDATE修改-1" class="headerlink" title="UPDATE修改"></a>UPDATE修改</h5><ul><li>修改表名：<code>ALTER TABLE 表名 RENAME TO 新表名</code></li><li>修改表的字符集：<code>ALTER TABLE 表名 CHARACTER SET 字符集名称</code></li><li>添加一列：<code>ALTER TABLE 表名 ADD 列名 数据类型</code></li><li>修改列名称、类型：<ul><li><code>ALTER TABLE 表名 CHANGE 列名 新列名 新数据类型</code></li><li><code>ALTER TABLE 表名 MODIFY 列名 新数据类型</code></li></ul></li><li>删除列：<code>ALTER TABLE 表名 DROP 列名</code></li></ul><h5 id="DELETE删除-1"><a href="#DELETE删除-1" class="headerlink" title="DELETE删除"></a>DELETE删除</h5><ul><li>删除表：<ul><li><code>DROP TABLE 表名;</code></li><li><code>DROP TABLE IF EXISTS 表名;</code></li></ul></li></ul><h3 id="DML数据操纵语言"><a href="#DML数据操纵语言" class="headerlink" title="DML数据操纵语言"></a>DML数据操纵语言</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><ul><li>语法：<code>INSERT INTO 表名(列名1,列名2,...,列名n) VALUES(值1,值2,...值n);</code></li><li>注意：<ol><li>列名和值要一一对应</li><li>如果表名后，不定义列名，则默认给所有列添加值</li><li>除了数字类型，其他类型需要使用引号(单双都可以)引起来</li></ol></li></ul><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><ul><li>语法：<code>DELETE FROM 表名 [WHERE 条件];</code></li><li>注意：<ol><li>如果不加条件，则删除表中所有的记录</li><li>如果要删除所有记录<ul><li><code>DELETE FROM 表名;</code> 不推荐使用，有多少条记录就会执行多少次删除操作</li><li><code>TRUNCATE TABLE 表名;</code> 推荐使用，效率更高，先删除表，然后再创建一张一样的表</li></ul></li></ol></li></ul><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ul><li>语法：<code>UPDATE 表名 SET 列名1 = 值1,列名2 = 值2,...[WHERE 条件];</code></li><li>注意：如果不加任何条件，则会将表中所有记录全部修改</li></ul><h3 id="DQL数据查询语言"><a href="#DQL数据查询语言" class="headerlink" title="DQL数据查询语言"></a>DQL数据查询语言</h3><ul><li><code>SELECT * FROM 表名;</code></li><li>语法：<ul><li><code>SELECT</code>：字段列表</li><li><code>FROM</code>：表名列表</li><li><code>WHERE</code>：条件列表</li><li><code>GROUP BY</code>：分组字段</li><li><code>HAVING</code>：分组之后的条件</li><li><code>ORDER BY</code>：排序</li><li><code>LIMIT</code>：分页限定</li></ul></li></ul><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><ul><li>多个字段的查询<ul><li><code>SELECT 字段名1,字段名2,...FROM 表名;</code><blockquote><p>如果查询所有字段，可以使用*代替字段列表</p></blockquote></li></ul></li><li>去除重复<ul><li><code>DISTINCT</code></li></ul></li><li>计算列<ul><li>一般可以使用四则运算计算一些列的值</li><li><code>IFNUL(表达式1，表达式2)</code>：NULL参与的运算，计算结果都为NULL<blockquote><ul><li>表达式1：哪个字段需要判断是否为NULL</li><li>表达式2：如果表达式1的字段为NULL后进行替换的值</li></ul></blockquote></li></ul></li><li>起别名<ul><li><code>AS</code>：可以省略</li></ul></li></ul><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li>WHERE子句后跟条件</li><li><p>运算符</p><ul><li><code>&gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</code></li><li><code>BETWEEN...AND</code> </li><li><code>IN( 集合)</code></li><li><code>LIKE：模糊查询</code> <blockquote><p>占位符：</p><ul><li><code>_</code>:单个任意字符</li><li><code>%</code>：多个任意字符</li></ul></blockquote></li><li><code>IS NULL</code></li><li><code>AND  或 &amp;&amp;</code></li><li><code>OR 或 ||</code></li><li><p><code>NOT  或 !</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄大于20岁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄等于20岁</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄不等于20岁</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age != <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &lt;&gt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄大于等于20 小于等于30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span> &amp;&amp;  age &lt;=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &gt;= <span class="number">20</span> <span class="keyword">AND</span>  age &lt;=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄22岁，18岁，25岁的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age = <span class="number">22</span> <span class="keyword">OR</span> age = <span class="number">18</span> <span class="keyword">OR</span> age = <span class="number">25</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">22</span>,<span class="number">18</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询英语成绩为null</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english = <span class="literal">NULL</span>; <span class="comment">-- 不对的。null值不能使用 = （!=） 判断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询英语成绩不为null</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english  <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓马的有哪些？ like</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'马%'</span>;</span><br><span class="line"><span class="comment">-- 查询姓名第二个字是化的人</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">"_化%"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名是3个字的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'___'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名中包含德的人</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'%德%'</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><ul><li>语法：<code>ORDER BY 子句</code><ul><li><code>ORDER BY 排序字段1 排序方式1,排序字段2 排序方式2...</code></li></ul></li><li>排序方式：<ul><li><code>ASC</code>：升序。（默认）</li><li><code>DESC</code>：降序</li></ul></li><li>注意：如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件<blockquote><p>eg：SELECT * FROM emp ORDER BY job_id ASC,id DESC;</p></blockquote></li></ul><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><ul><li>将一列数据作为一个整体，进行纵向的计算。<ul><li>COUNT:计算个数，一般选择非空的列（主键）COUNT(*)<blockquote><p>SELECT COUNT(IFNULL(mgr,0)) FROM emp;</p></blockquote></li><li>MAX:计算最大值</li><li>MIN:计算最小值</li><li>SUM:求和</li><li>AVG:求平均值</li></ul></li><li>注意：聚合函数的计算，排除null值。<ul><li>解决方案；<ol><li>选择不包含非空的列进行计算</li><li><code>IFNULL</code>函数</li></ol></li></ul></li></ul><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><ul><li>语法：<code>GROUP BY 分组字段;</code></li><li>注意：<ul><li>分组之后查询的字段：分组字段、聚合函数</li><li>where 和 having 的区别<ul><li>where在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</li><li>where后不可以跟聚合函数，having可以进行聚合函数的判断</li></ul></li></ul></li></ul><blockquote></blockquote><pre><code>-- 按照性别分组。分别查询男、女同学的平均分SELECT sex , AVG(math) FROM student GROUP BY sex;-- 按照性别分组。分别查询男、女同学的平均分,人数SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;</code></pre><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><ul><li>语法：LIMIT开始的索引，每页查询的条数；</li><li>公式：<code>开始的索引 = （当前的页码 - 1） * 每页显示的条数</code><blockquote></blockquote><pre><code>-- 每页显示3条记录 SELECT * FROM student LIMIT 0,3; -- 第1页SELECT * FROM student LIMIT 3,3; -- 第2页SELECT * FROM student LIMIT 6,3; -- 第3页</code></pre></li><li>limit 是一个MySQL”方言”</li></ul><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li>概念：对表中的数据进行限定，保证数据的正确性、有效性和完整性</li><li>分类：<ul><li>主键约束：<code>PRIMARY KEY</code></li><li>非空约束：<code>NOT NULL</code></li><li>唯一约束：<code>UNIQUE</code></li><li>外键约束：<code>FOREIGN KEY</code></li></ul></li></ul><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><ul><li><code>PRIMARY KEY</code><ul><li>含义；非空且唯一</li><li>一张表只能有一个字段为主键</li><li>主键就是表总记录的唯一表示</li></ul></li><li><p>在创建表时，添加主键约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>, <span class="comment">-- 给id添加主键约束</span></span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>创建表之后，添加主键约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu</span><br><span class="line"><span class="keyword">MODIFY</span></span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除主键</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 错误写法:ALTER TABLE stu MODIFY id INT;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu</span><br><span class="line"><span class="keyword">DROP</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>;</span><br></pre></td></tr></table></figure></li><li><p>自动增长</p><ul><li>概念：如果某一列时数值类型的，使用<code>AUTO_INCREMENT</code>可以来完成值的自动增长</li><li><p>在创建表时，添加主键约束，并且完成主键自增</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT.</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>添加自动增长</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu </span><br><span class="line"><span class="keyword">MODIFY</span></span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> AUTO_INCREMENT;</span><br></pre></td></tr></table></figure></li><li><p>删除自动增长</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu </span><br><span class="line"><span class="keyword">MODIFY</span></span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><ul><li><code>NOT NULL</code>，值不能为NULL类型</li><li><p>创建表时添加约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="comment">-- name为非空</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>创建表之后，添加非空约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu </span><br><span class="line"><span class="keyword">MODIFY</span> </span><br><span class="line">    <span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除非空约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu </span><br><span class="line"><span class="keyword">MODIFY</span> </span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="唯一约束（索引）"><a href="#唯一约束（索引）" class="headerlink" title="唯一约束（索引）"></a>唯一约束（索引）</h4><ul><li><code>UNIQUE</code>:值不能重复</li><li><p>创建表时，添加唯一约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span> <span class="comment">-- 添加了唯一约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>在创建表之后，添加唯一约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu</span><br><span class="line"><span class="keyword">MODIFY</span></span><br><span class="line">    phone_number <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除唯一约束（索引）</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stu </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> </span><br><span class="line">    phone_number;</span><br></pre></td></tr></table></figure></li></ul><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><ul><li><code>FOREIGN KEY</code>：让表与表产生关系，从而保证数据的正确性</li><li><p>在创建表时，添加外键约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</span><br><span class="line">    lesson <span class="built_in">VARCHAR</span>(<span class="number">20</span>), </span><br><span class="line">    <span class="keyword">CONSTRAINT</span> 外键名称 FOREIGN <span class="keyword">KEY</span> (外键列名称)  </span><br><span class="line">    <span class="keyword">REFERENCES</span> 主表名称(主表列名称) </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>在创建表后，添加外键约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> </span><br><span class="line"><span class="keyword">CONSTRAINT</span> </span><br><span class="line">    外键名称 FOREIGN <span class="keyword">KEY</span> (外键字段名称) </span><br><span class="line"><span class="keyword">REFERENCES</span></span><br><span class="line">    主表名称(主表列名称);</span><br></pre></td></tr></table></figure></li><li><p>删除外键约束</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line"><span class="keyword">DROP</span> </span><br><span class="line">    FOREIGN <span class="keyword">KEY</span> 外键名称;</span><br></pre></td></tr></table></figure></li><li><p>级联操作</p><ul><li><p>添加级联操作</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称</span><br><span class="line">    FOREIGN <span class="keyword">KEY</span>(外键字段名称)</span><br><span class="line">    <span class="keyword">REFERENCES</span> 主表名称(主表列名称)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span> </span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure></li><li><p>分类：</p><ul><li>级联更新:<code>ON UPDATE CASCADE</code></li><li>级联删除:<code>ON DELETE CASCADE</code></li></ul></li></ul></li></ul><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><h3 id="多表之间的关系"><a href="#多表之间的关系" class="headerlink" title="多表之间的关系"></a>多表之间的关系</h3><ul><li>分类：<ul><li>一对一：一对一关系实现，可以在任意一方添加唯一（UNIQUE）外键指向另一方的主键。</li><li>一对多：在多的一方建立外键，指向一的一方的主键。</li><li>多对多：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</li></ul></li></ul><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><ul><li>概念；设计数据库时，需要遵循一些规范，要遵循后边的范式要求，必须先遵循前边所有范式要求。<br>  设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈，越高的范式数据库冗余越小<br>  明确关系数据库有六种范式：第一范式、第二范式、第三范式、BC范式、第四范式、第五范式(完美范式)</li><li><strong>第一范式(1NF)</strong>：每一列都是不可分割的原子数据项</li><li><strong>第二范式(2NF)</strong>：在1NF基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的<strong>部分函数依赖</strong>）<ul><li><code>函数依赖</code>：A-&gt;B，如果通过A属性(属性组)的值能唯一确定B属性的值，则称B依赖于A</li><li><code>完全函数依赖</code>：A-&gt;B，如果A是一个属性组，则B属性值的确定需要依赖于A属性组中所有的属性值，如：(学号,课程名称)-&gt;分数</li><li><code>部分函数依赖</code>：A-&gt;B,如果A是一个属性组，则B属性值的确定只需要依赖于A属性组中某一些值即可。如：(学号,课程名称)-&gt;姓名</li><li><code>传递函数依赖</code>：A-&gt;B,B-C.如果通过A属性(属性组)的值，可以唯一确定B属性(属性组)的值，再通过B属性的值可以确定唯一C属性的值，则称C传递函数依赖于A</li><li>码：如果再一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该码的表<ul><li>主属性：码属性组中的所有属性</li><li>非主属性：非 码属性组中的属性</li></ul></li></ul></li><li><strong>第三范式(3NF)</strong>：在2NF的基础上，任何非主属性不依赖于其他非主属性(消除<strong>传递函数依赖</strong>)</li><li><strong>BC范式</strong>：在3NF的基础上消除主属性对于码的部分与传递函数依赖。</li></ul><h3 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h3><ul><li>备份：<code>mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</code></li><li>还原：登录数据库，创建数据库，使用数据库，执行<code>source 文件</code></li></ul><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li><p>查询语法：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    列名列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li><li><p>笛卡尔积：AXB的所有组合</p></li></ul><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><ul><li>步骤：<ol><li>从哪些表中查询数据</li><li>条件是什么</li><li>查询哪些字段</li></ol></li><li><p>隐式内连接：使用WHERE条件消除无用数据</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">t1.name, <span class="comment">-- 员工表的姓名</span></span><br><span class="line">t1.gender,<span class="comment">-- 员工表的性别</span></span><br><span class="line">t2.name <span class="comment">-- 部门表的名称</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    emp t1,</span><br><span class="line">    dept t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.<span class="string">`dept_id`</span> = t2.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li><li><p>显式内连接：<code>SELECT 字段列表 FROM 表名1 [INNER] JOIN 表名2 ON 条件</code></p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">JOIN</span> dept </span><br><span class="line"><span class="keyword">ON</span> emp.<span class="string">`dept_id`</span> = dept.<span class="string">`id`</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><ul><li><p>左外连接</p><ul><li>语法：<code>SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 OM 条件;</code></li><li>查询的是左表所有数据以及其交集部分</li></ul></li><li><p>右外连接</p><ul><li>语法：<code>SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 OM 条件;</code></li><li>查询的是右表所有数据以及其交集部分</li></ul></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li>概念：查询中嵌套查询，称嵌套查询为子查询。</li><li>子查询不同情况<ul><li>结果是单行单列：子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;= &lt; &lt;= =</li><li>结果是多行单列：子查询可以作为条件，使用运算符<code>IN(条件)</code>来判断</li><li>结果是多行多列：子查询可以作为一张虚拟表参与查询</li></ul></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><ul><li>概念：如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败</li><li>操作：<ul><li>开启事务：<code>START TRANSACTION;</code></li><li>回滚：<code>ROLLBACK;</code></li><li>提交：<code>COMMIT;</code></li></ul></li><li>MySQL数据库中事务默认自动提交<ul><li>事务提交的两种范式：<ul><li>自动提交:一条DML（增删改）语句会自动提交一次事务</li><li>手动提交：需要先开启事务，在提交</li></ul></li><li>修改事务的默认提交范式：<ul><li>查看事务的默认提交方式：<code>SELECT @@autocommit;</code>1代表自动提交，0代表手动提交</li><li>修改默认提交方式：<code>SET @@autocommit=0;</code></li></ul></li></ul></li></ul><h3 id="四大特征"><a href="#四大特征" class="headerlink" title="四大特征"></a>四大特征</h3><ul><li>原子性（Atomicity）：原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</li><li>一致性（Consistency）：事务前后数据的完整性必须保持一致。</li><li>隔离性（Isolation）：事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</li><li>持久性（Durability）：持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响</li></ul><h3 id="事务隔离的问题"><a href="#事务隔离的问题" class="headerlink" title="事务隔离的问题"></a>事务隔离的问题</h3><ul><li>脏读：一个事务，读取到另一个事务中没有提交的数据</li><li>不可重复读（虚读）：在同一个事务中，两次读取到的数据不一样</li><li>幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改</li></ul><h3 id="事务隔离的级别"><a href="#事务隔离的级别" class="headerlink" title="事务隔离的级别"></a>事务隔离的级别</h3><ul><li><code>read uncommitted</code>读取尚未提交的数据 ：脏读、不可重复读、幻读</li><li><code>read committed</code>读取已经提交的数据 ：可以解决脏读–oracle默认的</li><li><code>repeatable read</code>重读读取：可以解决脏读和不可重复读–mysql默认的</li><li><code>serializable</code>串行化：可以解决脏读不可重复读和幻读–相当于锁表</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>注意：隔离级别从小到大安全性越来越高，但是效率越来越低</li><li>数据库查询隔离级别：<code>select @@tx_isolation</code>;</li><li>数据库设置隔离级别：<code>set global transaction isolation level 级别字符串</code>;</li></ul><h2 id="DCL管理用户、授权"><a href="#DCL管理用户、授权" class="headerlink" title="DCL管理用户、授权"></a>DCL管理用户、授权</h2><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><ul><li>添加用户：<code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></li><li>删除用户：<code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></li><li>修改用户密码：<ul><li><code>UPDATE USER SET PASSWORD = PASSWORD(&#39;新密码&#39;) WHERE USER = &#39;用户名&#39;;</code></li><li><code>SET PASSWORD FOR &#39;用户名&#39;@&#39;主机名&#39; = PASSWORD(&#39;新密码&#39;);</code><blockquote><p>mysql中忘记了root用户的密码？</p><ol><li>cmd – &gt; net stop mysql 停止mysql服务(需要管理员运行该cmd)</li><li>使用无验证方式启动mysql服务： mysqld –skip-grant-tables</li><li>打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</li><li>use mysql;</li><li>update user set password = password(‘你的新密码’) where user = ‘root’;</li><li>关闭两个窗口</li><li>打开任务管理器，手动结束mysqld.exe 的进程</li><li>启动mysql服务</li><li>使用新密码登录。</li></ol></blockquote></li></ul></li><li>查询用户：<ol><li>切换到mysql数据库：<code>USE mysql;</code></li><li>查询user表：<code>SELECT * FROM USER;</code></li></ol></li></ul><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ul><li>查询权限：<code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></li><li>授予权限：<code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code><ul><li>授予所有权限：<code>GRANT ALL ON *.* TO &#39;用户名&#39;@&#39;主机名&#39;</code>;</li></ul></li><li>撤销权限：<code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;启动与关闭&quot;&gt;&lt;a href=&quot;#启动与关闭&quot; class=&quot;headerlink&quot; title=&quot;启动与
      
    
    </summary>
    
    
      <category term="MySQL" scheme="https://coderjeremy.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Java测试、反射、注解</title>
    <link href="https://coderjeremy.github.io/2020/02/09/Java%E6%B5%8B%E8%AF%95%E3%80%81%E5%8F%8D%E5%B0%84%E3%80%81%E6%B3%A8%E8%A7%A3/"/>
    <id>https://coderjeremy.github.io/2020/02/09/Java测试、反射、注解/</id>
    <published>2020-02-09T03:00:26.000Z</published>
    <updated>2020-02-09T03:01:04.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>测试分类；<ul><li>黑盒测试；不需要写代码，给输入值，看程序是否能够输出期望值</li><li>白盒测试；需要写代码。关注程序具体的执行流程。</li></ul></li><li><p>Junit使用；白盒测试</p><ul><li><p>步骤；</p><ol><li>定义一个测试类（测试用例）<ul><li>建议；<ul><li>测试类名；<code>被测试的类名Test</code></li><li>报名；<code>xxx.xx.xx.test</code></li></ul></li></ul></li><li>定义测试方法；可以独立运行<ul><li>建议；<ul><li>方法名；<code>test测试的方法名</code></li><li>返回值；<code>void</code></li><li>参数列表；空参</li></ul></li></ul></li><li>给方法加<code>@Test</code></li><li>导入junit依赖环境</li></ol></li><li><p>判断结果；</p><ul><li>红色；失败</li><li>绿色；成功</li><li>一般使用断言操作来处理结果；<code>Assert.assertEquals(期望,结果)</code></li></ul></li><li><p>补充；</p><ul><li><code>@Before</code>；修饰的方法会在测试方法之前被自动执行（一般用于资源申请）</li><li><code>@After</code>；修饰的方法会在测试方法执行之后自动被执行（一般用于资源释放）</li></ul></li></ul></li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><ul><li>框架；半成品软件。可以再框架的基础上进行软件开发，简化编码</li><li><p>反射；将类的各个组成部分封装为其他对象，这就是反射机制</p><ul><li><p>优点；</p><ol><li>可以在程序运行过程中，操作这些对象</li><li>可以解耦，提高程序的可扩展性</li></ol></li><li><p>获取Class对象的方式；</p><ol><li><code>Class.forName(&quot;全类名&quot;)</code>；将字节码文件加载进内存，返回Class对象<blockquote><p>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</p></blockquote></li><li><code>类名.class</code>；通过类名的属性class获取<blockquote><p>多用于参数的传递</p></blockquote></li><li><code>对象.getClass()</code>；getClass()方法在Object类中定义<blockquote><p>多用于对象的获取字节码的方式</p></blockquote></li></ol><ul><li>结论；同一个字节码文件（*.class）在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个</li></ul></li><li><p>Class对象功能</p><ul><li><p>获取功能</p><ol><li><p>获取成员变量们</p><ul><li>Field[] getFields() ：获取所有public修饰的成员变量</li><li><p>Field getField(String name)   获取指定名称的 public修饰的成员变量</p></li><li><p>Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符</p></li><li>Field getDeclaredField(String name)  </li></ul></li><li><p>获取构造方法们</p><ul><li>Constructor&lt;?&gt;[] getConstructors()  </li><li><p>Constructor<t> getConstructor(类&lt;?&gt;… parameterTypes)  </t></p></li><li><p>Constructor<t> getDeclaredConstructor(类&lt;?&gt;… parameterTypes)  </t></p></li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()  </li></ul></li><li><p>获取成员方法们：</p><ul><li>Method[] getMethods()  </li><li><p>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  </p></li><li><p>Method[] getDeclaredMethods()  </p></li><li>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes)  </li></ul></li><li><p>获取全类名    </p><ul><li>String getName()  </li></ul></li></ol></li></ul></li><li><p>Field：成员变量</p><ul><li>操作：<ol><li>设置值；void set(Object obj, Object value)  </li><li>获取值；get(Object obj) </li><li>忽略访问权限修饰符的安全检查；setAccessible(true):暴力反射</li></ol></li></ul></li><li><p>Constructor:构造方法</p><ul><li>创建对象：<code>T newInstance(Object... initargs)</code>  <ul><li>如果使用空参数构造方法创建对象，操作可以简化：Class对象newInstance方法</li></ul></li></ul></li><li><p>Method：方法对象</p><ul><li><p>执行方法： Object invoke(Object obj, Object… args)  </p></li><li><p>获取方法名称： String getName:获取方法名</p></li></ul></li></ul></li></ul><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul><li>概念；说明程序的，给计算机看的</li><li>注释； 用文字描述程序的，给程序员看的</li><li>定义；注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</li><li><p>概念描述：</p><ul><li>JDK1.5之后的新特性</li><li>说明程序的</li><li>使用注解：@注解名称</li></ul></li><li><p>作用分类；</p><ul><li>①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】</li><li>②代码分析：通过代码里标识的注解对代码进行分析【使用反射】</li><li>③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】                                     </li></ul></li><li><p>JDK中预定义的一些注解</p><ul><li><code>@Override</code>：检测被该注解标注的方法是否是继承自父类(接口)的</li><li><code>@Deprecated</code>：该注解标注的内容，表示已过时</li><li><code>@SuppressWarnings</code>：压制警告<ul><li>一般传递参数all  <code>@SuppressWarnings(&quot;all&quot;)</code></li></ul></li></ul></li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li><p>格式；</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元注解</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> 注解名称&#123;</span><br><span class="line">    属性列表;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本质：注解本质上就是一个接口，该接口默认继承Annotation接口</p><blockquote><ul><li>public interface MyAnno extends java.lang.annotation.Annotation {}</li><li>反编译；cmd -&gt; <code>javap xxx.class</code></li></ul></blockquote></li><li><p>属性；接口中的抽象方法</p><ul><li>要求；<ol><li>属性的返回值类型有下列取值<ul><li>基本数据类型</li><li>String</li><li>枚举</li><li>注解</li><li>以上类型的数组</li></ul></li><li>定义了属性，在使用时需要给属性赋值<ul><li>如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。</li><li>如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。</li><li>数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略</li></ul></li></ol></li></ul></li><li><p>元注解；用于描述注解的注解</p><ul><li><code>@Target</code>：描述注解能够作用的位置<ul><li>ElementType取值：<ul><li>TYPE：可以作用于类上</li><li>METHOD：可以作用于方法上</li><li>FIELD：可以作用于成员变量上</li></ul></li></ul></li><li><code>@Retention</code>：描述注解被保留的阶段<ul><li>@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到</li></ul></li><li><code>@Documented</code>：描述注解是否被抽取到api文档中</li><li><code>@Inherited</code>：描述注解是否被子类继承</li></ul></li><li><p>在程序使用(解析)注解：获取注解中定义的属性值</p><ol><li>获取注解定义的位置的对象  （Class，Method,Field）</li><li>获取指定的注解<ul><li>getAnnotation(Class)<blockquote><p>其实就是在内存中生成了一个该注解接口的子类实现对象</p></blockquote></li></ul></li><li>调用注解中的抽象方法获取配置的属性值</li></ol></li><li>注意；   <ol><li>以后大多数时候，使用注解，而不是自定义注解</li><li>注解给谁用？<ul><li>编译器</li><li>给解析程序用</li></ul></li><li>注解不是程序的一部分，可以理解为一个标签</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Junit&quot;&gt;&lt;a href=&quot;#Junit&quot; class=&quot;headerlink&quot; title=&quot;Junit&quot;&gt;&lt;/a&gt;Junit&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概
      
    
    </summary>
    
    
      <category term="Java" scheme="https://coderjeremy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性</title>
    <link href="https://coderjeremy.github.io/2020/02/09/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://coderjeremy.github.io/2020/02/09/Java8新特性/</id>
    <published>2020-02-09T02:58:50.000Z</published>
    <updated>2020-02-09T03:00:04.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java8新特性"><a href="#Java8新特性" class="headerlink" title="Java8新特性"></a>Java8新特性</h1><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>有且只有一个抽象方法的接口，称之为函数式接口</li><li>接口中可以包含其他的方法（默认，静态，私有），但是只能有一个抽象方法。</li><li><p><code>@FunctionalInterface</code>注解</p><ul><li>检测接口是否是一个函数式接口<ul><li>是；编译成功</li><li>否；编译失败（接口中没有抽象方法或抽象方法的个数大于1）</li></ul></li><li>格式；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">    抽象方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用；一般可以作为方法的参数和返回值类型</p></li></ul><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h4 id="Lambda的延迟执行"><a href="#Lambda的延迟执行" class="headerlink" title="Lambda的延迟执行"></a>Lambda的延迟执行</h4><ul><li>Lambda特点；延迟执行</li><li>作用；提升性能</li></ul><h3 id="常用函数式接口"><a href="#常用函数式接口" class="headerlink" title="常用函数式接口"></a>常用函数式接口</h3><h4 id="Supplier接口"><a href="#Supplier接口" class="headerlink" title="Supplier接口"></a>Supplier接口</h4><ul><li><code>java.util.function.Supplier&lt;T&gt;</code>；接口仅包含一个无参的方法；<code>T get()</code>。用来获取一个泛型参数指定类型的对象数据。</li><li>生产型接口；指定接口的泛型是什么类型，那么接口中的get方法就会产生什么类型的数据</li></ul><h4 id="Consumer接口"><a href="#Consumer接口" class="headerlink" title="Consumer接口"></a>Consumer接口</h4><ul><li><code>java.util.function.Consumer&lt;T&gt;</code>；接口包含抽象方法<code>void accept(T t)</code>，意为消费一个指定泛型数据</li><li>消费型接口，泛型执行什么类型，就可以使用accept方法消费什么类型的数据，至于具体怎么消费，需要定义计算</li><li>默认方法；<code>addThen</code><ul><li>需要两个Consumer接口，可以把两个Consumer接口组合到一起，在对数据进行消费</li><li>源码；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> Consumer&lt;<span class="function">T <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span></span>&#123;</span><br><span class="line">    Objects.requirNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (T t)-&gt;&#123;accept(t);after.accept(t);&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Predicate接口"><a href="#Predicate接口" class="headerlink" title="Predicate接口"></a>Predicate接口</h3><ul><li><code>java.util.function.Predicate&lt;T&gt;</code>接口；对某种数据类型的数据进行判断，结果返回一个Boolean值</li><li>抽象方法；<code>boolean test(T t)</code>；用来对指定数据类型数据进行判断的方法</li><li><p>默认方法；</p><ul><li><p><code>add</code>；与</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">Objects.requireNonNull(other);</span><br><span class="line"><span class="keyword">return</span> (t) ‐&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>or</code>；或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">Objects.requireNonNull(other);</span><br><span class="line"><span class="keyword">return</span> (t) ‐&gt; test(t) || other.test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>negate</code>；非</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (t) ‐&gt; !test(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Function接口"><a href="#Function接口" class="headerlink" title="Function接口"></a>Function接口</h3><ul><li><code>java.util.function.Function&lt;T,R&gt;</code>；接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件</li><li>抽象方法；<code>R apply(T t)</code>；根据类型T的参数获取类型R的的结果（一般用于类型转换）</li><li>默认方法；<ul><li><code>andThen</code></li></ul></li></ul><h2 id="Stream流式思想"><a href="#Stream流式思想" class="headerlink" title="Stream流式思想"></a>Stream流式思想</h2><ul><li>JDK1.8之后</li><li>关注做什么，不关注怎么做</li><li>“Stream流”其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何元素（或其地址值）</li><li>Stream（流）是一个来自数据源的元素队列<ul><li>元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。</li><li>数据源流的来源。 可以是集合，数组等。</li></ul></li><li>Stream操作还有两个基础的特征：<ul><li>Pipelining: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</li><li>内部迭代： 以前对集合遍历都是通过Iterator或者增强for的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式，流可以直接调用遍历方法。</li></ul></li><li>使用步骤<ol><li>获取数据源</li><li>数据转换</li><li>执行操作获取想要的结果</li></ol></li><li>注意；<ul><li>Stream流属于管道流，只能被消费一次，第一个Stream流调用完毕，就会关闭。<h3 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h3></li></ul></li><li>两种方法<ol><li>所有的<code>Collection</code>集合都可以通过<code>stream</code>默认方法获取流</li><li><code>Stream</code>接口的静态方法<code>of</code>可以获取数组对应的流<blockquote><p><code>java.util.stream.Stream&lt;T&gt;</code>是Java8新加入的最常用的流接口</p></blockquote><h4 id="根据COllection获取流"><a href="#根据COllection获取流" class="headerlink" title="根据COllection获取流"></a>根据COllection获取流</h4></li></ol></li><li><code>default Stream&lt;E&gt; stream()</code></li></ul><h4 id="根据Stream接口获取流"><a href="#根据Stream接口获取流" class="headerlink" title="根据Stream接口获取流"></a>根据Stream接口获取流</h4><ul><li><code>static &lt;T&gt; Stream&lt;T&gt; of(T...values)</code>；参数是一个可变参数，可以传递一个数组</li></ul><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>延迟方法；返回值类型仍然是<code>Stream</code>接口自身类型的方法，因此支持链式调用。</li><li>终结方法；返回值类型不再是<code>Stream</code>接口自身类型的方法，因此不再支持类似<code>StringBuilder</code>那样的链式调用<h5 id="逐一处理；foreach"><a href="#逐一处理；foreach" class="headerlink" title="逐一处理；foreach"></a>逐一处理；foreach</h5></li><li><code>void forEach(Consumer&lt;? super T&gt; action)</code>；该方法接收一个<code>Consumer</code>接口函数，会将每一个流元素交给该函数进行处理</li><li>forEach方法，用来遍历流中的数据，是一个终结方法，遍历之后就不能继续调用Stream流中的其他方法<h5 id="过滤；filter"><a href="#过滤；filter" class="headerlink" title="过滤；filter"></a>过滤；filter</h5></li><li><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code>；可以通过filter方法将一个流转换为另一个子集流<h5 id="映射；map"><a href="#映射；map" class="headerlink" title="映射；map"></a>映射；map</h5></li><li><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper);</code>；将流中的元素映射到另一个流中，可以使用map方法<h5 id="统计个数；count"><a href="#统计个数；count" class="headerlink" title="统计个数；count"></a>统计个数；count</h5></li><li><code>long count()</code>；用于统计Stream流中元素的个数</li><li>count方法是一个终结方法，返回值是一个long类型的整数，所有不能再继续调用Stream流中的其他方法<h5 id="取用前几个；limit"><a href="#取用前几个；limit" class="headerlink" title="取用前几个；limit"></a>取用前几个；limit</h5></li><li><code>Stream&lt;T&gt; limit(long maxSize);</code>；用于截取流中的元素</li><li>limit是一个延迟方法，只是对流中的元素进行截取，返回是一个新的流，所以可以继续调用Stream流中的其他方法<h5 id="跳过前几个；skip"><a href="#跳过前几个；skip" class="headerlink" title="跳过前几个；skip"></a>跳过前几个；skip</h5></li><li><code>Stream&lt;T&gt; skip(long n);</code>；用于跳过元素</li><li>如果流的当前长度大于n，则跳过前n个，否则会得到一个长度为0的空流<h5 id="组合；concat"><a href="#组合；concat" class="headerlink" title="组合；concat"></a>组合；concat</h5></li><li><code>static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</code>；将两个流合并为一个流</li><li>这是一个静态方法，与String中的concat方法不同</li></ul><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ul><li>方法引用符：双冒号<code>::</code>为引用运算符，而它所在的表达式被称为<code>方法引用</code>。如果Lambda要表达的函数方案已经存在于某个方法的实现中，那么则可以通过双冒号来引用该方法作为Lambda的替代者</li><li>语义；<ul><li>Lambda表达式写法： <code>s -&gt; System.out.println(s)</code>；拿到参数之后经Lambda之手，继而传递给 System.out.println 方法去处理。</li><li>方法引用写法：<code>System.out::println</code>；直接让<code>System.out</code> 中的 <code>println</code> 方法来取代<code>Lambda</code>。两种写法的执行效果完全一样，而第二种方法引用的写法复用了已有方案，更加简洁。<blockquote><p>注:Lambda中传递的参数一定是方法引用中的那个方法可以接收的类型,否则会抛出异常</p></blockquote></li></ul></li><li>通过对象名引用成员方法<ul><li>通过对象名引用成员方法，使用前提是对象名已经存在，成员方法也是已经存在的</li></ul></li><li>通过类名称引用静态方法</li><li>通过super引用成员方法</li><li>通过this引用成员方法、</li><li>类的构造器引用</li><li>数组的构造器引用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java8新特性&quot;&gt;&lt;a href=&quot;#Java8新特性&quot; class=&quot;headerlink&quot; title=&quot;Java8新特性&quot;&gt;&lt;/a&gt;Java8新特性&lt;/h1&gt;&lt;h2 id=&quot;函数式接口&quot;&gt;&lt;a href=&quot;#函数式接口&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="Java" scheme="https://coderjeremy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java网络编程</title>
    <link href="https://coderjeremy.github.io/2020/02/05/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://coderjeremy.github.io/2020/02/05/Java网络编程/</id>
    <published>2020-02-05T04:25:53.000Z</published>
    <updated>2020-02-05T04:28:18.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java网络编程"><a href="#Java网络编程" class="headerlink" title="Java网络编程"></a>Java网络编程</h1><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><ul><li>软件结构：<ul><li>C/S；Client/Server</li><li>B/S；Browser/Server</li></ul></li></ul><h3 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h3><ul><li>TCP/IP协议；传输控制协议/因特网互联协议( Transmission Control Protocol/Internet Protocol)<ul><li>应用层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul></li><li>TCP；传输控制协议 (Transmission Control Protocol)。TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。<blockquote><ul><li>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠<ul><li>第一次：客户端—&gt;服务器（发请求）</li><li>第二次：客户端&lt;—服务器（返回响应）</li><li>第三次：客户端—&gt;服务器（曲儿响应）</li></ul></li></ul></blockquote></li><li>UDP；用户数据报协议(User Datagram Protocol)。UDP协议是一个面向无连接的协议。传输数据时，不需要建立连接，不管对方端服务是否启动，直接将数据、数据源和目的地都封装在数据包中，直接发送。每个数据包的大小限制在64k以内。它是不可靠协议，因为无连接，所以传输速度快，但是容易丢失数据。<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3></li><li>IP地址：指互联网协议地址（Internet Protocol Address），俗称IP。IP地址用来给一个网络中的计算机设备做唯一的编号。</li><li>IP分类：<ul><li>IPv4；是一个32位的二进制数，通常被分为4个字节，表示成 <code>a.b.c.d</code>的形式，例如<code>192.168.65.100</code> 。其中<code>a、b、c、d</code>都是0~255之间的十进制整数，那么最多可以表示42亿个是一个32位的二进制数，通常被分为4个字节，表示成<code>a.b.c.d</code>的形式，例如 <code>192.168.65.100</code> 。其中<code>a、b、c、d</code>都是0~255之间的十进制整数，那么最多可以表示42亿个</li><li>IPv6；采用128位地址长度，每16个字节一组，分成8组十六进制数，表示成 <code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789</code> </li></ul></li><li>本机IP地址：<code>127.0.0.1</code>、<code>localhost</code><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3></li><li>用两个字节表示的整数，它的取值范围是0~65535。其中，0~1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败。</li><li>常用端口号；<ul><li>80；网络端口</li><li>3306；MySQL</li><li>1521；Oracle</li><li>8080：Tomcat</li></ul></li></ul><h2 id="TCP通信"><a href="#TCP通信" class="headerlink" title="TCP通信"></a>TCP通信</h2><ul><li>客户端和服务器端进行一个数据交互，需要4个IO流对象</li><li>服务器端必须明确；<ol><li>多个客户端同时和服务器进行交互，服务器必须明确和哪个客户端进行的交互。在服务器端有个方法叫accept客户端获取到请求的客户端对象</li><li>多个客户端同时和服务器端进行交互，就需要使用多个IO流对象<ul><li>服务器是没有IO流的，服务器可以获取到请求的客户端对象Socket。使用每个客户端Socket中提供的IO流和客户端进行交互（服务器使用客户端的流和客户端交互）</li></ul></li></ol></li><li>TCP通信的客户端；向服务器发送连接请求，给服务i去发送数据，读取服务器回写的数据<h3 id="Socket类"><a href="#Socket类" class="headerlink" title="Socket类"></a>Socket类</h3></li><li>表示客户端的类；<code>java.net.Socket</code>；此类实现客户端套接字，套接字是两台机器之间通信的端点。套接字包含了IP地址和端口号的网络单位</li><li>构造方法：<ul><li><code>Socket(String host,int port)</code>；创建一个流套接字并将其连接到指定主机上的指定端口号。<ul><li>String host；服务器主机的名称/服务器的IP地址</li><li>int port；服务器的端口号</li></ul></li></ul></li><li>成员方法；<ul><li><code>OutputStream getOutputStream()</code>；返回此套接字的输出流</li><li><code>InputStream getInputStream()</code>；返回此套接字的输入流</li><li><code>void close()</code>；关闭此套接字</li></ul></li><li>实现步骤；<ol><li>创建一个客户端对象Socket,构造方法绑定服务器的IP地址和端口号</li><li>使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象</li><li>使用网络字节输出流OutputStream对象中的方法write，给服务器发送数据</li><li>使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象</li><li>使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据</li><li>释放资源（Socket）</li></ol></li><li>注意；<ol><li>客户端和服务器端进行交互，必须使用Socket中提供网络流，不能使用自己创建的流对象</li><li>当我们创建客户端对象Socket时，就会去请求服务器和服务器经过3次握手建立连接通路。如果服务器没有启动，则抛出异常，如果服务器启动，则进行交互</li></ol></li></ul><h3 id="ServerSocket类"><a href="#ServerSocket类" class="headerlink" title="ServerSocket类"></a>ServerSocket类</h3><ul><li>表示服务器的类；<code>java.net.ServerSocket</code>；此类实现服务器套接字</li><li>构造方法；<ul><li><code>ServerSocket(int port)</code>；创建绑定到特定端口的服务器套接字</li></ul></li><li>服务器端必须明确是哪个客户端请求的服务器，所以可以使用accpet方法获取到请求的客户端对象Socket</li><li>成员方法；<ul><li><code>Socket accept()</code>；侦听并接收到此套接字的连接</li></ul></li><li>实现步骤；<ol><li>创建服务器ServerSocket对象和系统要指定的端口号</li><li>使用ServerSocket对象中的方法accpept获取到请求的客户端对象Socket</li><li>使用Socket对象中的方法getInputStream()获取网络字节输入流InputStream对象</li><li>使用网络字节输入流InputStream对象中的方法read，读取服务器回写的数据</li><li>使用Socket对象中的方法getOutputStream()获取网络字节输出流OutputStream对象</li><li>使用网络字节输出流OutputStream对象中的方法write，给客户端回写数据</li><li>释放资源(Socket、ServerSocket)</li></ol></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>上传完文件，给服务器写一个结束标记<ul><li><code>void shutdownOutput()</code>；禁用次套接字的输出流。对于TCP套接字，任何以前写入的数据都将发送，并且后跟TCP的正常连接终止序列</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java网络编程&quot;&gt;&lt;a href=&quot;#Java网络编程&quot; class=&quot;headerlink&quot; title=&quot;Java网络编程&quot;&gt;&lt;/a&gt;Java网络编程&lt;/h1&gt;&lt;h2 id=&quot;网络基础&quot;&gt;&lt;a href=&quot;#网络基础&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Java" scheme="https://coderjeremy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java语法</title>
    <link href="https://coderjeremy.github.io/2020/02/01/Java%E8%AF%AD%E6%B3%95/"/>
    <id>https://coderjeremy.github.io/2020/02/01/Java语法/</id>
    <published>2020-02-01T08:36:46.000Z</published>
    <updated>2020-02-03T06:41:40.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java初步"><a href="#Java初步" class="headerlink" title="Java初步"></a>Java初步</h2><h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><ul><li>位（bit): 一个数字0或1</li><li>字节（Byte）: 8位=1字节，这是数据存储的最小单位</li><li>1KB = 1024 Byte,1MB = 1024 KB</li></ul><h3 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h3><ul><li>MS-DOS(Microsoft Disk Operating System)</li><li>启动 ：win + R</li><li>切换盘符 ： [盘符]:</li><li>进入文件： cd [文件名]</li><li>退回上一层：cd ..</li><li>退回根目录：cd \</li><li>显示文件列表: dir</li><li>清空屏幕：cls</li><li>推出cmd : exit</li></ul><h3 id="JVM、JRE、JDK"><a href="#JVM、JRE、JDK" class="headerlink" title="JVM、JRE、JDK"></a>JVM、JRE、JDK</h3><ul><li>JVM : Java Virtual Machine,Java虚拟机，是Java程序的运行环境,系统不同，虚拟机版本不同</li><li>JRE : Java Runtime Environment, Java运行时环境，包含<code>JVM</code> 和 <code>核心类库</code> </li><li>JDK : Java Development Kit, Java开发工具包，包含<code>JRE</code> 和 <code>开发者工具</code></li><li>JDK &gt;&gt; JRE &gt;&gt; JVM</li></ul><h3 id="Java环境配置"><a href="#Java环境配置" class="headerlink" title="Java环境配置"></a>Java环境配置</h3><ul><li>新建变量：JAVA_HOME，值：jdk安装路径，直到bin的上一级</li><li>添加Path：%JAVA_HOME%\bin ,%自动匹配%</li></ul><hr><h2 id="Java入门"><a href="#Java入门" class="headerlink" title="Java入门"></a>Java入门</h2><h3 id="Jaava程序运行步骤"><a href="#Jaava程序运行步骤" class="headerlink" title="Jaava程序运行步骤"></a>Jaava程序运行步骤</h3><ul><li>java源程序–&gt;编译器–&gt;java字节码文件–&gt;JVM运行</li><li>javac.exe : 编译器</li><li>java.exe : 解释器 </li></ul><h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><ol><li>编写：编写HelloWorld.java</li><li>编译：打开CMD，找到程序所在目录，输入<code>javac HelloWorld.java</code>，生成：HelloWorld.class 文件</li><li>运行：输入 <code>java HelloWorld</code> ,无需后缀，指定类名</li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释 ： //</li><li>多行注释 ： /<em> </em>/</li></ul><h3 id="关键字、标识符"><a href="#关键字、标识符" class="headerlink" title="关键字、标识符"></a>关键字、标识符</h3><ul><li>关键字 : 完全小写的字母（public）</li><li>标识符 : ·在程序中，自己定义的内容，比如类的名字和变量的名<ul><li>命名规则: <ol><li>由 英文字母、0-9、$(美元符)、_（下划线）组成</li><li>不能以数字开头</li><li>不能是关键字</li></ol></li><li>命名规范:<ol><li>类名规范：首字母大写，后面每个单词首字母大写（大驼峰）</li><li>变量名规范：首字母小写，后面每个单词首字母大写（小驼峰）</li><li>方法名规范：同变量名</li></ol></li></ul></li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>在程序运行期间，固定不变的量</li><li>分类：<ol><li>字符串常量：双引号引用的部分,例如：”abc”,”123”</li><li>整数常量：直接写上数字，没有小数点,例如：100,200</li><li>浮点数常量：直接写上数字，有小数点，例如：2.5,-3.14</li><li>字符常量：单引号引起来的单个字符，例如：’A’,’中’（没有’’,’AB’，有’ ‘）</li><li>布尔常量：只有两种取值，true、false</li><li>空常量：null,代表没有任何数据</li></ol></li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>程序运行期间，内容可以发生改变的量</li><li>创建一个变量并且使用的格式：<ul><li>数据类型 变量名称 //创建了一个变量</li><li>变量名称 = 数据值 //赋值交给左边的变量</li></ul></li><li>一步到位<ul><li>数据类型 变量名称 = 数据值；//创建一个变量的同时，立刻放入指定的数据值</li></ul></li><li>注意事项 ：<ul><li>如果创建多个变量，变量之间的名称不可以重复</li><li>对于float和long类型来说，字母f和L不要漏掉</li><li>如果使用byte或者short类型的变量，那么右侧的数据值不能超过左侧类型的范围</li><li>没有进行赋值的变量，不能直接使用</li><li>变量使用不能超过作用域的范围<br>【作用域：从定义变量的一行开始，一直到直接所属的大括号结束为止】</li></ul></li></ul><h3 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>整数型 byte short int long</li><li>浮点型 float double</li><li>字符型 char</li><li>布尔型 boolean<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4></li><li>字符串</li><li>数组</li><li>类</li><li>接口</li><li>Lambda<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4></li><li>字符串不是基本类型，而是引用类型</li><li>浮点型可能只是一个近似值，并非精确的值</li><li>数据范围与字节数不一定相关，例如float数据范围比long更加广泛，但是float是4字节，long是8字节</li><li>浮点数当中默认类型是double,如果要用float，需要加上一个后缀F</li><li>整数 当中默认类型是int,如果要使用long，需要加上一个后缀L，推荐使用大写字母后缀</li></ul><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li><p>自动类型转换（隐式）</p><ol><li>特点：代码不需要进行特殊处理，自动完成。  </li><li>规则：数据范围从小到大，向上兼容</li></ol></li><li><p>强制类型转换（显式）</p><ol><li>特点: 代码需要进行特殊格式处理，不能自动完成</li><li>格式：范围小的类型 范围小的变量名 = （范围小的类型） 原本范围大的数据</li></ol></li><li><p>注意事项：</p><ol><li>强制类型转换一般不推荐使用，因为有可能发生精度损失(小数)、数据溢出(大数)</li><li>byte/short/char 这三种类型都可以发生数学运算，例如加法”+”。</li><li>byte/short/char 这三种类型在运算时，都会被首先提升为int类型，然后再计算。</li><li>boolean类型不能发生数据类型转换</li><li>对于byte/short/char 三种类型来说，如果右侧赋值的数值没有超过范围，那么javac编译器会自动隐含地为我们补上一个(byte)(short)(char)。<ul><li>如果没有超过左侧范围，编译器自动补上强转。</li><li>如果超过左侧范围，编译器会直接报错。</li></ul></li><li>在给变量进行赋值时候，如果右侧地表达式当中全部都是常量，没有任何变量，那么编译器javac将会直接将若干个常量表达式计算得到结果。</li></ol></li><li>编译器的常量优化 ： <code>short result = 5 + 8;</code>  等号右边全是常量，没有任何变量参与运算，编译之后，得到的.class字节码文件当中相当于直接就是 <code>short result = 13;</code>右侧的常量结果数值，没有超过左侧范围，所以正确。这种成为<strong>“编译器的常量优化”</strong>。常量计算在编译时已经计算并赋值。一旦表达式右侧有变量参与，则无法进行这种优化。</li></ul><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><ul><li>ASCII : American Standard Code for Information Interchange 美国信息交换标准代码</li><li>Unicode : 万国码，也是数字和符号的对照关系，开头0-127部分和ASCII完全一样，但是128开始包含有更多字符</li><li>‘0’ - ‘48’ , ‘A’ - 65 , ‘a’ - 97</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>进行特定操作的符号，例如：+</li><li>表达式：用运算符连起来的式子，例如：a + b</li><li>分类：<ul><li>算数运算符：+ 、 - 、  * 、 /  、 % 、 ++ 、 –</li><li>赋值运算符：= 、 += 、-= 、*= 、/= 、%=</li><li>比较运算符：== 、&lt; 、 &gt; 、 &lt;= 、 &gt;= 、 != </li><li>逻辑运算符：&amp;&amp; 、 || 、 !(取反)</li><li>三目运算符：数据类型 变量名称 = 布尔类型表达式 ? 结果1 : 结果2  （true为结果1，false为结果2）</li></ul></li></ul><h3 id="方法入门"><a href="#方法入门" class="headerlink" title="方法入门"></a>方法入门</h3><ul><li>定义：若干语句功能的集合，将一个功能抽取出来，形成一个单独的功能，提高代码复用，减少冗余</li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名(参数列表)&#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">    return ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"这是一个方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用: 方法不会自动运行，必须被调用</p></li><li>注意:<ul><li>方法定义的先后顺序无所谓</li><li>方法定义必须是挨着的，不能再一个方法的内部定义另外一个方法</li><li>方法必须被调用才会执行</li></ul></li></ul><h3 id="Java9-新特性"><a href="#Java9-新特性" class="headerlink" title="Java9 新特性"></a>Java9 新特性</h3><ul><li>JShell : 适合片段代码的测试</li><li>启动 ： cmd + JShell</li><li>退出 : /exit</li></ul><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h4><ul><li>顺序结构：根据编写顺序，从上到下执行。</li></ul><h4 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h4><ul><li>if</li><li>if…else</li><li>if…else if…else</li></ul><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><ul><li>switch<ul><li>注意：多个case后面的数值不可以重复</li><li>switch小括号当中只能是下列数据类型<ul><li>基本数据类型 ： byte/short/char/int</li><li>引用数据类型 : String字符串、enum枚举</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>()&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句体:n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>case的穿透性：如果case的后面不写break,将出现穿透现象，直接向后运行，直到遇到break;</li></ul><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ul><li>for</li><li>while</li><li><p>do-while：无条件执行一次循环体，具有一定风险性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        循环体</span><br><span class="line">        步进表达式</span><br><span class="line">    &#125;<span class="keyword">while</span>(布尔表达式)</span><br></pre></td></tr></table></figure></li><li><p>区别：</p><ol><li>如果条件判断从来没有满足过，for和while将执行0次，do-while至少循环一次</li><li>for循环的变量在小括号当中定义，只有循环内可以使用</li></ol></li></ul><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><ul><li>(自定义)自动补全快捷键:file-settings-keymap-dupulicate(创建副本)-main menu-code-completion-basic(ctrl+alt+?)</li><li>Alt+Enter : 导入包，自动修正代码</li><li>Ctrl+Y : 删除光标所在行</li><li>Ctrl+D : 复制光标所在行，插入光标位置下面</li><li>Ctrl+ALt+L : 格式化代码</li><li>Ctrl+/ : 单行注释</li><li>Ctrl+Shift+/ : 多行注释</li><li>Alt+Ins : 自动生成代码，toString,get,set方法</li><li>Alt+Shift+上下箭头 : 移动当前代码行<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4></li><li>Project</li><li>Module</li><li>Package</li><li>Class</li></ul><hr><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>若干语句功能的集合</li><li>参数:进入方法的数据</li><li><p>返回值: 从方法中出来的数据</p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名称(参数类型 参数名称,...)&#123;</span><br><span class="line">    方法体</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修饰符: public static…</p></li><li>返回值类型: void int </li><li>方法名称 : 方法名字，小驼峰</li><li>参数名称 : 进入方法的数据对应的变量名称</li><li>方法体 : 方法需要做的事</li><li>return : 停止当前方法，将返回值还给调用处</li><li>返回值 : 执行方法后得到的数据结果</li><li>注意 :<ul><li>return后面的”返回值“，必须和方法名称前面的返回值类型，保持对应</li></ul></li></ul><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><ol><li>单独调用: 方法名称(参数),返回值为void,只能单独调用</li><li>打印调用: System.out.println(方法名称(参数));</li><li>赋值调用: 数据类型 变量名称 = 方法名称(参数);</li></ol><h4 id="方法的重载（Overload）"><a href="#方法的重载（Overload）" class="headerlink" title="方法的重载（Overload）"></a>方法的重载（Overload）</h4><ul><li>在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返回值类型无关。</li><li>参数列表: 个数不同，数据类型不同，顺序不同</li><li>重载方法调用 : JVM通过方法的参数列表，调用不同的方法。</li><li>注意 : <ul><li>与参数的名称无关 </li><li>与方法的返回值类型无关</li></ul></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul><li>方法应该定义在类中，但是不能在方法中再定义方法，不能嵌套</li><li>方法定义的先后顺序无所谓</li><li>方法必须被调用才能执行</li><li>返回值类型必须和方法的返回值类型对应</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>存储数据长度固定的容器，保证多个数据的数据类型要一致</li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>数组是一种引用数据类型</li><li>数组当中的多个数据类型一致</li><li>数组的长度在程序运行期间不可改变 </li></ul><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ul><li>在内存中创建一个数组，并且向其中赋予一些默认值<ul><li>动态初始化:指定长度</li><li>静态初始化:指定内容</li></ul></li></ul><h5 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h5><ul><li><p><code>数据类型[] 数组名称 = new 数据类型[数组长度]</code></p></li><li><p>左侧数据类型:数组中保存的数据类型</p></li><li>左侧的中括号:表示这是一个数组</li><li>左侧数组名称:数组的名字</li><li>右侧的new : 代表创建数组的动作</li><li>右侧数据类型:必须和左边的数据类型保持一致</li><li><p>右侧中括号的长度:数组当中，到底可以保存多少个数据,是一个int数字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrayA = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">200</span>];</span><br></pre></td></tr></table></figure></li><li><p>注意: 使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值</p><ul><li>整数型:默认值0;</li><li>浮点型:默认值0.0;</li><li>字符型:’\u0000’;</li><li>布尔型:false;</li><li>引用型:null.</li></ul></li></ul><h5 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h5><ul><li><code>数据类型[] 数组名称 = new 数据类型[]{元素1, 元素2, 元素3...}</code></li><li><p>自动分配空间和容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arrayB = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意: 静态初始化也有默认值，只不过系统自动马上将默认值替换成大括号中具体值</p></li></ul><h4 id="数组的访问"><a href="#数组的访问" class="headerlink" title="数组的访问"></a>数组的访问</h4><ul><li>直接打印数组名称，得到的是数组对应的,内存地址哈希值</li><li>访问数组元素的格式: <code>数组名称 [索引值]</code></li></ul><h4 id="数组的内存"><a href="#数组的内存" class="headerlink" title="数组的内存"></a>数组的内存</h4><ul><li>栈(Stack):存放的都是方法中的局部变量。方法的运行一定要在栈中运行。<ul><li>局部变量:方法的参数，或者是方法{}内部的变量</li><li>作用域:一旦超出作用域，立刻从栈内存当中消失</li></ul></li><li>堆(Heap): new出来的东西，都在堆中。<ul><li>堆内存里面的东西都有一个地址值:16进制</li><li>堆内存里面的数据，都有默认值</li></ul></li><li>方法区(Method Area):存储.class相关信息，包含方法的信息</li><li>本地方法栈(Native Method Stack):与操作系统相关</li><li>寄存器(pc Register): 与CPU相关</li></ul><h4 id="数组的常见问题"><a href="#数组的常见问题" class="headerlink" title="数组的常见问题"></a>数组的常见问题</h4><ul><li>索引越界异常:如果访问数组元素的时候，索引编号不存在，将会发生数组索引越界异常:<code>ArrayIndexOutOfBoundsException</code></li><li>空指针:数组必须进行new初始化才能使用其中的元素。如果只是赋值了一个null,没有进行new创建，那么将会发生空指针异常:<code>NullPointerException</code></li></ul><h4 id="数组的常用操作"><a href="#数组的常用操作" class="headerlink" title="数组的常用操作"></a>数组的常用操作</h4><ul><li>获取数组长度: <code>数组名称.length</code>，数组一旦创建，程序运行期间，长度不可改变</li><li>数组的遍历: 数组名称.fori–&gt;自动补全遍历代码</li><li>数组作为方法参数: 传递地址值</li><li>数组作为方法返回值: 返回地址值，<code>public static int[] 方法名</code>，<code>return 数组名</code></li></ul><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ul><li>方法的参数为基本类型时，传递的是数据值</li><li>方法的参数为引用类型时，传递的时地址值</li></ul><hr><h2 id="Java中级"><a href="#Java中级" class="headerlink" title="Java中级"></a>Java中级</h2><h3 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h3><ul><li>面向过程: 当需要实现一个功能时，每一个步骤都需要具体描述出来，强调步骤</li><li>面向对象:当需要实现一个功能时，不关心具体步骤，强调过程<ul><li>封装</li><li>继承</li><li>多态<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h4></li></ul></li><li>类:一组相关<strong>属性</strong>和<strong>行为</strong>的集合，可以看作是一类事物的模板，使用事物的属性特性和行为特征来描述该类事物。<ul><li>属性:该事物的状态信息</li><li>行为:该事物能够做什么</li></ul></li><li>对象:一类事物的具体体现。对象是类的一个<strong>实例</strong>,必然具备该类事物的属性和行为。</li><li>类与对象的关系:<ul><li>类是对象的模板，对象是类的实例</li><li>类是一类事物的描述，抽象</li><li>对象是一类事物的实例，具体</li></ul></li></ul><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><ul><li><p>格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>成员变量(属性):对应事物的属性(事物的状态信息)</li><li>成员方法(行为):对应事物的行为(事物能够做什么)<h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h4></li></ul></li><li>通常情况下，一个类不能直接使用，需要根据类创建一个对象，才能使用<ol><li>导包：指出所需要使用的类，在什么位置：<code>import 包名称.类名称</code></li><li>创建：<code>类名称 对象名 = new 类名称();</code></li><li>使用：<ul><li>使用成员变量：<code>对象名.成员变量名</code></li><li>使用成员方法：<code>对象名.成员方法名(参数)</code></li></ul></li></ol><ul><li>注意：<ul><li>当使用一个对象类型作为方法的<em>参数</em>时，传递的就是对象的地址值。</li><li>当使用一个对象类型作为方法的<em>返回值</em>时，返回值其实就是对象的地址值。</li></ul></li></ul></li></ul><h4 id="成员变量与局部变量的区别"><a href="#成员变量与局部变量的区别" class="headerlink" title="成员变量与局部变量的区别"></a>成员变量与局部变量的区别</h4><ul><li>定义的位置不一样<ul><li>局部变量：方法内部</li><li>成员变量：方法外部，直接写在类当中</li></ul></li><li>作用的范围不一样<ul><li>局部变量：只有方法当中才可以使用</li><li>成员变量：整个类可以使用</li></ul></li><li>默认值不一样<ul><li>局部变量：没有默认值，必须手动赋值</li><li>成员变量：如果没有进行赋值，会有默认值，规则和数组一样</li></ul></li><li>内存位置不一样<ul><li>局部变量；位于栈内存中</li><li>成员变量：位于堆内存中</li></ul></li><li>生存周期不一样<ul><li>局部变量：随着方法进栈儿诞生，随着方法出栈而消失</li><li>成员变量：随着对象创建而诞生，随着对象被垃圾回收而消失<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3></li></ul></li><li>封装性在Java当中的体现<ol><li>方法就是一种封装</li><li>关键字private也是一种封装</li></ol></li><li>封装就是将一些细节信息隐藏起来，对于外界不可见</li></ul><h4 id="Private"><a href="#Private" class="headerlink" title="Private"></a>Private</h4><ul><li><code>private</code>是一个权限修饰符，代表最小权限</li><li>可以修饰成员变量和成员方法</li><li>被<code>private</code>修饰后的成员变量和成员方法，只有在本类中访问，超过本类范围就不能被访问</li><li>通过设置<code>setXXX()</code>,<code>getXXX()</code>方法来实现外部访问</li></ul><h4 id="This"><a href="#This" class="headerlink" title="This"></a>This</h4><ul><li><code>this</code>代表所在类的当前对象的引用(地址值),即对象自己的引用</li><li>当方法的局部变量和类的成员变量重名的时候，根据就近原则，优先使用局部变量</li><li>如果需要访问本类当中的成员变量，需要使用格式:<code>this.成员变量名</code></li><li>通过谁调用的方法，谁就是<code>this</code></li></ul><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li>构造方法是专门用来创建对象的方法，当我们通过关键字new来创建对象时，其实就是在调用构造方法。</li><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> 类名称(参数类型 参数名称)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项：</p><ol><li>构造方法的名称必须和所在类名称完全一致 </li><li>构造方法不要写返回值类型，连void也不用写</li><li>构造方法不能return一个具体的返回值</li><li>如果没有编写任何构造方法，编译器会默认添加一个无参，无方法体的构造方法</li><li>一旦编写了至少一个构造方法，那么编译器将不再默认添加</li><li>构造方法也可以进行重载（方法名相同，参数列表不同）</li></ol></li></ul><h3 id="标准类-JavaBean"><a href="#标准类-JavaBean" class="headerlink" title="标准类(JavaBean)"></a>标准类(JavaBean)</h3><ul><li>格式<ul><li>所有成员变量都要使用<code>private</code>关键字修饰</li><li>为每一个成员变量编写一对<code>Getter/Setter</code>方法(快捷键:Alt+insert/CODE-&gt;Generate生成器)</li><li>编写一个无参数的构造方法(快捷键：Alt+insert-&gt;Constuctor构造器)</li><li>编写一个全参数的构造方法</li></ul></li><li>这样的标准类也叫JavaBean</li><li>JavaBean：Java语言编写类的一种标准规范。</li></ul><hr><h2 id="Java高级"><a href="#Java高级" class="headerlink" title="Java高级"></a>Java高级</h2><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><ul><li>API: Application Programming Interface.应用程序编程接口。Java API时一本程序员的字典，是JDK中提供给我们使用的类的说明文档。这些类将底层的代码实现封装起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们通过查询API的方式，来学习Java提供的类</li><li>API使用步骤：<ol><li>打开帮助文档</li><li>点击显示，找到快速索引，看到输入框</li><li>输入需要查找的内容</li><li>看包，java.lang下的类不需要导包，其他需要</li><li>看类的解释和说明</li><li>学习构造方法</li><li>使用成员方法</li></ol></li></ul><h4 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h4><ul><li>功能：可以实现键盘输入数据，到程序中</li><li>引用类型一般使用步骤：<ol><li>导包: <code>import 包路径.类名称</code>，如果需要使用的目标类和当前类位于同一个包下，则可以省略导包语句不写，只有java.lang包下的内容不需要导包，其他包都需要import语句</li><li>创建: <code>类名称 对象名 = new 类名称()</code></li><li>使用: <code>对象名·成员方法名()</code></li></ol></li><li>导包：<code>import java.util.Scanner</code></li><li>创建：<code>Scanner sc = new Scanner(System.in)</code>，System.in表示从键盘进行输入</li><li>使用：<ul><li>获取键盘输入的一个int数字：<code>int num = sc.nextInt();</code> </li><li>获取键盘输入的一个字符串：<code>String str = sc.next();</code></li></ul></li></ul><h4 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h4><ul><li>创建对象时，只有创建对象的语句，却没有把对象地址赋值给某个变量</li><li>格式：<code>new 类名称(参数列表);</code>，左边没有变量值和赋值号。</li><li>应用场景：<ul><li>创建匿名对象直接调用方法，没有变量名</li><li>匿名对象只能使用唯一的一次，下次再用不得不创建一个新对象，造成浪费</li><li>匿名对象可以作为方法的参数和返回值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 匿名对象 Anonymous</span></span><br><span class="line"><span class="comment"> * 做参数</span></span><br><span class="line"><span class="comment"> * 做返回值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anonymous</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        做参数</span></span><br><span class="line">        System.out.println(<span class="string">"输入的数字是："</span> + <span class="keyword">new</span> Scanner(System.in).nextInt());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用匿名对象作为参数</span></span><br><span class="line">        methodParam(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line"></span><br><span class="line"><span class="comment">//         匿名对象作为返回值</span></span><br><span class="line">        Scanner sc = methodReturn();</span><br><span class="line">        System.out.println(<span class="string">"第三次输入的是："</span>+sc.nextInt());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名对象做参数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodParam</span><span class="params">(Scanner sc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> anInt = sc.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"输入的第二个数字是:"</span> + anInt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 匿名对象做返回值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">methodReturn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h4><ul><li>作用：产生随机数</li><li>使用步骤：<ul><li>查看类：导包，<code>import java.util.Random</code></li><li>查看构造方法：创建，<code>Random r = new Random()</code></li><li>查看成员方法：使用，<ul><li>获取一个随机的int数字：<code>int num = r.nextInt()</code></li><li>获取一个随机的int数字：(参数代表范围，左闭右开区间)，<code>int num = r.nextInt(3)</code>,实代表的范围是 [0,3)</li></ul></li></ul></li></ul><h4 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h4><ul><li>ArrayList集合的长度是可以随便变化的</li><li>导包：<code>import java.util.ArrayList</code></li><li>创建：<code>ArrayList&lt;E&gt; list = new ArrayList&lt;&gt;();</code></li><li><p>使用：成员方法</p><ul><li><code>public boolean add()</code>：向集合当中添加元素，参数的类型和泛型一致</li><li><code>public E get(int index)</code>；从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素</li><li><code>public E remove(int index)</code>：从集合中删除元素，参数是索引编号，返回值就是被删除掉的元素</li><li><code>public int size()</code>：获取集合的长度，返回值是集合中元素的个数</li></ul></li><li><p>注意：</p><ul><li>尖括号内的泛型只能是引用类型，不能是基本类型</li><li><p>如果向集合ArrayList当中存储基本类型数据，必须使用<em>基本类型</em>对应的<em>包装类</em></p><ul><li>基本类型 -&gt; 包装类</li><li>int -&gt; Integer</li><li>byte -&gt; Byte</li><li>short -&gt; Short</li><li>long -&gt; Long</li><li>float -&gt; Float</li><li>double -&gt; Double</li><li>char -&gt; Character</li><li>boolean -&gt; Boolean  </li></ul></li><li><p>从JDK1.5开始，支持自动装箱（基本类型-&gt;包装类型），自动拆箱（包装类型-&gt;基本类型）</p></li></ul></li></ul><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><ul><li><p>特点：</p><ul><li>字符串的内容永不可变</li><li>字符串可以共享使用</li><li>字符串效果上相当于是char[ ]字符数组，但其底层原理是byte[ ]字节数组。</li></ul></li><li><p>创建字符串：</p><ul><li>三种构造方法<ol><li>public String()：创建一个空白字符串，不含任何内容</li><li>public String(char[] array)：根据字符数组的内容，来创建对应的字符串</li><li>public String(byte[] array)：根据字节数组的内容，来创建对应的字符串</li></ol></li><li>一种直接创建<ul><li><code>String str = &quot;Hello&quot;;</code> //右边直接用双引号</li><li>直接写上双引号，就是字符串对象</li></ul></li></ul></li></ul><h5 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h5><ul><li>对于常量类型来说，==判断的是值</li><li>对于引用类型来说，==判断的是地址值</li><li>双引号直接写的字符串在常量池当中，new的不在池当中</li></ul><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><h6 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h6><ul><li><code>public boolean equals(Object obj);//参数可以是任何对象</code>，任何对象都能用object进行接受<ul><li>注意：<ul><li>任何对象都能用object进行接收</li><li>equals方法具有对称性，也就是<code>a.equals(b)</code>和<code>b.equals(a)</code>;</li><li>如果比较双方一个常量一个变量，推荐常量写在前面，推荐：<code>&quot;abc&quot;.equals(str)</code>,不推荐<code>str.equals(&quot;abc&quot;)</code>；防止str为null，产生空指针异常</li></ul></li></ul></li><li><code>public boolean equalsIgnoreCase(String str)</code>：忽略大小写进行内容比较</li></ul><h6 id="字符串获取"><a href="#字符串获取" class="headerlink" title="字符串获取"></a>字符串获取</h6><ul><li><code>public int length()</code>：获取字符串当中含有的字符个数，拿到字符串的长度</li><li><code>public String concat(String str)</code>：将当前字符串和参数字符串拼接成为返回值新的字符串（concatenate级联）</li><li><code>public char charAt(int index)</code>：获取指定索引位置的单个字符（索引从0开始）</li><li><code>public int indexOf(String str)</code>：查找<em>参数字符串</em>在原本字符串当中首次出现的索引位置，如果不存在，返回-1</li></ul><h6 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h6><ul><li><code>public String substring(int index)</code>：截取从参数位置一直到字符串末尾，返回新字符串</li><li><code>public String substring(int begin, int end)</code>：截取从begin开始，一直到end结束，中间的字符串，[begin, end)，包含左边，不含右边</li></ul><h6 id="字符串转换、替换"><a href="#字符串转换、替换" class="headerlink" title="字符串转换、替换"></a>字符串转换、替换</h6><ul><li><code>public char[] toCharArray()</code>：将当前字符串拆分成为字符数组作为返回值</li><li><code>public byte[] getBytes()</code>：获取当前字符串底层的字节数组</li><li><code>public String replace(CharSequence oldString, CharSequence newString)</code>：将所有出现的老字符串替换成为新的字符串,CharSequence意思就是说可以接受字符串类型。</li></ul><h6 id="字符串分割方法"><a href="#字符串分割方法" class="headerlink" title="字符串分割方法"></a>字符串分割方法</h6><ul><li><code>public String[] split(String regex)</code>：按照参数规则，将字符串切分为若干部分</li><li>注意：split方法的参数其实是一个正则表达式如果要切分<code>&quot;.&quot;</code>，必须写成<code>&quot;\\.&quot;</code></li></ul><h4 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h4><ul><li><code>static</code>用来修饰成员变量和成员方法，被修饰的成员是<code>属于类</code>，而不是仅仅属于某个对象自己，凡是本类的对象，都共享同一内容。</li><li>一旦使用<code>static</code>修饰静态成员方法，那么这种方法就成为了静态方法，静态方法可以直接通过对象名进行调用，也可以直接通过类名称来调用；非静态方法必须通过创建类才能使用</li><li>有<code>static</code>，推荐使用类名称进行调用<ul><li>静态变量：类名称.静态变量</li><li>静态方法：类名称.静态方法()</li></ul></li><li>对于本类当中的静态方法，可以省略类名称，编译器会自动补全</li><li>注意：<ol><li>静态不能直接访问非静态，因为在内存当中先有静态内容，后有非静态内容</li><li>静态方法不能用<code>this</code>，因为this代表当前对象，通过谁调用方法，谁就是当前对象</li></ol></li></ul><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名称</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//静态代码块内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当第一次用到本类时，静态代码块执行唯一的一次</p></li><li>静态内容总是优先于非静态，所以静态代码块构造方法先执行</li><li>用途：用来一次性地对静态成员变量进行赋值</li></ul><h4 id="数组根据类：Arrays"><a href="#数组根据类：Arrays" class="headerlink" title="数组根据类：Arrays"></a>数组根据类：Arrays</h4><ul><li>作用：与数组相关的工具类，实现数组的常见操作，所有方法都是静态方法，使用非常方便</li><li>导包：<code>java.util.Arrays</code></li><li>使用：<ul><li><code>public static String toString()</code>；将参数数组变成字符串(按照默认格式；[元素1，元素2，元素3…])</li><li><code>public static void sort(数组)</code>：按照默认升序对数组的元素进行排序。<ul><li>如果是数值，sort默认升序</li><li>如果是字符串，sort默认按字母升序</li><li>如果是自定义类，那么这个自定义的类需要有Comparable或者Comparator接口的支持。</li></ul></li></ul></li></ul><h4 id="数学工具类：Math"><a href="#数学工具类：Math" class="headerlink" title="数学工具类：Math"></a>数学工具类：Math</h4><ul><li>与数学相关的工具类，里面提供了大量的静态方法，完成于数学运算相关的操作</li><li>导包；<code>java.util.Math</code></li><li>使用：<ul><li><code>public static double abs(double num)</code>：获取绝对值</li><li><code>public static double ceil(double num)</code>：向上取整</li><li><code>public static double floor(double num)</code>：向下取整</li><li><code>public static long round(double num)</code>：四舍五入</li><li><code>Math.PI</code>：圆周率常量</li></ul></li></ul><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>继承是多态的前提，如果没有继承，就没有多态</li><li>主要解决的问题：共性抽取</li><li>子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接访问父类的非私有的属性和行为</li><li>父类：基类、超类</li><li>子类；派生类<h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4></li><li>子类与父类的关系：<code>is-a</code></li><li><p>父类：(一个普通的类定义)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 父类名称</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名称 <span class="keyword">extends</span> 父类名称</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><h5 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h5><ul><li>父类无法使用子类成员变量</li><li>子类仅可以直接访问父类的非私有成员变量</li><li>成员变成重名：<ul><li>直接通过子类对象访问成员变量：等号左边是谁，就优先用谁，没有则向上找</li><li>间接通过成员方法访问成员变量：方法属于谁就优先用谁，没有则向上找</li></ul></li><li>三种变量重名：<ul><li>局部变量：直接写成员变量名</li><li>本类的成员变量：this.成员变量名</li><li>父类的成员变量：super.成员变量名</li></ul></li></ul><h5 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h5><ul><li>成员方法不重名：正常使用</li><li>成员方法重名：创建的对象是谁，优先用谁的方法</li><li>注意：无论是成员方法还是成员变量，如果没有都是向上找父类，绝不会向下找子类</li></ul><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><ul><li>重写(Override)【覆盖】：在继承关系当中，方法的名称一样，参数列表也一样</li><li>对比：<ul><li>重载：Overload：方法名称相同，参数列表不同</li><li>重写：Override：方法名称相同，参数列表也相同–覆盖</li></ul></li><li>特点：创建的是子类对象，则优先使用子类方法</li><li>注意：<ol><li>必须保证父子类之间的<strong>方法名称</strong>相同，<strong>参数列表</strong>也相同<blockquote><p>@Override // 写在方法前面，用来检测是不是有效的正确的覆盖重写（注解）</p><pre><code>// 这个注解就算不写，只要满足要求，也是正确的方法覆盖重写   </code></pre></blockquote></li></ol></li></ul><pre><code>2. 子类方法的返回值必须**小于等于**父类方法的返回值范围    &gt; `java.lang.Object`类是所有类的公共最高父类，java.lang.String就是Object的子类3. 子类方法的权限必须**大于等于**父类方法的权限修饰符    &gt; public &gt; protected &gt; (default)(不写) &gt; private</code></pre><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><ul><li>继承关系中，父子类构造方法的访问特点；<ol><li>子类构造方法当中有一个默认隐含的<code>super()</code>调用，所以一定是先调用父类构造，后执行子类的构造</li><li>子类构造可以通过<code>super</code>关键字来调用父类重载构造</li><li><code>super</code>的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造</li></ol></li></ul><h4 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h4><ul><li>在子类的成员方法中，访问父类的成员变量：<code>super.变量名</code></li><li>在子类的成员方法中，访问父类的成员方法：<code>super.方法名</code></li><li>在子类的构造方法中，访问父类的构造方法：<code>super();</code></li></ul><h4 id="继承的特征"><a href="#继承的特征" class="headerlink" title="继承的特征"></a>继承的特征</h4><ul><li>Java语言是<code>单继承</code>的，一个类的直接父类只能有一个</li><li>Java语言可以<code>多级继承</code>（继承体系），顶层都是Object类</li><li>一个子类的直接父类是唯一的，但是一个父类可以拥有很多个子类 </li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><ul><li>没有方法主体的方法称为抽象方法，包含抽象方法的类，必须是抽象类<ul><li>抽象类：包含抽象方法的类</li><li>抽象方法：没有方法体的方法，加上abstract关键字，去掉方法体，分号结束</li></ul></li></ul><h4 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h4><ul><li>抽象方法：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修饰符 abstract 返回值类型 方法名(参数列表);</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul><li>不能直接创建new抽象类对象</li><li>必须用子类继承抽象父类</li><li>子类必须覆盖重写抽象父类所有的抽象方法</li><li>继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>，否则该子类也必须声明为抽象类，最终必须要有子类实现该父类的抽象方法，否则抽象父类到子类的创建全部失效，失去意义</li></ul><h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><ul><li>抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象</li><li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的</li><li>抽象类中，不一定包含抽象方法，但是有抽象方法的类一定是抽象类</li><li>抽象类的子类，必须重写抽象父类所有的抽象方法，否则，编译无法通过报错，除非该子类也是抽象类</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><ul><li>接口就是一种公共的规范标准</li><li>接口是一种引用数据类型（数组、类、接口）</li><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名称</span>&#123;</span><br><span class="line">    <span class="comment">// 接口内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>备注：换成关键字interface之后，编译生成的字节码文件仍然是：.java-&gt;.class</p></li></ul><h4 id="java版本"><a href="#java版本" class="headerlink" title="java版本"></a>java版本</h4><ul><li>java7：<ol><li>常量</li><li>抽象方法</li></ol></li><li>java8:<ol start="3"><li>默认方法</li><li>静态方法</li></ol></li><li>java9<ol start="5"><li>私有方法</li></ol></li></ul><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ul><li><p>接口不能直接使用，必须有一个“实现类”来“实现”接口</p><ul><li>格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类名称 <span class="keyword">implements</span> 接口名称</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>接口的实现类必须覆盖重写（实现）接口中<strong>所有</strong>的抽象方法（否则它必须是一个抽象类）</p><ul><li>实现：去掉abstract关键字，加上方法体和大括号</li></ul></li><li>创建实现类的对象，进行使用</li></ul><h4 id="接口的抽象方法"><a href="#接口的抽象方法" class="headerlink" title="接口的抽象方法"></a>接口的抽象方法</h4><ul><li>注意：<ol><li>接口当中的抽象方法，修饰符必须是两个固定关键字：<code>public abstract</code></li><li>这两个关键字修饰符，可以选择性省略</li><li>方法的三要素，可以随意定义</li></ol></li></ul><h4 id="接口的默认方法"><a href="#接口的默认方法" class="headerlink" title="接口的默认方法"></a>接口的默认方法</h4><ul><li>从Java8开始，可以使用默认方法，默认方法可以被实现类继承</li><li>作用：解决接口升级的问题（实现类可以重写默认方法）</li><li>格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">default</span> 返回值类型 方法名称(参数列表)&#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="接口的静态方法"><a href="#接口的静态方法" class="headerlink" title="接口的静态方法"></a>接口的静态方法</h4><ul><li>从Java8开始，接口当中允许定义静态方法</li><li>静态与.class文件相关，只能使用接口名调用，不可以通过实现类的类名或者实现类的对象调用</li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名称(参数列表)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意：不能通过接口实现类的对象来调用当中的静态方法</p></li><li>正确用法：通过接口名称，直接调用其中的静态方法。</li><li>格式：<code>接口名称.静态方法名称(参数)</code></li></ul><h4 id="接口的私有方法"><a href="#接口的私有方法" class="headerlink" title="接口的私有方法"></a>接口的私有方法</h4><ul><li>我们需要抽取一个共有方法，用来解决多个默认方法之间重复代码的问题。但是这个共有方法不应该让实现类使用，应该是私有化的。</li><li><p>从Java9开始，接口当中允许定义私有方法</p><ol><li><p>普通私有方法：解决多个默认方法之间重复代码问题<br> 格式：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> 返回值类型 方法名称(参数列表)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>静态私有方法：解决多个静态方法之间重复代码问题</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> 返回值类型 方法名称(参数列表)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="接口的成员变量（常量）"><a href="#接口的成员变量（常量）" class="headerlink" title="接口的成员变量（常量）"></a>接口的成员变量（常量）</h4><ul><li>接口中可以定义“成员变量”，但是必须使用<code>public static final</code>三个关键字进行修饰。从效果上看，这其实就是接口的【常量】</li><li>格式：<br>  <code>public static final 数据类型 常量名称 = 数据值;</code></li><li>一旦使用<code>final</code>关键字进行修饰，说明不可改变</li><li>注意：<ul><li>接口当中的常量，可以省略<code>public static final</code></li><li>接口当中的常量，必须进行赋值，不能不赋值</li><li>接口中，常量的名称，使用完全大写的字母，用下划线进行分隔(shift+F6)</li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><p>在java9+版本中，接口的内容可以有</p><ol><li><p>成员变量其实是常量，格式：<code>[public] [static] [final] 数据类型 常量名称 = 数据值;</code></p><ul><li>注意：<ul><li>常量必须进行赋值，而且一旦赋值不能改变</li><li>常量名称完全大写，用下划线进行分隔</li></ul></li></ul></li><li><p>接口中最重要的就是抽象方法，格式：<br> <code>[public] [abstract] 返回值类型 方法名称(参数列表)</code></p><ul><li>注意：实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类</li></ul></li><li><p>从Java8开始，接口里允许定义默认方法，格式：<code>[public] default 返回值类型 方法名称(参数列表){方法体}</code></p><ul><li>注意：默认方法也可以被覆盖重写</li></ul></li><li><p>从Java8开始，接口里允许定义静态方法，格式：<code>[public] static 返回值类型 方法名称(参数列表){方法体}</code></p><ul><li>注意：应该通过接口名称进行调用，不能通过实现类对象调用接口静态方法</li></ul></li><li><p>从Java9开始，接口里允许定义私有方法，格式：</p><ul><li><code>private 返回值类型 方法名称(参数列表){方法体}</code></li><li><code>private static 返回值类型 方法名称(参数列表){方法体}</code><ul><li>注意：private方法只有接口自己才能调用，不能被实现类或别人使用</li></ul></li></ul></li></ol></li></ul><h4 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h4><ul><li>接口不能有静态代码块</li><li>接口不能有构造方法</li><li><p>一个类的直接父类是唯一的，但是一个类可以同时实现多个接口</p><ul><li>格式：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口<span class="title">A</span>,接口<span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="comment">// 覆盖重写所有抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果实现类所实现的多个接口当中，存在重复的抽象方法，那么只需要覆盖重写一次即可</p></li><li>如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类就必须是一个抽象类</li><li>如果实现类所实现的多个接口，存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写</li><li>一个类如果直接父类当中的方法，和接口当中的默认方法产生了冲突，优先用父类当中的方法（父类&gt;&gt;接口）</li></ul><h4 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h4><ul><li>类与类之间是单继承的，直接父类只能有一个</li><li>类与接口之间是多实现的，一个类可以实现多个接口</li><li>接口与接口之间是多继承的</li><li>使用：关键字<code>extends</code></li><li>注意<ul><li>多个父接口当中的抽象方法如果有重复，没关系</li><li>多个父接口当中的默认方法如果有重复，那么子接口必须进行默认方法的覆盖重写，【而且要带着<code>default</code>关键字】</li><li>实现类重写接口默认方法，不需要保留<code>default</code>关键字</li></ul></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>多态性：一个对象拥有多种形态</li><li>代码当中体现多态性：<code>【父类引用指向子类对象】</code><blockquote><ul><li>格式：</li><li>父类名称 对象名 = new 子类名称();</li><li>或者</li><li>接口名称 对象名 = new 实现类名();</li></ul></blockquote></li><li>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误，如果有，执行的是子类重写后方法</li></ul><h4 id="多态中的成员变量"><a href="#多态中的成员变量" class="headerlink" title="多态中的成员变量"></a>多态中的成员变量</h4><ul><li>直接通过对象名访问成员变量：看等号左边是谁，优先用谁，没有则向上找。</li><li>间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，没有则向上找。</li></ul><h4 id="多态中的成员方法"><a href="#多态中的成员方法" class="headerlink" title="多态中的成员方法"></a>多态中的成员方法</h4><ul><li>new的是谁，就优先用谁，没有则向上找</li><li>注意：<ul><li>成员方法：编译看左，运行看右</li><li>成员变量：编译看左，运行看左</li></ul></li></ul><h4 id="多态的优点"><a href="#多态的优点" class="headerlink" title="多态的优点"></a>多态的优点</h4><ul><li>方法调用相同（编译时），用谁找谁（运行时），动态过程</li></ul><h4 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h4><h5 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h5><ul><li>向上转型：多态本身是子类类型向父类类型向上转型的过程，这个过程是默认的。当父类引用指向一个子类对象时，便是向上转型</li><li>格式：<code>父类名称 对象名 = new 子类名称();</code></li><li>注意：向上转型一定是安全的。从小范围–&gt;大范围</li><li>缺陷：无法调用子类特有的内容</li></ul><h5 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h5><ul><li>向下转型：父类类型向子类类型向下转型的过程(还原)，这个过程是强制的</li><li>格式：<code>子类名称 对象名 = (子类名称)父类对象;</code></li><li>含义：将父类对象，还原成原本的子类对象</li><li>注意：<ol><li>要还原的对象必须是原来创建的对象，才能向下转型</li><li>要还原的对象如果不是原来创建的对象，而是其他对象，就会报错（运行异常，ClassCastException）</li></ol></li></ul><h5 id="instance-of关键字"><a href="#instance-of关键字" class="headerlink" title="instance of关键字"></a>instance of关键字</h5><ul><li>作用：返回一个boolean值，判断前面的对象能不能当作后面类型的实例</li><li>格式：<code>变量名 instance of 数据类型</code></li></ul><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ul><li>含义：代表最终、不可改变的</li><li>使用：<ol><li>修饰一个类，不能被继承</li><li>修饰一个方法，不能被重写</li><li>修饰一个局部变量，不能被重新赋值</li><li>修饰一个成员变量，不能被重新赋值</li></ol></li></ul><h4 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h4><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名称()</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作用：当前这个类不能有任何的子类（final类不能作为父类）</p></li><li>注意：final类的所有成员方法都无法进行覆盖重写</li></ul><h4 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h4><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> 返回值 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作用：当前方法就是最终方法，不能再被覆盖重写</p></li><li>注意：对于类、方法来说，<code>abstract</code>关键字和<code>final</code>关键字不能同时使用，因为矛盾</li></ul><h4 id="修饰局部变量"><a href="#修饰局部变量" class="headerlink" title="修饰局部变量"></a>修饰局部变量</h4><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> 数据类型 数据名 = 数据值;</span><br></pre></td></tr></table></figure></li><li><p>作用：当前局部变量，不能进行更改，一次赋值，终生不变 </p></li><li>注意：对于基本类型，不可变说的是变量当中的数据不可变；对于引用类型来说，不可变说的是变量当中的地址值不可变</li></ul><h4 id="修饰成员变量"><a href="#修饰成员变量" class="headerlink" title="修饰成员变量"></a>修饰成员变量</h4><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> 数据类型 数据名 = 数据值;</span><br></pre></td></tr></table></figure></li><li><p>作用：当前成员变量，不能进行更改，但成员变量有默认值，用了final后必须进行手动赋值</p></li><li>注意：<ol><li>对于final的成员变量，要么使用直接赋值，要么使用构造方法赋值（二选一）</li><li>必须保证类当中所有重载构造方法，都最终会对final的成员变量进行赋值</li></ol></li></ul><h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><table><thead><tr><th></th><th>public</th><th>protected</th><th>(default)</th><th>private</th></tr></thead><tbody><tr><td>同一个类</td><td>YES</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>同一个包</td><td>YES</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>不同包子类</td><td>YES</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>不同包非子类</td><td>YES</td><td>NO</td><td>NO</td><td>NO</td></tr></tbody></table><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ul><li>定义：将一个类A定义在另一个类B里面，A被称为<code>内部类</code>，B被称为<code>外部类</code></li><li><p>成员内部类：定义在类中方法外的类</p></li><li><p>分类：</p><ol><li>成员内部类</li><li>局部内部类(包含匿名内部类)</li></ol></li><li>注意：内部类仍然是一个独立的类，在编译之后会内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和<code>$符号</code>。比如，Person$Heart.class</li></ul><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><ul><li>定义在一个类内成员方法外的类</li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 内部类名称</span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用：</p><ol><li>直接：<code>外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称()</code></li><li>间接：在外部类的方法中，使用内部类：然后main只是调用外部类的方法</li></ol></li><li><p>注意；</p><ul><li>内用外，随意访问，外用内，需要内部类对象</li><li>同名变量访问：（重名）<code>外部类名称.this.外部类成员变量名</code></li></ul></li></ul><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><ul><li>定义在一个方法内部的类，“局部”：只有当前所属方法才能使用，出了方法无法使用</li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称</span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称(参数列表)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> 局部内部类名称</span>&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用：方法内创建局部类对象，main直接调用外部类方法</p></li><li>注意：权限修饰符<ol><li>外部类：public/(default)</li><li>成员内部类：public / protected / (default) / private</li><li>局部内部类：无法使用修饰符</li></ol></li></ul><h5 id="局部内部类的final问题"><a href="#局部内部类的final问题" class="headerlink" title="局部内部类的final问题"></a>局部内部类的final问题</h5><ul><li>局部内部类，如果希望访问所在方法的局部变量，那么这份局部变量必须是<code>有效final的</code>(从Java8开始，只要局部变量事实不变，那么final关键字可以省略)</li><li>原因：<ol><li>new出来的对象在堆内存当中</li><li>局部变量是跟着方法走到，在栈内存中</li><li>方法运行结束之后，立刻出栈，局部变量就会立刻消失</li><li>new出来的对象会在堆中持续存在，直到垃圾回收消失</li></ol></li></ul><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><ul><li><p>如果接口的实现类(或者是父类的子类)，只需要使用唯一的一次，那么这种情况就可以省略掉该类的定义，改用<code>匿名内部类</code></p></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称()&#123;</span><br><span class="line">    <span class="comment">// 覆盖重写所有抽象方法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>对”new 接口名称(){…};”解析:</p><ol><li>new代表创建对象的动作</li><li>接口名称就是匿名内部类需要实现哪个接口</li><li>{…}这才是匿名内部类的内容</li></ol></li><li>注意：<ol><li>匿名内部类，在<strong>创建对象</strong>的时候，只能使用唯一一次，如果希望多次创建对象，而且内容一样，那么就必须使用单独的实现类</li><li>匿名对象，在<strong>调用方法</strong>的时候，只能调用一次，如果希望同一个对象，调用多次方法，必须要给对象取名</li><li>匿名内部类省略了<strong>实现类/子类</strong>，匿名对象省略了<strong>对象名称</strong></li><li>匿名内部类和匿名对象不是一回事</li></ol></li></ul><h3 id="常用API-2"><a href="#常用API-2" class="headerlink" title="常用API-2"></a>常用API-2</h3><h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><ul><li>类Object是类层次结构的根(父)类。每个类都使用Object作为超(父)类，所有对象（包括数组）都实现这个类的方法</li><li>导包：<code>java.lang.Object</code></li><li>使用<ul><li><code>public String toString()</code>：返回该对象的字符串表示</li><li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象”相等”</li></ul></li></ul><h5 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h5><ul><li>toString方法返回该对象的字符串表示，其实该字符串内容就是对象的类型+@+内存地址值</li><li>直接打印对象的名字，其实就是调用对象的toString</li><li>覆盖重写<ul><li>在IDEA中，可以使用alt+insert，点击toString()</li></ul></li><li>看一个类是否重写了toString,直接打印这个类的对象即可，如果没有重写toString方法，那么打印的是对象的地址值<h5 id="equals方法"><a href="#equals方法" class="headerlink" title="equals方法"></a>equals方法</h5></li><li>如果没有重写equals方法，默认比较对象的地址值，如果需要比较内容，需要覆盖重写</li><li>参数：<ol><li>Object obj：可以传递任意的对象</li><li>this ；调用的对象</li><li>obj ；参数</li></ol></li><li>基本数据类型：比较地址值</li><li>引用数据类型；比较对象的地址值</li><li>覆盖重写：<ul><li>问题：隐含一个多态，无法使用子类特有的内容（属性和方法）</li><li>解决：向下转型（强转）</li><li>alt+insert ,equals() and hashCode()</li></ul></li></ul><h5 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h5><ul><li>JDK7中添加的工具类，其中的方法是null-save(空指针安全)或null-tolerant(容忍空指针)，用于计算对象的hashcode、返回对象的字符串表示形式、比较两个对象</li><li>Objects.equals方法：防止出现空指针异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a==b)||(a!=<span class="keyword">null</span>&amp;&amp;a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><ul><li>表示特定的瞬间，精确到毫秒（千分之一秒  1000毫秒=1秒）</li><li>毫秒值的作用：可以对时间和日期进行计算（0毫秒：1970年1月1日 00:00:00）</li><li>中国属于东八区，会把时间+8小时</li><li>导包：<code>java.util.Date</code><h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5></li><li>public Date()：获取当前系统的日期和时间</li><li>public Date(Long date):传递毫秒值，把毫秒值转换为Date日期<h5 id="成员方法-1"><a href="#成员方法-1" class="headerlink" title="成员方法"></a>成员方法</h5></li><li>public long getTime():把日期转换为毫秒值(相当于System.currentTimeMillis()方法)，返回自1970年1月1日00:00:00 GMT以来此Date对象表示的毫秒数<h5 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h5></li><li>定义：日期/时间格式化子类的抽象类，可以实现日期和文不之间的转换（Date-&gt;String）</li><li>作用：格式化（日期-&gt;文本）、解析（文本-&gt;日期）</li><li>导包：<code>java.text.DateFormat</code></li><li>成员方法：<ol><li>String format(Date date)：按照指定的模式，把Date日期，格式化为符合模式的字符串</li><li>Date parse(String source)：把符合模式的字符串，解析(parse)为Date日期</li></ol></li><li><p>DateFormat是抽象类，无法之间创建对象使用，可以使用DateFormat的子类（SimpleDateFormat）</p><blockquote><p>parse方法声明了一个异常叫ParseException，如果字符串和构造方法的模式不一样，那么程序就会抛出此异常，调用一个抛出了异常的方法，就必须处理这个异常，要么throws继续抛出这个异常，要么try catch自己处理</p></blockquote></li><li><p><code>SimpleDateFormat</code>:</p><ul><li><code>java.text.SimpleDateFormat extends DateFormat</code></li><li>构造方法：SimpleDateFormat(String pattern)：用给定的模式和默认语言环境的日期格式符号构造</li><li>注意：模式中的字母不能更改，连接模式的符号可以改</li></ul></li></ul><h4 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h4><ul><li>本身是抽象类，已知子类<code>GregorianCalendar</code>，提供了很多操作日历字段的方法(YEAR\MONTH\DAT_OF_MONTH\HOUR)</li><li>Calendar类无法直接创建对象使用，里面有一个静态方法叫做getInstance()，此方法返回了Calendar类的子类对象</li><li>static Calendar getInstance() 使用默认时区和语言环境获得一个日历<h4 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h4></li><li><code>public int get(int field)</code>：返回给定日历字段的值</li><li><code>public void set(int field, int value)</code>；将给定的日历字段设置为给定值</li><li><code>public abstract void add(int field, int amount)</code>；根据日历的规则，为给定的日历字段添加或减去指定的时间量</li><li><code>public Date getTime()</code>；返回一个表示此Calendar时间值(从历元到现在的毫秒偏移量)的Date对象</li><li>注意；int field；日历类的字段，可以使用Calendar类的静态成员变量获取</li></ul><h4 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h4><ul><li>导包：<code>java.lang.System</code></li><li>获取与系统相关的信息或系统级操作<h5 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h5></li><li><code>public static long currentTimeMillis()</code>；返回以毫秒为单位的当前时间</li><li><code>public static void arraycopy(Object src, int srcPos,Object dest, int destPos, int length)</code>；将数组中指定的数据拷贝到另一个数组中</li></ul><h4 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h4><ul><li>字符串缓冲区，可以提高字符串的操作效率（看成一个长度可以变化的字符串），底层也是一个数组，但是没有final修饰，可以改成长度</li><li>在内存中始终是一个数组，占用空间少（byte[] value = new byte[16]），效率高，如果超出，自动扩容</li><li><code>java.lang.Builder</code><h5 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h5></li><li><code>StringBuilder()</code>；构造一个不带任何字符的字符串生成器，其初始容量为16个字符</li><li><code>StringBuilder(String str)</code>；构造一个字符串生成器，并初始化为指定的字符串内容<h5 id="成员方法-2"><a href="#成员方法-2" class="headerlink" title="成员方法"></a>成员方法</h5></li><li><code>public StringBuilder append(...)</code>；添加任意类型数据的字符串形式，并返回当前对象自身</li><li><code>public String toString()</code>；将当前StringBuilder对象转换为String对象<h5 id="注意-4"><a href="#注意-4" class="headerlink" title="注意"></a>注意</h5></li><li>String-&gt;StringBuilder；可以使用StringBuilder的构造方法</li><li>StringBuilder-&gt;String；可以使用StringBuilder的toString方法</li></ul><h4 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h4><ul><li>使用一个类，将基本类型的数据装起来，在类中定义一些方法，这个类叫做包装类，我们可以使用类中的方法来操作这些基本类型的数据<h5 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h5></li><li><p>装箱；把基本类型的数据，包装到包装类中</p><ul><li>构造方法：<ol><li>Integer(int value)；构造一个新分配的Integer对象，它表示指定的int值</li><li>Integer(String s)；构造一个新分配的Integer对象，它表示String参数所指示的int值（注意：传递的字符串，必须是基本类型的字符串，否则会抛出异常‘100’正确，‘0’异常）</li></ol></li><li>静态方法<ol><li><code>static Integer valueOf(int i)</code>；返回一个表示指定的int值的Integer对象</li><li><code>static Integer valueOf(String s)</code>；返回保存指定的String的值的Integer对象</li></ol></li></ul></li><li><p>拆箱；在包装类中取出基本类型的数据</p><ul><li>成员方法；<code>int intvalue()</code>；以int类型返回该Integer值</li></ul></li></ul><h5 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h5><ul><li>基本类型的数据和包装类之间可以自动地相互转换（JDK1.5之后）</li></ul><h5 id="基本类型与字符串类型的转换"><a href="#基本类型与字符串类型的转换" class="headerlink" title="基本类型与字符串类型的转换"></a>基本类型与字符串类型的转换</h5><ul><li><p>基本类型-&gt;字符串；</p><ol><li>基本类型的值+””</li><li>包装类的静态方法toString(参数)，不是Object类的toString()方法，发生了重载</li><li>String类的静态方法valueOf(参数)</li></ol></li><li><p>字符串-&gt;基本类型；</p><ol><li>包装类的静态方法；parseXXX(“数值类型的字符串”)</li></ol></li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><ul><li>数组长度固定；集合长度可变</li><li>数组存储同一类型元素；集合只能存储对象，类型可以不一致</li></ul><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><ul><li><p>Collection接口；所有单列集合中共性的方法\所有的单列集合都可以使用共性的方法\没有索引的方法</p><ul><li><p>List接口；有序的集合（存储和取出元素顺序相同）\允许存储重复元素\有索引，可以使用普通的for循环遍历</p><ul><li>Vector集合</li><li>ArrayList集合</li><li>LinkedList集合</li></ul></li><li><p>Set接口；不允许存储重复元素\没有索引（不能使用普通的for循环遍历）</p><ul><li>TreeSet集合</li><li>HashSet集合<ul><li>LinkedHashSet集合(存取一致) </li></ul></li></ul></li></ul></li></ul><h4 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h4><h5 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h5><ul><li><code>public boolean add(E e)</code>：把给定的对象添加到当前集合中 。</li><li><code>public void clear()</code> ；清空集合中所有的元素。</li><li><code>public boolean remove(E e)</code>；把给定的对象在当前集合中删除。</li><li><code>public boolean contains(E e)</code>；判断当前集合中是否包含给定的对象。</li><li><code>public boolean isEmpty()</code>；判断当前集合是否为空。</li><li><code>public int size()</code>；返回集合中元素的个数。</li><li><code>public Object[] toArray()</code>；把集合中的元素，存储到数组中。</li></ul><h4 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h4><ul><li>为了遍历集合中所有元素</li><li><code>java.util.Iterator</code></li></ul><h5 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h5><ul><li>迭代：即Collection集合元素的通用获取方式。在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，继续再判断，如果还有就再取出出来。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</li><li><p>常用方法；</p><ul><li><code>boolean hasNext()</code>；如果仍有元素可以迭代，返回true</li><li><code>E next()</code> ；返回迭代的下一个元素</li></ul></li><li><p>注意：Iterator迭代器，是一个接口，无法直接使用，需要使用Iterator接口的实现类对象。Colletion接口中有一个方法，叫iterator()，返回的就是迭代器的实现类对象</p></li><li>使用步骤；<ol><li>使用集合中的方法<code>iterator()</code>获取迭代器的实现类对象，使用Iterator接口接收（多态），注意迭代器也有泛型，跟着集合走</li><li>使用Iterator接口中的方法hasNext判断还有没有下一个元素</li><li>使用Iterator接口中的方法next取出集合中的下一个元素</li></ol></li></ul><h5 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h5><ul><li>底层使用的也是迭代器，使用for循环的格式，简化了迭代器的书写，jdk1.5之后</li><li><code>Collection&lt;E&gt;extends Iterable&lt;E&gt;</code>；所有的单列集合都可以使用增强for</li><li><p><code>public interface Iterable&lt;T&gt;</code>；实现这个接口允许对象成为”foreach”语句的目标</p></li><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(集合/数组的数据类型 变量名:集合名/数组名)&#123;</span><br><span class="line">    sout(变量名);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意；新for循环必须有被遍历的目标，目标只能是Collection或者是数组。新式for仅仅作为遍历操作出现</p></li></ul><h4 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型(Generic)"></a>泛型(Generic)</h4><h5 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h5><ul><li>一种未知的数据类型，当我们不知道使用什么数据类型的时候，可以使用泛型</li><li>泛型可以看作是一个变量，用来接收数据类型</li><li>E e；Element元素</li><li>T t；Type类型</li><li>创建集合对象的时候，就会确定泛型的数据类型<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5></li><li>避免了类型转换的麻烦，存储的是什么类型，取出的就是什么类型</li><li>把运行期间异常<code>ClassCastException</code>，提升到了编译时期的编译失败</li><li>但是泛型是什么类型，只能存储什么类型的数据<h5 id="定义与使用"><a href="#定义与使用" class="headerlink" title="定义与使用"></a>定义与使用</h5></li><li><p>含有泛型的类</p><ul><li>格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;泛型&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>含有泛型的方法</p><ul><li>格式；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通方法</span></span><br><span class="line">修饰符 &lt;泛型&gt; 返回值类型 方法名(泛型 参数名,...)&#123;</span><br><span class="line">    方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line">修饰符 <span class="keyword">static</span> &lt;泛型&gt; 返回值类型 方法名(泛型 参数名,...)&#123;</span><br><span class="line">    方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>含有泛型的接口</p><ul><li><p>格式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;泛型&gt;</span>&#123;</span><br><span class="line">    抽象方法(泛型 参数名,...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用：</p><ol><li>定义类时确定泛型的类型</li><li>始终不确定泛型的类型，直到创建对象时，确定泛型的类型<h5 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h5></li></ol></li></ul></li><li>？；代表任意的数据类型</li><li>使用：<ul><li>不能创建对象使用</li><li>只能作为方法的<strong>参数</strong>使用</li></ul></li><li>注意：泛型不存在继承关系 Collection<object> list = new ArrayList<string>();这种是错误的。</string></object></li></ul><h5 id="泛型的上限限定"><a href="#泛型的上限限定" class="headerlink" title="泛型的上限限定"></a>泛型的上限限定</h5><ul><li><code>? extends E</code>；代表使用的泛型只能是E的子类/本身</li></ul><h5 id="泛型的下限限定"><a href="#泛型的下限限定" class="headerlink" title="泛型的下限限定"></a>泛型的下限限定</h5><ul><li><code>? super E</code>；代表使用的泛型只能是E类型的父类/本身</li></ul><h4 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h4><ul><li><code>java.util.List extends Collection</code></li><li>List接口继承Collection接口<h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5></li><li>有序的集合，存储元素和取出元素的顺序是一致的</li><li>有索引，包含了一些带索引的方法</li><li>允许存储重复的元素<h5 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h5></li><li><code>public void add(int index, E element)</code>；将指定的元素，添加到该集合中的指定位置上</li><li><code>public E get(int index)</code>；返回集合中指定位置的元素</li><li><code>public E remove(int index)</code>；移除列表中指定位置的元素，返回的是被移除的元素</li><li><code>public E set(int index, E element)</code>；用指定元素替换集合中指定位置的元素，返回以前在指定位置的元素</li><li>注意：操作索引的时候，一定要防止索引越界异常<h5 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h5></li><li>ArrayList；List接口的数组实现，元素增删慢，查找快。此实现是不同步的（多线程）。</li><li>LinkedList；List接口的链表列表实现。元素添加快，查找慢。<ul><li>双向链表</li><li>含有大量操作首尾元素的方法，因此不要使用多态</li><li>常用方法：<ul><li><code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</li><li><code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</li><li><code>public E getFirst()</code> :返回此列表的第一个元素。</li><li><code>public E getLast()</code> :返回此列表的最后一个元素。</li><li><code>public E removeFirst()</code> :移除并返回此列表的第一个元素。</li><li><code>public E removeLast()</code> :移除并返回此列表的最后一个元素。</li><li><code>public E pop()</code> :从此列表所表示的堆栈处弹出一个元素。</li><li><code>public void push(E e)</code> :将元素推入此列表所表示的堆栈。</li><li><code>public boolean isEmpty()</code> ：如果列表不包含元素，则返回true。</li></ul></li></ul></li><li>Vector；单线程，与ArrayList原理一样，已被ArrayList替代</li></ul><h4 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h4><ul><li><code>java.util.Set extends Collection</code></li><li>Set接口继承Collection接口<h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5></li><li><p>不允于存储重复的元素</p><blockquote><p>原理；add方法会调用元素的hashCode方法和equals方法，判断元素值是否重复(前提；存储的元素必须重写hashCode和equals方法)，哈希值不同，直接存入集合，哈希值相同，比较equals，true为相同值，不存入集合</p></blockquote></li><li><p>没有索引，没有带索引的方法，也不能使用普通的for循环遍历</p><h5 id="子类-1"><a href="#子类-1" class="headerlink" title="子类"></a>子类</h5><h6 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h6></li><li>特点；<ol><li>由哈希表支持，不保证迭代顺序</li><li>是一个无序的集合，存储元素和取出元素的顺序有可能不一致</li><li>底层是一个哈希表结构(查询速度快)</li></ol></li><li>哈希值；<ul><li>是一个十进制的整数，由系统随机给出(对象的地址值，是一个逻辑地址，是模拟出来得到的地址，不是数据实际存储的物理地址)</li><li>在Object类中由一个方法，可以获取对象的哈希值；<code>int hashCode()</code></li><li>hashCode()；<code>public native int hashCode()</code>，native代表该方法调用的是本地操作系统的方法</li><li>String类的哈希值；String类重写了Object类的hashCode()方法（”重地和通话”哈希值相同）</li></ul></li><li>数据结构；<ul><li>哈希表；<ul><li>jdk1.8版本之前；哈希表= 数组+链表</li><li>jdk1.8版本之后；哈希表=数组+链表+红黑树（提高了查询速度）<ul><li>存储数据到集合中(先计算元素的哈希值)</li><li>把元素进行分组，相同哈希值链接到一起</li><li>哈希冲突：元素不同，哈希值相同</li><li>如果链表的长度超过8位，那么就会把链表转换为红黑树</li></ul></li></ul></li></ul></li><li>存储自定义类型元素<ul><li>重写hashCode和equals方法</li></ul></li></ul><h6 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h6><ul><li><code>java.util.LinkedHashSet extends HashSet</code>,继承父类HashSet</li><li>可预知迭代顺序的Set接口的哈希表和链接列表实现</li><li>底层是一个哈希表（数组+链表/红黑树）+链表；多了一条链表记录元素的存储顺序，保证元素有序</li></ul><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><ul><li>JDK1.5之后出现的新特性</li><li>使用前提；当前方法的参数列表数据类型已经确定，但是参数的个数不确定，使用可变参数</li><li>格式；<code>修饰符 返回值类型 方法名(数据类型...变量名){}</code></li><li>原理；可变参数底层就是一个数组，根据传递参数个数不同，会创建不同长度的数组，来存储这些参数，传递的参数个数，可以是0个,1,2…多个</li><li>注意；<ol><li>一个方法的参数列表，只能有一个可变参数</li><li>如果方法的参数有多个，那么可变参数必须写在参数列表的末尾</li><li>终极写法；<code>(Object...obj)</code></li></ol></li></ul><h4 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h4><ul><li><code>java.util.Collections</code>；集合工具类<h5 id="常用方法-5"><a href="#常用方法-5" class="headerlink" title="常用方法"></a>常用方法</h5></li><li><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T...elements)</code>；往集合中添加一些元素</li><li><code>public static void shuffle(List&lt;?&gt; list)</code>；打乱集合顺序</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list)</code>；将集合中元素按照默认规则（升序）排序</li><li><code>public static &lt;T&gt; void sort(List&lt;T&gt; list ,Comparetor&lt;? super T&gt;)</code>；将集合中元素按照指定规则排序</li><li>注意；<ul><li><code>sort(List&lt;T&gt; list)</code>被排序的集合里面存储的元素，必须实现Comparable接口，重写接口中的compareTo()定义排序规则</li><li>Comparable接口的排序规则；自己(this)-参数；升序</li></ul></li><li><code>Comparator</code>和<code>Comparable</code>的区别<ul><li>Comparable：自己（this）和别人（参数）比较，自己需要实现Comparable接口，重写比较的规则compareTo方法</li><li>Comparator；找一个第三方的裁判</li><li>Comparator排序规则；o1-o2升序，o2-o1降序</li></ul></li></ul><h4 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h4><ul><li>java.util.Map&lt;k,v&gt;</li><li>特点；<ol><li>Map集合是一个双列集合，一个元素包含两个值(一个key,一个value)</li><li>Map集合中的元素，key和value的数据类型可以相同，也可以不同</li><li>Map集合中的元素，key是不允许重复的，value是可以重复的</li><li>Map集合中的元素，key和value是一一对应的</li></ol></li><li>和<code>Collection</code>的区别：<ol><li><code>Collection</code>中的集合，元素是孤立存在的（理解为单身），向集合中存储元素采用一个个元素的方式存储。</li><li><code>Map</code>中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。</li><li><code>Collection</code>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li><li>需要注意的是，<code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li></ol></li></ul><h5 id="Map常用子类"><a href="#Map常用子类" class="headerlink" title="Map常用子类"></a>Map常用子类</h5><ul><li><p><code>HashMap&lt;K,V&gt;</code>；</p><ol><li>HashMap底层是哈希表，查询速度快，元素的存储顺序不能保证一致</li><li>为了保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法</li><li>JDK1.8之前；数组+单向链表</li><li>JDK1.8之后；数组+单向链表/红黑树（链表的长度超过8时）</li></ol></li><li><p><code>LinkedHashMap&lt;K,V&gt;</code>；</p><ol><li>是HashMap的子类，底层是哈希表+链表</li><li>是一个有序的集合，存储元素和取出元素的顺序是一致的，需要重写hashCode()、equals()方法</li></ol></li><li><p>注意；Map接口中的集合都有两个泛型变量&lt;K,V&gt;，在使用时，要为两个泛型变量赋予数据类型。两个泛型变量&lt;K,V&gt;的数据类型可以相同，也可以不同。</p></li></ul><h5 id="Map常用方法"><a href="#Map常用方法" class="headerlink" title="Map常用方法"></a>Map常用方法</h5><ul><li><p><code>public V put(K key, V value)</code>:  把指定的键与指定的值添加到Map集合中。</p><ul><li>返回值V:<ul><li>存储键值对的时候，key不重复，返回值V是null</li><li>存储键值对的时候，key重复，会使用新的value替换map中重复的value，返回被替换的value值</li></ul></li></ul></li><li><p><code>public V remove(Object key)</code>: 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</p><ul><li>返回值V:<ul><li>key存在，返回被删除的值</li><li>key不存在，返回null</li></ul></li></ul></li></ul><ul><li><p><code>public V get(Object key)</code> 根据指定的键，在Map集合中获取对应的值。</p><ul><li>返回值V:<ul><li>key存在，返回对应value值</li><li>key不存在，返回null</li></ul></li></ul></li><li><p><code>boolean containsKey(Object key)</code> 判断集合中是否包含指定的键。</p></li><li><code>public Set&lt;K&gt; keySet()</code>: 获取Map集合中所有的键，存储到Set集合中。</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><h5 id="Map遍历key找value方式"><a href="#Map遍历key找value方式" class="headerlink" title="Map遍历key找value方式"></a>Map遍历key找value方式</h5><ul><li>获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示:<code>keySet()</code></li><li>遍历键的Set集合，得到每一个键。</li><li>根据键，获取键所对应的值。方法提示:<code>get(K key)</code></li></ul><h5 id="Entry键值对对象"><a href="#Entry键值对对象" class="headerlink" title="Entry键值对对象"></a>Entry键值对对象</h5><ul><li><code>Map.Entry&lt;K,V&gt;</code>；在Map接口中有一个内部接口<code>Entry</code></li><li>作用；当Map集合一创建，那么就会在Map集合中创建一个Entry对象，用来记录键与值（键值对对象，键与值得映射关系）</li><li>Entry对象的常用方法；<ul><li><code>public K getKey()</code>：获取Entry对象中的键。</li><li><code>public V getValue()</code>：获取Entry对象中的值。</li></ul></li></ul><h5 id="HashMap存储自定义类型键值"><a href="#HashMap存储自定义类型键值" class="headerlink" title="HashMap存储自定义类型键值"></a>HashMap存储自定义类型键值</h5><ul><li>Map集合保证Key是唯一的：作为key的元素，必须重写hashCode方法和equals方法，以保证key唯一</li></ul><h5 id="LinkedHashMap-lt-K-V-gt"><a href="#LinkedHashMap-lt-K-V-gt" class="headerlink" title="LinkedHashMap&lt;K,V&gt;"></a>LinkedHashMap&lt;K,V&gt;</h5><ul><li>LinkedHashMap&lt;K,V&gt;继承HashMap&lt;K,V&gt;</li><li>底层原理；哈希表+链表（记录顺序）</li></ul><h5 id="HashTable-lt-K-V-gt"><a href="#HashTable-lt-K-V-gt" class="headerlink" title="HashTable&lt;K,V&gt;"></a>HashTable&lt;K,V&gt;</h5><ul><li>底层也是一个哈希表，是一个线程安全的集合，是单线程集合，速度慢</li><li>HashTable不能存null值,null键</li><li>HashTable和Vector在jdk1.2之后被取代（HashMap,ArrayList）</li><li>HashTable的子类<code>Properties</code>依然在使用</li></ul><h4 id="JDK9对集合添加的优化"><a href="#JDK9对集合添加的优化" class="headerlink" title="JDK9对集合添加的优化"></a>JDK9对集合添加的优化</h4><ul><li>JDK9的新特性；<ul><li>List接口、Set接口、Map接口；增加了一个<code>静态方法of</code>，可以给集合一次性添加多个元素<ul><li>前提；集合中存储的元素的个数已经确定，不再改变</li></ul></li><li>注意；<ul><li>of方法值适用于List、Set、Map接口，不适用于接口的实现类</li><li>of方法的返回值是一个不能改变的集合，集合不能再使用add、put方法添加元素，会抛出异常</li><li>Set接口和Map接口再调用of方法的时候，不能有重复的元素，否则会抛出异常</li></ul></li></ul></li></ul><h4 id="Debug调试"><a href="#Debug调试" class="headerlink" title="Debug调试"></a>Debug调试</h4><ul><li>Debug调试程序；<ul><li>可以让代码逐行执行，查看代码执行的过程，调试程序中出现的bug</li></ul></li><li>使用方式；<ul><li>在行号的右边，鼠标左键单击，添加断点（每个方法的第一行，哪里有bug添加到哪里）</li><li>右键，选择Debug执行程序</li></ul></li><li>执行程序；<ul><li>f8；逐行执行程序</li><li>f7；进入到方法中</li><li>shift+f8；跳出方法</li><li>f9；跳到下一个断点，如果没有下一个断点，那么就结束程序</li><li>ctrl+f2；退出Debug模式，停止程序</li><li>Console；切换到控制台</li></ul></li></ul><h3 id="异常与多线程"><a href="#异常与多线程" class="headerlink" title="异常与多线程"></a>异常与多线程</h3><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><ul><li>异常；程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止</li><li>异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象，Javac处理异常的方式是<code>中断处理</code><h5 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h5></li><li><code>Throwable</code>；<code>Java.lang.Throwable</code><ul><li><code>Error</code>；工程师无法处理，只能尽力避免</li><li><code>Exception</code>；编译期异常，由于使用不当导致，可以避免<ul><li><code>RuntimeException</code>；运行期异常,Java程序运行过程中出现的问题</li></ul></li></ul></li></ul><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><ul><li>常用关键字；<code>try</code>,<code>catch</code>,<code>finally</code>,<code>throw</code>,<code>throws</code></li></ul><h6 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h6><ul><li>在指定的方法中抛出指定的异常</li><li>格式；<code>throw new xxxException(&quot;异常产生的原因&quot;)</code></li><li>注意；<ol><li>throw关键字必须写在方法内部</li><li>throw关键字后边new的对象必须是Exception或者Exception的子类对象</li><li>throw关键字抛出指定的异常对象，我们就必须处理这个异常对象</li><li>throw关键字后边创建的是RuntimeException或者是RuntimeException的子类对象，(运行期异常)可以不处理，默认交给JVM处理（打印异常对象，中断程序）</li><li>throw关键字后边创建的是编译异常，我们就必须处理这个异常，要么<code>throw</code>,要么<code>try...catch</code></li></ol></li></ul><h6 id="声明异常throws"><a href="#声明异常throws" class="headerlink" title="声明异常throws"></a>声明异常throws</h6><ul><li>异常处理的第一种方式，交给别人处理</li><li>当方法内部抛出异常对象的时候，必须处理这个异常对象</li><li>可以使用<code>throws</code>关键字处理异常对象，会把异常对象声明抛出给方法的调用者处理，最终交给JVM处理</li><li><p>格式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值 方法名(参数列表) <span class="keyword">throws</span> AAAException, BBBException...&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AAAException(<span class="string">"产生原因"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BBBException(<span class="string">"产生原因"</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意；</p><ol><li><code>throws</code>关键字必须写在方法声明处</li><li><code>throws</code>关键字后边声明的异常必须是<code>Exception</code>或者是<code>Exception的子类</code></li><li>方法内部如果抛出了多个异常对象，那么<code>throws</code>后边必须也声明多个异常。（如果抛出的多个异常对象有子父类关系，那么直接声明父类异常即可）</li><li>调用了一个声明抛出异常的方法，我们就必须处理声明的异常。（要么继续使用throws声明抛出，交给方法的调用者处理，最终交给JVM，要么<code>try...catch</code>自己处理异常）</li></ol></li></ul><h6 id="捕获异常try…catch"><a href="#捕获异常try…catch" class="headerlink" title="捕获异常try…catch"></a>捕获异常try…catch</h6><ul><li><p>格式；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能产生异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 变量名)&#123; <span class="comment">//用来接收try中抛出的异常对象 </span></span><br><span class="line">    处理异常的代码（一般把异常信息记录到一个日志中）</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">catch</span>(异常类型 变量名)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意；</p><ol><li>try中可能会抛出多个异常对象，那么就可以使用多个catch来处理这些异常对象</li><li>如果try中产生了异常，那么就会执行catch中的异常处理逻辑，执行完毕catch中的处理逻辑，继续执行try…catch之后的代码</li><li>如果try中没有产生异常，那么就不会执行catch中异常的处理逻辑</li></ol></li></ul><h5 id="Throwable常用方法"><a href="#Throwable常用方法" class="headerlink" title="Throwable常用方法"></a>Throwable常用方法</h5><ul><li><code>public void printStackTrace()</code>；打印异常的详细信息</li><li><code>public String getMessage()</code>；获取发生异常的原因</li><li><code>public String toString()</code>；获取异常的类型和异常描述信息（不用）</li></ul><h5 id="finally代码块"><a href="#finally代码块" class="headerlink" title="finally代码块"></a>finally代码块</h5><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能发生异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 变量名)&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    无论是否出现异常都会执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意；</p><ol><li><code>finally</code> 不能单独使用，必须和try一起使用</li><li><code>finally</code> 一般用于资源释放（资源回收），无论程序是否出现异常，最后都要释放资源（IO）</li></ol></li></ul><h5 id="异常的注意事项"><a href="#异常的注意事项" class="headerlink" title="异常的注意事项"></a>异常的注意事项</h5><ul><li>多个异常使用捕获该如何处理<ol><li>多个异常分别处理</li><li>多个异常一次捕获，多次处理<blockquote><p>注意；一个try,多个catch,如果catch定义的异常变量，具有父子类的关系，子类的异常变量必须写在上面，否则会报错</p></blockquote></li><li>多个异常一次捕获（catch异常对象的父类），一次处理</li></ol></li><li>如果finally有return语句,永远返回finally中的结果,避免该情况</li><li>运行时异常被抛出可以不处理。即不捕获也不声明抛出。</li><li>如果父类抛出了多个异常,子类重写父类方法时<ol><li>抛出和父类相同的异常</li><li>抛出父类异常的子类异常</li><li>不抛</li></ol></li><li>父类没有抛出异常，子类也不能抛出异常，如果出现异常，只能捕获处理，不可抛出</li></ul><h5 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h5><ul><li><p>格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXException</span> <span class="keyword">extends</span> <span class="title">Exception</span>|<span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    添加一个空参数的构造方法</span><br><span class="line">    添加一个带异常信息的构造方法</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意；</p><ol><li>自定义异常类一般都是Exception结尾，说明该类是一个异常类</li><li>自定义异常类，必须的继承Exception或者RuntimeException</li><li>继承Exception；自定义的异常类是一个编译器异常，如果方法内抛出了编译器异常，必须处理这个异常，要么<strong>抛出</strong>要么<strong>捕获</strong></li><li>继承RuntimeException；自定义的异常类是一个运行期异常，无需处理，交给JVM（中断处理）</li></ol></li></ul><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h5 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h5><ul><li>并发；指两个或多个事件在同一个时间段内发生(交替执行)</li><li>并行；指两个或多个事件在同一时刻发(同时发生)<h5 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h5></li><li>进程：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，一个应用程序可以同时运行多个进程；进程也是程序的一次执行过程，是系统运行程序的基本单位；系统运行一个程序即是一个进程从创建、运行到消亡的过程。</li><li>线程：线程是进程中的一个执行单元，负责当前进程中程序的执行，一个进程中至少有一个线程。一个进程中是可以有多个线程的，这个应用程序也可以称之为多线程程序。简而言之：一个程序运行后至少有一个进程，一个进程中可以包含多个线程<ul><li>线程调度；<ul><li>分时调度：所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU的时间</li><li>抢占式调度：优先让优先级高的线程使用CPU，如果线程的优先级相同，那么会随机选择一个（线程随机性），<code>Java使用的是抢占式调度</code></li></ul></li><li>单线程程序：Java程序中只有一个线程</li><li>主线程：执行主（main）方法的线程<h5 id="创建线程类"><a href="#创建线程类" class="headerlink" title="创建线程类"></a>创建线程类</h5><h6 id="方式一：创建Thread类的子类"><a href="#方式一：创建Thread类的子类" class="headerlink" title="方式一：创建Thread类的子类"></a>方式一：创建Thread类的子类</h6></li></ul></li><li><code>java.lang.Thread</code>；描述线程的类，要实现多线程程序，必须继承Thread类</li><li>实现步骤：<ol><li>创建一个Thread子类</li><li>在Thread类的子类中重写Thread类中的<code>run</code>方法，设置线程任务（开启线程做什么）</li><li>创建Thread类的子类对象</li><li>调用Thread类中的方法<code>start()</code>方法，开启新的线程（开辟新的栈空间），执行<code>run</code>方法<h6 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h6></li></ol></li><li><code>java.lang.Runnable</code></li><li>实现步骤：<ol><li>创建一个<code>Runnable</code>接口的实现类</li><li>在实现类中重写<code>Runnable</code>接口的<code>run</code>方法，设置线程任务</li><li>创建一个<code>Runnable</code>接口的实现类对象</li><li>创建<code>Thread</code>类对象，构造方法中传递<code>Runnable</code>接口的实现类对象</li><li>调用<code>Thread</code>类中的<code>start</code>方法，开启新的线程执行<code>run</code>方法<h5 id="实现Runnable接口创建多线程的好处"><a href="#实现Runnable接口创建多线程的好处" class="headerlink" title="实现Runnable接口创建多线程的好处"></a>实现Runnable接口创建多线程的好处</h5></li></ol></li><li>避免了单继承的局限性<blockquote><p>一个类只能继承一个类，类继承了Thread类就不能继承其他的类，实现Runnable接口，还可以继承其他的类，实现其他的接口</p></blockquote></li><li>增强了程序的扩展性，降低了程序的耦合性（解耦）<blockquote><p>实现Runnable接口的方式，把设置线程任务和开启新线程进行了分离(解耦)。实现类中，重写了run方法：用来设置线程任务；创建Thread类对象，调用start()方法：用来开启新线程</p></blockquote><h5 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h5></li><li>构造方法</li><li>常用方法<ul><li><code>public String getName()</code>；获取当前线程名称</li><li><code>public void start()</code>；导致此线程开始执行，Java虚拟机调用此线程的run方法</li><li><code>public void run()</code>；此线程要执行的任务在此处定义代码</li><li><code>public static Thread currentThread()</code>；返回当前正在执行的线程对象的引<br>用</li><li><code>public static void sleep(long millis)</code>；使当前正在执行的线程以指定的毫秒数暂停</li></ul></li><li>设置线程名称<ul><li>使用Thread类中的方法<code>void setName(String name)</code></li><li>创建一个带参数的构造方法，参数传递线程的名称，调用父类的带参构造方法（super(name)）,把线程名称传递给父类，让父类（Thread）给子线程改名字（<code>Thread(String name)</code>）</li><li>适合多个相同的程序代码的线程去共享同一个资源。</li><li>可以避免java中的单继承的局限性。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。- 线程池只能放入实现Runable或Callable类线程，不能直接放入继承Thread的类。<h5 id="匿名内部类方式实现线程的创建"><a href="#匿名内部类方式实现线程的创建" class="headerlink" title="匿名内部类方式实现线程的创建"></a>匿名内部类方式实现线程的创建</h5></li></ul></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类/接口（）&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    重写父类/接口中的方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 线程任务</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br></pre></td></tr></table></figure></li></ul><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><h5 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h5><ul><li>当使用多线程访问同一资源的时候，多个线程对资源有写操作，就容易出现线程安全问题</li><li>Java提供了同步机制（Synchronized）解决<h5 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h5><h6 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h6></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(锁对象)&#123;</span><br><span class="line">    需要同步操作的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意；</p><ol><li>同步代码块中的锁对象，可以使用任意的对象</li><li>必须保证多个线程使用的锁对象是同一个</li><li>锁对象作用：把同步代码块锁住，只让一个线程在同步代码块中执行，其他线程被阻塞（BLOCKED）</li><li>频繁的上锁、解锁会降低程序效率，但是提供程序安全性</li></ol></li></ul><h6 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h6><ul><li>使用<code>synchronized</code>修饰的方法，就叫同步方法</li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> 返回值类型 方法名()&#123;</span><br><span class="line">    可能会产生线程安全问题的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同步方法也会把方法内部打代码锁住</p><blockquote><p>同步锁是谁?对于非static方法,同步锁就是this。<br>对于static方法,我们使用当前方法所在类的字节码对象(类名.class)。</p></blockquote></li></ul><h6 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h6><ul><li><code>java.util.concurrent.locks.Lock</code></li><li>Lock 实现了比 synchronized代码块和synchronized方法更广泛的锁定操作,同步代码块/同步方法具有的功能Lock都有,除此之外更强大,更体现面向对象</li><li>创建对象<ul><li><code>Lock 锁名 = new ReentrantLock();</code></li></ul></li><li>常用方法；<ul><li><code>public void lock()</code> :加同步锁。</li><li><code>public void unlock()</code> :释放同步锁</li></ul></li></ul><h4 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h4><ul><li><code>java.lang.Thread.State</code><h5 id="六种状态"><a href="#六种状态" class="headerlink" title="六种状态"></a>六种状态</h5>| <strong>线程状态</strong> | <strong>导致状态发生的条件</strong> |<br>|—|—|<br>|NEW(新建)|线程刚被创建，但是并未启动。还没调用start方法|<br>|Runnable(可运行)|线程可以在Java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于CPU|<br>|Blocked(锁阻塞)|当一个线程试图获取一个对象锁，而对象锁被其他的线程持有，则该线程进入Blocked状态；当线程持有锁时，该线程变成Runnable状态|<br>|Waiting(无限等待)|一个线程在等待另一个线程执行（唤醒）动作时，该线程进入Waiting状态，进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒|<br>|TimedWaiting(计时等待)|同waiting状态，有几个方法有超时参数，调用他们将进入TimeWaiting状态，这一状态将一致保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有：Thread.sleep(),Object.wait()|<br>|Teminated(被终止)|因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡|<h5 id="Timed-Waiting-计时等待"><a href="#Timed-Waiting-计时等待" class="headerlink" title="Timed Waiting 计时等待"></a>Timed Waiting 计时等待</h5></li><li>Thread.sleep(long m)；强制当前正在执行的线程休眠，线程进入Runnable/Blocked状态</li><li>锁对象.wait(long m)；在毫秒值结束之后，还没有被notify唤醒，就会自动醒来，线程进入Runnable/Blocked状态</li><li>注意；sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始立刻执行。<h5 id="Blocked-锁阻塞"><a href="#Blocked-锁阻塞" class="headerlink" title="Blocked 锁阻塞"></a>Blocked 锁阻塞</h5></li><li>线程A与线程B代码中使用同一锁，如果线程A获取到锁，线程A进入到Runnable状态，那么线程B就进入到Blocked锁阻塞状态<h5 id="Waiting-无限等待"><a href="#Waiting-无限等待" class="headerlink" title="Waiting 无限等待"></a>Waiting 无限等待</h5></li><li>等待唤醒<ul><li>只有锁对象才能调用<code>void wait()</code>和<code>void notify()</code>方法</li><li><code>void notifyAll()</code>；全部唤醒</li></ul></li></ul><h4 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h4><h5 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h5><ul><li>多个线程在处理同一个资源，但是处理的动作（线程的任务）却不同</li><li>多个线程并发执行，CPU默认随机切换线程，为了让他们有规律执行，需要进行协调通信</li><li>等待唤醒机制；使各个线程能有效利用资源<h5 id="等待唤醒机制-1"><a href="#等待唤醒机制-1" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h5></li><li>多个线程间的一种协作机制</li><li>wait/notify就是线程间的一种协作机制</li><li>等待唤醒中的方法：<ol><li>wait：线程不再活动，不再参与调度，进入wait set中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态即是 WAITING。它还要等着别的线程执行一个特别的动作，也即是“通知（notify）”在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（ready queue）中</li><li>notify：选取所通知对象的 wait set中的一个线程释放</li><li>notifyAll；释放所通知对象的 wait set上的全部线程。</li></ol></li><li>注意：<ol><li>wait方法与notify方法必须要由同一个锁对象调用。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li>wait方法与notify方法必须要在同步代码块或者是同步函数中使用。因为：必须要通过锁对象调用这2个方法</li></ol></li></ul><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><ul><li>线程池；可以容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源</li><li>优点；<ol><li>降低资源消耗</li><li>提高响应速度</li><li>提高线程的可管理性</li></ol></li></ul><h5 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h5><ul><li>jdk1.5之后提供</li><li><code>java.util.concurrent.Executors</code>；线程池的工厂类，用来生成线程池</li><li><p><code>Executors类</code>中的静态方法；</p><ul><li><p><code>static ExecutorService newFixedThreadPool(int nThreads)</code>创建一个可重用固定线程数的线程池</p><ul><li>参数；<code>int nThreads</code>；创建线程池中包含的线程数量</li><li>返回值；ExecutorService接口，返回的是ExecutorService接口的实现类对象，我们可以使用ExecutorService接口接收(面向接口接收)</li></ul></li><li><p><code>java.util.concurrent.ExecutorService</code>；线程池接口</p><ul><li>用来从线程池中获取线程，调用start()方法，执行线程任务</li><li>submit(Runnable task)提交一个Runnable任务用于执行</li></ul></li><li>关闭/销毁线程池的方法<ul><li>void shutdown()</li></ul></li></ul></li><li>线程池的使用步骤<ol><li>使用线程池的工厂类Executors里面提供的静态方法newFixedThreadPool生产一个指定线程数量的线程池</li><li>创建一个类，实现Runnable接口，重写run方法，设置线程任务</li><li>调用ExecutorService中的方法submit，传递线程任务（实现类），开启线程，执行run方法</li><li>调用ExecutorService中的方法shutdown销毁线程池（不建议执行）</li></ol></li></ul><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><h5 id="函数式编程思想"><a href="#函数式编程思想" class="headerlink" title="函数式编程思想"></a>函数式编程思想</h5><ul><li>面向对象的思想:做一件事情,找一个能解决这个事情的对象,调用对象的方法,完成事情.</li><li>函数式编程思想:只要能获取到结果,谁去做的,怎么做的都不重要,重视的是结果,不重视过程<h5 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h5></li><li>Java8</li><li>实现多线程：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名内部类实现多线程</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            线程任务</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda表达式实现多线程</span></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;线程任务&#125;).start();<span class="comment">//启动线程</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="Lambda表达式标准格式"><a href="#Lambda表达式标准格式" class="headerlink" title="Lambda表达式标准格式"></a>Lambda表达式标准格式</h5><ul><li>组成；<ol><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ol></li><li>格式；<ul><li><code>(参数列表)-&gt;{一些重写方法的代码}</code></li></ul></li><li>解释；<ul><li><code>()</code>；接口中抽象方法的参数列表，没有参数就空着，有参数就写处参数，多个参数用逗号分隔</li><li><code>-&gt;</code>；床底的意思，把参数传递给方法体{}</li><li><code>{}</code>；重写接口的抽象方法的方法体</li></ul></li></ul><h5 id="Lambda省略格式"><a href="#Lambda省略格式" class="headerlink" title="Lambda省略格式"></a>Lambda省略格式</h5><ul><li>小括号内参数的类型可以省略；</li><li>如果小括号内有且仅有一个参，则小括号可以省略；</li><li>如果大括号内有且仅有一个语句，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ul><h5 id="Lambda使用前提"><a href="#Lambda使用前提" class="headerlink" title="Lambda使用前提"></a>Lambda使用前提</h5><ul><li>使用Lambda必须具有接口，且要求接口中有且仅有一个抽象方法。无论是JDK内置的 Runnable 、 Comparator 接口还是自定义的接口，只有当接口中的抽象方法存在且唯一<br>时，才可以使用Lambda。</li></ul><ol start="2"><li>使用Lambda必须具有上下文推断。也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。<blockquote><p>备注：有且仅有一个抽象方法的接口，称为<strong>函数式接口</strong></p></blockquote></li></ol><h3 id="File类与IO流"><a href="#File类与IO流" class="headerlink" title="File类与IO流"></a>File类与IO流</h3><h4 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h4><h5 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h5><ul><li><code>java.io.File</code>是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作</li><li>File类是一个与系统无关的类，任何的操作系统都可以使用这个类中的方法<h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5></li><li><code>static String pathSeparator</code> ；与系统有关的路径分隔符，为了方便，它被表示为一个字符串。 </li><li><code>static char pathSeparatorChar</code> ；与系统有关的路径分隔符。 </li><li><code>static String separator</code> ；与系统有关的默认名称分隔符，为了方便，它被表示为一个字符串。 <blockquote><p>路径不要写死，win和分隔符不同<br>eg:<code>&quot;C:&quot;+File.separator+&quot;develop&quot;+File.separator+&quot;a.txt&quot;</code></p></blockquote></li><li><code>static char separatorChar</code> ；与系统有关的默认名称分隔符。 <h5 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h5></li><li>绝对路径；是一个完整的路径，以盘符开始的路径</li><li>相对路径；是一个简化的路径，相对指的是相对于当前项目的根目录</li><li>注意：<ol><li>路径不区分大小写</li><li>路径中的文件名称分隔符windows用的是反斜杠，但反斜杠是转义字符，所以两个反斜杠菜表示一个普通的反斜杠<h5 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h5></li></ol></li><li><code>public File(String pathname)</code> ：通过将给定的路径名字符串转换为抽象路径名来创建新的File实例。<blockquote><p>String pathname：字符串的路径名称</p></blockquote></li><li><code>public File(String parent, String child)</code> ：从父路径名字符串和子路径名字符串创建新的File实例。<blockquote><p>String parent 父路径，String child 子路径</p></blockquote></li><li><code>public File(File parent, String child)</code> ：从父抽象路径名和子路径名字符串创建新的File实例。<blockquote><p>File parent 父路径是File类，可以使用一些方法，String child</p></blockquote></li><li><p>注意；</p><ul><li>路径可以是文件结尾，也可以是文件夹结尾</li><li>路径可以是相对路径，也可以是绝对路径</li><li>路径可以是不存在的</li><li>创建File对象，只是把字符串路径封装成File对象，不考虑路径的真实情况<h5 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h5></li></ul></li><li><code>public String getAbsolutePath()</code> ：返回此File的绝对路径名字符串。</li><li><code>public String getPath()</code> ：将此File转换为路径名字符串。</li><li><code>public String getName()</code> ：返回由此File表示的文件或目录的名称。</li><li><code>public long length()</code> ：返回由此File表示的文件的长度。不存在，返回0。<h5 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h5></li><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。<h5 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h5></li><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。<blockquote><ul><li>文件不存在，创建文件，返回true,文件存在，创建失败，返回false</li><li>创建文件的路径必须存在，否则会抛出异常（IOException）</li></ul></blockquote></li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。(单级)<blockquote><p>只会创建目录，与名称是否存在后缀无关</p></blockquote></li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录（多级）</li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。<blockquote><ul><li>删除成功，返回true,文件夹中有内容，不会删除，返回flase，构造方法中路径不存在，返回false</li><li>delete方法是直接在硬盘删除文件/文件夹，不走回收站，需要谨慎</li></ul></blockquote><h5 id="目录的遍历"><a href="#目录的遍历" class="headerlink" title="目录的遍历"></a>目录的遍历</h5></li><li><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</li><li><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。<blockquote><ul><li>list方法和listFiles方法遍历的是构造方法中给出的目录</li><li>如果构造方法中给出的目录的路径不存在，会抛出空指针异常</li><li>如果构造方法中给出的路径不是一个目录，也会抛出空指针异常</li></ul></blockquote></li></ul><h5 id="文件过滤器"><a href="#文件过滤器" class="headerlink" title="文件过滤器"></a>文件过滤器</h5><h6 id="FileFilter"><a href="#FileFilter" class="headerlink" title="FileFilter"></a>FileFilter</h6><ul><li><code>java.io.FileFilter</code>接口；用于抽象路径名（File对象）的过滤器</li><li>作用；用来过滤文件（File对象）</li><li>抽象方法；用来过滤文件的方法<ul><li><code>boolean accept(File pathname)</code>；测试指定抽象路径名是否应该包含在某个路径名列表中<h6 id="FilenameFilter"><a href="#FilenameFilter" class="headerlink" title="FilenameFilter"></a>FilenameFilter</h6></li></ul></li><li><code>java.io.FilenameFilter</code>接口；实现此接口的类实例可用于过滤文件名</li><li>作用；用于过滤文件名</li><li>抽象方法；用来过滤文件的方法<ul><li><code>boolean accept(File dir, String name)</code>；测试指定文件是否应该包含在某一文件列表中<blockquote><p>参数；</p><ul><li>File dir；构造方法中传递的被遍历的目录</li><li>String name；使用ListFiles方法遍历目录，获取的每一个文件/文件夹的名称</li></ul></blockquote></li></ul></li><li>注意；两个过滤器接口没有实现类，需要我们自己写实现类，重写过滤的方法accept，在方法中自己定义过滤规则</li></ul><h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><h5 id="IO分类"><a href="#IO分类" class="headerlink" title="IO分类"></a>IO分类</h5><ul><li>数据流向：<ul><li>输入流 ：把数据从<strong>其他设备</strong>上读取到<strong>内存</strong>中的流。</li><li>输出流 ：把数据从<strong>内存</strong>中写出到<strong>其他设备</strong>上的流。</li></ul></li><li>数据类型；<ul><li>字节流 ：以字节为单位，读写数据的流。</li><li>字符流 ：以字符为单位，读写数据的流。<blockquote><p>1字符=2字节 1字节=8位</p></blockquote></li></ul></li><li><p>顶级父类：</p><p>  ||输入流|输出流|<br>  |—|—|—|<br>  |<strong>字节流</strong>|字节输入流<br><code>InputStream</code>|字节输出流<br><code>OutputStream</code>|<br>  |<strong>字符流</strong>|字符输入流<br><code>Reader</code>|字符输出流<br><code>Writer</code>|</p></li></ul><h5 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h5><h6 id="字节输出流"><a href="#字节输出流" class="headerlink" title="字节输出流"></a>字节输出流</h6><ul><li><code>java.io.OutputStream</code>；抽象类表示字节输出流的所有类的超类</li><li>常用方法；<ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。<blockquote><p>注意；当完成流的操作时，必须调用此方法，释放系统资源</p></blockquote></li><li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。</li><li><code>public void write(byte[] b)</code> ：将 b.length字节从指定的字节数组写入此输出流（以二进制存入）。<blockquote><ul><li>如果写的第一个字节是正数（0-127）,那么显示的时候会查询ASCII表</li><li>如果写的第一个字节是负数，那第一个字节回合第二个字节，两个字节组成一个中文显示，查询系统默认码表（GBK）</li></ul></blockquote></li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。</li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul></li><li><code>FileOutputStream类</code>：<ul><li>构造方法：<ul><li><code>public FileOutputStream(File file)</code> ：创建文件输出流以写入由指定的 File对象表示的文件。</li><li><code>public FileOutputStream(String name)</code> ： 创建文件输出流以指定的名称写入文件。<blockquote><p>注意；当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p></blockquote><h6 id="写入数据的原理"><a href="#写入数据的原理" class="headerlink" title="写入数据的原理"></a>写入数据的原理</h6></li></ul></li></ul></li><li>内存–&gt;硬盘</li><li>Java抽象–&gt;JVM–&gt;OS–&gt;OS调用写数据的方法–&gt;把数据写入到文件中<h6 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h6></li><li><code>public FileOutputStream(File file, boolean append)</code> ： 创建文件输出流以写入由指定的 File对象表示的<br>文件。</li><li><code>public FileOutputStream(String name, boolean append)</code> ： 创建文件输出流以指定的名称写入文件<blockquote><p>boolean append:追加写开关</p><ul><li>true：创建对象不会覆盖原文件，继续在文件的末尾追加写数据</li><li>false；创建一个新文件，覆盖源文件</li></ul></blockquote><h6 id="换行写"><a href="#换行写" class="headerlink" title="换行写"></a>换行写</h6></li><li>Windows系统里，换行符号是<code>\r\n</code></li></ul><hr><h6 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h6><ul><li><code>java.io.InputStream</code>；抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中</li><li>常用方法；<ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。</li><li><code>public abstract int read()</code> ： 从输入流读取数据的下一个<code>字节</code>。</li><li><code>public int read(byte[] b)</code> ： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。<blockquote><ul><li>byte[]；起到缓冲作用，存储每次读取到的多个字节，一般定义为1024(1kb)或1024的整数倍</li><li>返回值int ；每次读取的有效字节个数</li></ul></blockquote></li></ul></li><li><code>FileInputStream类</code><ul><li><code>java.io.FileInputStream</code>；从文件中读取字节</li><li>构造方法；<ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。</li><li><code>FileInputStream(String name)</code> ： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。<h6 id="读取数据的原理"><a href="#读取数据的原理" class="headerlink" title="读取数据的原理"></a>读取数据的原理</h6></li></ul></li></ul></li><li>硬盘-&gt;内存</li><li>java程序-&gt;JVM-&gt;OS-&gt;OS读取数据的方法-&gt;读取文件<h6 id="关于中文"><a href="#关于中文" class="headerlink" title="关于中文"></a>关于中文</h6></li><li>1个中文：<ul><li>GBK；占用2个字节</li><li>UTF-8；占用3个字节</li></ul></li></ul><h5 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h5><h6 id="字符输出流"><a href="#字符输出流" class="headerlink" title="字符输出流"></a>字符输出流</h6><ul><li><code>java.io.Writer</code>；</li><li>常用方法：<ul><li><code>void write(int c)</code> 写入单个字符。void write(char[] cbuf) 写入字符数组。- abstract void write(char[] cbuf, int off, int len) 写入字符数组的某一部分,off数组的开始索引,len写的字符个数。</li><li><code>void write(String str)</code> 写入字符串。</li><li><code>void write(String str, int off, int len)</code> 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。</li><li><code>void flush()</code> 刷新该流的缓冲。void close() 关闭此流，但要先刷新它。</li></ul></li><li><code>FileWriter extends OutputStreamWriter extends Writer</code>；<ul><li>构造方法；<ul><li><code>FileWriter(File file)</code> ： 创建一个新的 FileWriter，给定要读取的File对象。</li><li><code>FileWriter(String fileName)</code> ： 创建一个新的 FileWriter，给定要读取的文件的名称</li></ul></li><li>使用步骤；<ol><li>创建FileWriter对象，构造方法中绑定要写入数据的目的地</li><li>使用FileWriter中的方法write，把数据写入到内存缓冲区中（字符转字节的过程）</li><li>使用FileWriter中的方法flush，把内存缓冲区中的数据，刷新到文件中</li><li>释放资源(会先把内存缓冲区的数据刷新到文件中)</li></ol></li></ul></li></ul><h6 id="字符输入流"><a href="#字符输入流" class="headerlink" title="字符输入流"></a>字符输入流</h6><ul><li><code>java.io.Reader</code>；抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。</li><li>常用方法：<ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。</li><li><code>public int read()</code> ： 从输入流读取一个字符。</li><li><code>public int read(char[] cbuf)</code> ： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中</li></ul></li><li><p><code>FileReader类 extends InputStreamReader extends Reader</code>；</p><ul><li>构造方法：<ul><li><code>FileReader(File file)</code> ： 创建一个新的 FileReader ，给定要读取的File对象。</li><li><code>FileReader(String fileName)</code> ： 创建一个新的 FileReader ，给定要读取的文件的名称</li></ul></li><li>使用方法；<ol><li>创建FileReader对象，构造方法中绑定要读取的数据源</li><li>使用FileReader对象中的方法read读取文件</li><li>释放资源</li></ol></li></ul></li><li><p>flush和close</p><ul><li>flush ：刷新缓冲区，流对象可以继续使用。</li><li>close :先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</li></ul></li></ul><h6 id="注意-5"><a href="#注意-5" class="headerlink" title="注意"></a>注意</h6><ul><li>字符流，只能操作文本文件，不能操作图片，视频等非文本文件。当我们单纯读或者写文本文件时 使用字符流 其他情况使用字节流<h6 id="IO异常处理"><a href="#IO异常处理" class="headerlink" title="IO异常处理"></a>IO异常处理</h6></li><li><p>jdk1.7之前使用try…catch finally处理流中的异常</p><ul><li>格式；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    可能产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    一定会执行的代码</span><br><span class="line">    (资源释放)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JDK7新特性：在try的后边可以增加一个(),在括号中可以定义流对象，那么这个流对象的作用域就在try中有效。try中的代码执行完毕，会自动把流对象释放，不用写finally</p><ul><li>格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(定义流对象;定义流对象;...)&#123;</span><br><span class="line">    可能产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>JDK9新特性；try的前面可以定义流对象，try后边的()中可以直接引入流对象的每次（变量名），在try代码执行完毕只会，流对象可以自动释放，不用写finally</p><ul><li>格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"><span class="keyword">try</span>(a,b)&#123;</span><br><span class="line">    可能产生出异常的代码</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 变量名)&#123;</span><br><span class="line">    异常的处理逻辑</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="属性集"><a href="#属性集" class="headerlink" title="属性集"></a>属性集</h4><h5 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h5><ul><li><code>java.util.Properties extends Hashtable&lt;K,V&gt; implements Map&lt;K,V&gt;</code> </li><li><code>Properties</code>表示一个持久的属性集。<code>Properties</code>可保存在流中或从流中加载。</li><li><code>Properties</code>集合是一个唯一和IO流相结合的集合<ul><li>可以使用<code>Properties</code>集合中的方法<code>store</code>，把集合中的临时数据，持久化写入到硬盘中存储</li><li>可以使用<code>Properties</code>集合中的方法<code>load</code>，把硬盘中保存的文件（键值对），读取到集合中使用</li></ul></li><li>属性列表中每个键及其对应值都是一个字符串：<code>Properties</code>集合是一个双列集合，key和value默认都是字符串<h5 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h5></li><li>构造方法：<ul><li><code>public Properties()</code>；创建一个空的属性列表</li></ul></li><li>常用方法：<ul><li><code>public Object setProperty(String key, String value)</code> ： 保存一对属性。</li><li><code>public String getProperty(String key)</code> ：使用此属性列表中指定的键搜索属性值。</li><li><code>public Set&lt;String&gt; stringPropertyNames()</code> ：所有键的名称的集合</li></ul></li><li><p>与流相关的方法</p><ul><li><code>void store(OutputStream out, String comments)</code>；以适合使用 load(InputStream) 方法加载到 Properties 表中的格式，将此 Properties 表中的属性列表（键和元素对）写入输出流。</li><li><p><code>void store(Writer writer, String comments)</code>；以适合使用 load(Reader) 方法的格式，将此 Properties 表中的属性列表（键和元素对）写入输出字符。</p><blockquote><p>参数；</p><ul><li>OutputStream out；字节输入流，不能写入中文</li><li>Writer writer；字符输出流，可以写中文</li><li>String comments；注释，用来解释说明保存的文件是做什么的，不能使用中文，默认unicode编码，一般使用””空字符串</li></ul></blockquote></li><li><p><code>void load(InputStream inStream)</code> ；从输入流中读取属性void列表（键和元素对）。</p></li><li><code>void load(Reader reader)</code> ；按简单的面向行的格式从输入字符流中读取属性列表（键和元素对）。 <blockquote><p>注意；</p><ul><li>存储键值对的文件中，键与值默认的链接符号可以使用=，空格（其他符合）</li><li>存储键值对的文件中，可以使用#进行注释，被注释的键值对不会再被读取</li><li>存储键值对的文件中，键与默认值都是字符串，不用加引号</li></ul></blockquote></li></ul></li></ul><h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h4><ul><li>字节缓冲流： <code>BufferedInputStream</code> ， <code>BufferedOutputStream</code></li><li>字符缓冲流： <code>BufferedReader</code> ，<code>BufferedWriter</code></li><li>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</li></ul><h5 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h5><ul><li><p><code>BufferedOutputStream</code>；字节缓冲输出流</p><ul><li><code>java.io.BufferedOutputStream.extends.OutputStream</code></li><li>构造方法；<ul><li><code>public BufferedOutputStream(OutputStream out)</code>； 创建一个新的缓冲输出流，以将数据写入指定的底层输出流</li><li><code>public BufferedOutputStream(OutputStream out, int size)</code>；创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流</li></ul></li><li>使用方法；<ol><li>创建<code>FileOutputStream</code>对象，构造方法中绑定要输出的目的地</li><li>创建<code>BufferedOutputStream</code>对象，构造方法中传递<code>FileOutputStream</code>对象，提高<code>FileOutputStream</code>对象效率</li><li>使用<code>BufferedOutputStream</code>对象中的方法<code>write</code>，把数据写入到内部缓冲区中</li><li>使用<code>BufferedOutputStream</code>对象中的方法<code>flush</code>,把内部缓冲区中的数据，刷新到文件中</li><li>释放资源（会先调用flush方法刷新的数据，第4步可以省略）</li></ol></li></ul></li><li><p><code>BufferedInputStream</code>；字节缓冲输入流</p><ul><li><code>java.io.BufferedInputStream.extends.InputStream</code></li><li>构造方法；<ul><li><code>public BufferedInputStream(InputStream in)</code>； 创建一个新的缓冲输出流，以将数据写入指定的底层输出流</li><li><code>public BufferedInputStream(InputStream in, int size)</code>；创建具有指定缓冲区大小的<code>BufferedInputStream</code>并保存其参数，即输入流</li></ul></li><li>使用方法；<ol><li>创建<code>FileInputStream</code>对象，构造方法中绑定要读取的数据源</li><li>创建<code>BufferedInputStream</code>对象，构造方法中传递<code>FileInputStream</code>对象，提高<code>FileInputStream</code>对象效率</li><li>使用<code>BufferedInputStream</code>对象中的方法<code>read</code>，读取文件</li><li>释放资源（会先调用flush方法刷新的数据，第4步可以省略）</li></ol></li></ul></li></ul><h5 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h5><ul><li><p><code>BufferedWriter</code>；字符缓冲输出流</p><ul><li><code>java.io.BufferedWriter.extends.Writer</code></li><li>构造方法；<ul><li><code>public BufferedWriter(Writer out)</code>； 创建一个使用默认大小输出缓冲区的缓冲字符输出流</li><li><code>public BufferedWriter(Writer out, int size)</code>；创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流</li></ul></li><li>特有的成员方法；<ul><li><code>void newLine()</code>；写入一个行分隔符。会根据不同的操作系统，获取不同的行分隔符</li></ul></li><li>使用方法；<ol><li>创建<code>FileWriter</code>对象，构造方法中绑定要输出的目的地</li><li>调用字符缓冲输出流的方法write，吧数据写入到内存缓冲区中</li><li>调用字符缓冲输出流中的方法flush，把内存缓冲区中的数据，刷新到文件中</li><li>释放资源</li></ol></li></ul></li><li><p><code>BufferedReader</code>；字符缓冲输入流</p><ul><li><code>java.io.BufferedReader.extends.Reader</code></li><li>构造方法；<ul><li><code>public BufferedReader(Reader in)</code>； 创建一个使用默认大小输入缓冲区的缓冲字符输入流</li><li><code>public BufferedReader(Reader in, int size)</code>；创建一个使用指定大小输入缓冲区字符输入流</li></ul></li><li>特有的成员方法；<ul><li><code>String readLine()</code>；读取一个文本行，读取一行数据<blockquote><ul><li>行的终止符号；通过下列字符之一即可认为某行已终止（换行：<code>\n</code>,回车；<code>\r</code>,或回车后直接跟着换行<code>\r\n</code>）</li><li>返回值；包含该行内容的字符串，不包含任何终止符，如果已到达流末尾，则返回null</li></ul></blockquote></li></ul></li><li>使用方法；<ol><li>创建字符缓冲输入流对象，构造方法中传递字符输入流</li><li>使用字符缓冲输入流对象中的方法read/readLine读取文本</li><li>释放资源</li></ol></li></ul></li></ul><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><h5 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h5><ul><li>字符编码 Character Encoding : 就是一套自然语言的字符与二进制数之间的对应规则。<h5 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h5></li><li>字符集 Charset ：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。<h5 id="InputStreamReader类"><a href="#InputStreamReader类" class="headerlink" title="InputStreamReader类"></a>InputStreamReader类</h5></li><li>字节–（解码）–&gt;字符</li><li><code>java.io.InputStreamReader extends Reader</code>；从字节流到字符流的桥梁，它读取字节，并使用指定的字符集将其解码为字符</li><li>构造方法；<ul><li><code>InputStreamReader(InputStream in)</code> : 创建一个使用默认字符集的字符流。- <code>InputStreamReader(InputStream in, String charsetName)</code> : 创建一个指定字符集的字符流。<h5 id="OutputStreamWriter类"><a href="#OutputStreamWriter类" class="headerlink" title="OutputStreamWriter类"></a>OutputStreamWriter类</h5></li></ul></li><li>字符–（编码）–&gt;字节</li><li><code>java.io.OutputStreamWriter extends Writer</code>；从字符流到字节流的桥梁，使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。</li><li>构造方法；<ul><li><code>OutputStreamWriter(OutputStream out)</code> : 创建一个使用默认字符集的字符流。</li><li><code>OutputStreamWriter(OutputStream out, String charsetName)</code> : 创建一个指定字符集的字符流。</li></ul></li></ul><h4 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h4><ul><li>序列化；把对象以流的方式，写入到文件中保存，也叫写对象</li><li>反序列化；把文件中保存的对象，以流的方式读取出来，也叫读对象<h5 id="ObjectOutputStream类"><a href="#ObjectOutputStream类" class="headerlink" title="ObjectOutputStream类"></a>ObjectOutputStream类</h5></li><li>序列化。Java对象的原始数据类型写出到文件,实现对象的持久存储。</li><li>构造方法；<ul><li><code>public ObjectOutputStream(OutputStream out)</code>： 创建一个指定OutputStream的ObjectOutputStream。</li></ul></li><li>成员方法；<ul><li><code>void writerObject(Object obj)</code>；将指定的对象写入ObjectOutputStream<h5 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h5></li></ul></li><li>一个对象要想序列化，必须满足两个条件<ul><li>该类必须实现 <code>java.io.Serializable</code> 接口， <code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任<br>何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code>关键字修饰（静态也不能被序列化）。</li></ul></li></ul><h5 id="ObjectInputStream类"><a href="#ObjectInputStream类" class="headerlink" title="ObjectInputStream类"></a>ObjectInputStream类</h5><ul><li>反序列化。将之前使用ObjectOutputStream序列化的原始数据恢复为对象</li><li>构造方法；<ul><li><code>public ObjectInputStream(InputStream in)</code> ： 创建一个指定InputStream的ObjectInputStream。</li></ul></li><li>成员方法；<ul><li><code>Object readObject()</code>；从<code>ObjectInputStream</code>读取对象</li></ul></li></ul><h5 id="反序列化操作"><a href="#反序列化操作" class="headerlink" title="反序列化操作"></a>反序列化操作</h5><ul><li>类必须实现Serializable</li><li>必须存在类对应的.class文件，如果找不到该类的class文件，则抛出一个<br><code>ClassNotFoundException</code>异常。</li><li><code>InvalidClassException</code>；<ul><li>当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个 InvalidClassException 异常。发生这个异常的原因如下：<ol><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配</li><li>该类包含未知数据类型</li><li>该类没有可访问的无参数构造方法</li></ol></li><li>Serializable 接口给需要序列化的类，提供了一个序列版本号。 <code>static final long serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配</li></ul></li></ul><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java初步&quot;&gt;&lt;a href=&quot;#Java初步&quot; class=&quot;headerlink&quot; title=&quot;Java初步&quot;&gt;&lt;/a&gt;Java初步&lt;/h2&gt;&lt;h3 id=&quot;字节&quot;&gt;&lt;a href=&quot;#字节&quot; class=&quot;headerlink&quot; title=&quot;字节&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://coderjeremy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#基础-02(语法)</title>
    <link href="https://coderjeremy.github.io/2019/12/31/C-%E5%9F%BA%E7%A1%80-02-%E8%AF%AD%E6%B3%95/"/>
    <id>https://coderjeremy.github.io/2019/12/31/C-基础-02-语法/</id>
    <published>2019-12-31T07:47:31.000Z</published>
    <updated>2019-12-31T09:11:30.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul><li>值类型：存放到栈中，每次存取都会在内存中操作</li><li>引用类型：首先在栈中创建一个引用变量，绕后在堆中创建对象本身，再把这个对象所在内存的首地址赋给引用变量。</li></ul><h1 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h1><pre><code>- 整型- 浮点型- 字符型- 布尔型- 枚举型</code></pre><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><pre><code>- sbyte ：有符号，1字节，- byte  ：无符号，1字节- short ：有符号，2字节- ushort ：无符号，2字节- int ：有符号，4字节（C#整型 默认值）- uint : 无符号，4字节- long : 有符号，8字节- ulong : 无符号，8字节</code></pre><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><pre><code>- float ：单精度浮点，4字节，最多保留7位小数，123.45f/123.345F- double ： 双精度浮点，8字节，最多保留16位小数，默认double类型</code></pre><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><pre><code>- char : 2字节，存放一字符、汉字,单引号表示，&apos;a&apos;</code></pre><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><pre><code>- bool : true/false</code></pre><h2 id="枚举型"><a href="#枚举型" class="headerlink" title="枚举型"></a>枚举型</h2><h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><pre><code>- 类- 接口- 数组- 委托- 字符串</code></pre><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><pre><code>- string ： 存放多个字符，双引号表示，“abc”</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;值类型：存放到栈中，每次存取都会在内存中操作&lt;/li&gt;
&lt;li&gt;引用类型：首先在栈中创建一个引用变量，绕后在堆中创建对象本身，再
      
    
    </summary>
    
    
      <category term="C#" scheme="https://coderjeremy.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Git常用指令</title>
    <link href="https://coderjeremy.github.io/2019/12/29/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>https://coderjeremy.github.io/2019/12/29/Git常用指令/</id>
    <published>2019-12-29T10:35:18.000Z</published>
    <updated>2019-12-29T10:35:43.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git工作区域"><a href="#Git工作区域" class="headerlink" title="Git工作区域"></a>Git工作区域</h2><ul><li><p>远程仓库（Remote）<br>  备份代码，实现代码的远程管理</p></li><li><p>仓库区/本地仓库（Respository）<br>  确定的文件保存到仓库，成为一个新的版本，并且对他人可见</p></li><li><p>暂存区(Index/unStage)<br>  暂存已经修改的文件，最后统一提交到git仓库</p></li><li><p>工作区（Workspace）<br>  添加、编辑、修改文件    </p></li></ul><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><ul><li><p>在当前目录新建一个Git代码库<br><code>git init</code> </p></li><li><p>新建一个目录，将其初始化为Git代码库<br><code>git init [project-name]</code></p></li><li><p>下载一个项目<br><code>git clone [url]</code></p></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>显示当前配置<br><code>git config --list</code></li><li>显示文件状态<br><code>git status</code></li></ul><h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><ul><li>添加当前目录所有文件(work)到暂存区(index)<br><code>git add</code></li><li>添加指定文件到暂存区<br><code>git add [filename]</code></li></ul><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><ul><li>提交暂存区(index)到仓库（repo）<br><code>git commit -m [Message提交描述]</code></li></ul><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><ul><li><p>列出所有本地分支<br><code>git branch</code></p></li><li><p>列出所有远程分支<br><code>git branch -r</code></p></li></ul><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><ul><li>更新远程仓库<br><code>git remote update</code></li><li>取回远程仓库的变化，并与本地分支合并<br><code>git pull [remote][branch]</code></li><li>上传本地指定分支到远程仓库<br><code>git push [remote][branch]</code> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git工作区域&quot;&gt;&lt;a href=&quot;#Git工作区域&quot; class=&quot;headerlink&quot; title=&quot;Git工作区域&quot;&gt;&lt;/a&gt;Git工作区域&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;远程仓库（Remote）&lt;br&gt;  备份代码，实现代码的远程管理&lt;/p&gt;
&lt;/li
      
    
    </summary>
    
    
      <category term="git" scheme="https://coderjeremy.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>C#基础-01</title>
    <link href="https://coderjeremy.github.io/2019/12/29/C-%E5%9F%BA%E7%A1%80-01/"/>
    <id>https://coderjeremy.github.io/2019/12/29/C-基础-01/</id>
    <published>2019-12-29T10:32:30.000Z</published>
    <updated>2019-12-31T07:46:25.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-基础"><a href="#C-基础" class="headerlink" title="C# 基础"></a>C# 基础</h1><h2 id="C-是什么？"><a href="#C-是什么？" class="headerlink" title="C# 是什么？"></a>C# 是什么？</h2><pre><code>- MicroSoft开发。创始人Anders- 面向对象编程</code></pre><h2 id="C-的特点？"><a href="#C-的特点？" class="headerlink" title="C# 的特点？"></a>C# 的特点？</h2><pre><code>- 简单、安全- 面向对象    - 封装：将代码看作一个整体，只提供对象名和参数，提高安全性    - 继承：C#仅支持单继承    - 多态：通过继承和实现接口的方式，让类或接口中的成员表现出不同作用- 跨平台- 开发多种类型的程序</code></pre><h2 id="C-和-Java、C-的区别"><a href="#C-和-Java、C-的区别" class="headerlink" title="C# 和 Java、C++的区别"></a>C# 和 Java、C++的区别</h2><h2 id="C-和-NET"><a href="#C-和-NET" class="headerlink" title="C# 和 .NET"></a>C# 和 .NET</h2><pre><code>- .NET是一个开发平台，而C#是一种在.NET开发平台上使用的编程语言- .NET框架是一个多语言组件和执行环境，它提供一个跨语言的统一编程环境- .NET框架的目的是便于开发人员容易建立Web应用程序和Web服务，使得Internet上的各应用程序之间可以使用Web服务进行沟通</code></pre><h2 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><pre><code>一个可以快速开发、部署网站服务及应用程序的开发平台，是Windows中的一个组件- 公共语言运行时（CLR）虚拟系统- .NET Framework类库</code></pre><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><pre><code>- 提供标准的面向对象开发环境- 提供优化的代码执行环境、兼容性高- 使用JIT(just in time)技术，提高代码运行速度</code></pre><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><pre><code>1. 编程语言：C#、VB、C++、JScript2.Common Language Specification(CLS):公共语言运行规范，定义一组规则：可以通过不同的编程语言来创建Windows应用程序、ASP.NET网站程序以及在.NET Framework中所有支持的程序。3.Framework Class Library(FCL)：在FCL中包括Windows Forms（窗体程序）、ASP.NET(网站程序)、WPF(windows界面程序的框架)、WCF(Windows平台上的工作流程序)等所用到的类库文件。4.Common Language Runtime(CLR)：.NET Framework的基础，用户可以将CLR看作一个在执行时管理代码的代码，它提供内存管理、线程管理和远程处理等核心服务，并且还强制实施严格类型安全以及可靠性的管理。(类似Java虚拟机)，以CLR为目标的代码称为托管代码，不以CLR为目标的代码称为非托管代码。5.Windows API、COM+ Service：application programming interface应用程序接口6.OS</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-基础&quot;&gt;&lt;a href=&quot;#C-基础&quot; class=&quot;headerlink&quot; title=&quot;C# 基础&quot;&gt;&lt;/a&gt;C# 基础&lt;/h1&gt;&lt;h2 id=&quot;C-是什么？&quot;&gt;&lt;a href=&quot;#C-是什么？&quot; class=&quot;headerlink&quot; title=&quot;C# 
      
    
    </summary>
    
    
      <category term="C#" scheme="https://coderjeremy.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C#学习笔记(一)</title>
    <link href="https://coderjeremy.github.io/2019/12/19/C-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://coderjeremy.github.io/2019/12/19/C-学习笔记/</id>
    <published>2019-12-19T01:14:14.000Z</published>
    <updated>2019-12-19T01:44:41.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-简介"><a href="#C-简介" class="headerlink" title="C#简介"></a>C#简介</h2><ul><li>Microsoft开发</li><li>面向对象</li><li>结构化</li></ul><h2 id="C-功能"><a href="#C-功能" class="headerlink" title="C# 功能"></a>C# 功能</h2><ul><li>布尔条件（Boolean Conditions)</li><li>自动垃圾回收(Automatic Garbase Collection)</li><li>标准库(Standard Library)</li><li>组件版本(Assembly Versioning)</li><li>属性(Properties）和事件（Events）</li><li>委托（Delegates) 和事件管理（Events Management)</li><li>泛型（Generics）</li><li>索引器(Indexers)</li><li>条件编译（Conditional Compilation)</li><li>简单的多线程(Multithreading)</li><li>LINQ和Lambda表达式</li><li>集成Winodws</li></ul><h2 id="C-环境"><a href="#C-环境" class="headerlink" title="C# 环境"></a>C# 环境</h2><h3 id="Net框架（-Net-Framework"><a href="#Net框架（-Net-Framework" class="headerlink" title=".Net框架（.Net Framework)"></a>.Net框架（.Net Framework)</h3><p>用于开发</p><ul><li>Windows应用程序</li><li>Web 应用程序</li><li>Web 服务</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;C-简介&quot;&gt;&lt;a href=&quot;#C-简介&quot; class=&quot;headerlink&quot; title=&quot;C#简介&quot;&gt;&lt;/a&gt;C#简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Microsoft开发&lt;/li&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;结构化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id
      
    
    </summary>
    
    
      <category term="C#" scheme="https://coderjeremy.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>HEXO常用指令</title>
    <link href="https://coderjeremy.github.io/2019/07/09/HEXO%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>https://coderjeremy.github.io/2019/07/09/HEXO常用指令/</id>
    <published>2019-07-08T16:12:23.000Z</published>
    <updated>2019-07-08T16:36:17.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li>打开hexo目录：右键 <code>git bash here</code></li><li>新建文章：<code>hexo new 文章名称</code></li><li>新建草稿：<code>hexo publish 文章名称</code></li><li>生成：<code>hexo g</code></li><li>本地服务器：<code>hexo s</code></li><li>部署：<code>hexo d</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用指令&quot;&gt;&lt;a href=&quot;#常用指令&quot; class=&quot;headerlink&quot; title=&quot;常用指令&quot;&gt;&lt;/a&gt;常用指令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开hexo目录：右键 &lt;code&gt;git bash here&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建文章：&lt;co
      
    
    </summary>
    
      <category term="Hexo搭建" scheme="https://coderjeremy.github.io/categories/Hexo%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://coderjeremy.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取猫眼电影排行榜</title>
    <link href="https://coderjeremy.github.io/2019/01/18/Python%E7%88%AC%E5%8F%96%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    <id>https://coderjeremy.github.io/2019/01/18/Python爬取猫眼电影排行榜/</id>
    <published>2019-01-18T12:44:16.000Z</published>
    <updated>2019-07-08T16:25:45.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python爬取猫眼电影排行榜"><a href="#Python爬取猫眼电影排行榜" class="headerlink" title="Python爬取猫眼电影排行榜"></a>Python爬取猫眼电影排行榜</h1><ul><li>requests 获取 html</li><li>lxml 解析 html </li><li>xpath 定位元素</li><li>json 存文件</li></ul><h2 id="自己写的"><a href="#自己写的" class="headerlink" title="自己写的"></a>自己写的</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 存储排名的列表</span></span><br><span class="line">rank_list = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(offset)</span>:</span></span><br><span class="line">    <span class="string">'''爬取猫眼电影排行榜'''</span></span><br><span class="line">    url = <span class="string">"https://maoyan.com/board/4?offset=&#123;offset&#125;"</span>.format(offset=offset)</span><br><span class="line">    html_data = requests.get(url).text</span><br><span class="line">    <span class="comment"># print(html_data)</span></span><br><span class="line">    selector = html.fromstring(html_data)</span><br><span class="line">    <span class="comment"># print(selector)</span></span><br><span class="line"></span><br><span class="line">    topper = selector.xpath(<span class="string">'//dd'</span>)</span><br><span class="line">    <span class="comment"># print(topper)</span></span><br><span class="line">    temp = []</span><br><span class="line">    <span class="keyword">for</span> movie <span class="keyword">in</span> topper:</span><br><span class="line">        <span class="comment"># 排名</span></span><br><span class="line">        rank = movie.xpath(<span class="string">'i/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"排名:&#123;&#125;"</span>.format(rank))</span><br><span class="line">        <span class="comment"># 电影名</span></span><br><span class="line">        name = movie.xpath(<span class="string">'div/div/div/p/a/@title'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"《&#123;&#125;》"</span>.format(name))</span><br><span class="line">        <span class="comment"># 主演</span></span><br><span class="line">        star = movie.xpath(<span class="string">'div/div/div/p[@class="star"]/text()'</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        print(star)</span><br><span class="line">        <span class="comment"># 上映时间</span></span><br><span class="line">        time = movie.xpath(<span class="string">'div/div/div/p[@class="releasetime"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(time)</span><br><span class="line">        <span class="comment"># 评分</span></span><br><span class="line">        score1 = movie.xpath(<span class="string">'div/div/div/p[@class="score"]/i[1]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"评分:&#123;&#125;"</span>.format(score1), end=<span class="string">''</span>)</span><br><span class="line">        score2 = movie.xpath(<span class="string">'div/div/div/p[@class="score"]/i[2]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"&#123;&#125;"</span>.format(score2))</span><br><span class="line">        <span class="comment"># 封面,网站两个&lt;img&gt;标签，两个src资源无法区分，通过pycharm获取html源代码,src标签是不一样的</span></span><br><span class="line">        image = movie.xpath(<span class="string">'a[@class="image-link"]/img/@data-src'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(image)</span><br><span class="line">        print(<span class="string">"-"</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        rank_list.append(&#123;</span><br><span class="line">            <span class="string">'rank'</span>: rank,</span><br><span class="line">            <span class="string">'name'</span>: name,</span><br><span class="line">            <span class="string">'star'</span>: star,</span><br><span class="line">            <span class="string">'time'</span>: time,</span><br><span class="line">            <span class="string">'score'</span>: score1+score2,</span><br><span class="line">            <span class="string">'image'</span>: image</span><br><span class="line">        &#125;)</span><br><span class="line">        temp.append(&#123;</span><br><span class="line">            <span class="string">'rank'</span>: rank,</span><br><span class="line">            <span class="string">'name'</span>: name,</span><br><span class="line">            <span class="string">'star'</span>: star,</span><br><span class="line">            <span class="string">'time'</span>: time,</span><br><span class="line">            <span class="string">'score'</span>: score1 + score2,</span><br><span class="line">            <span class="string">'image'</span>: image</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment"># print("一共爬取到&#123;&#125;部电影".format(len(rank_list)))</span></span><br><span class="line">    <span class="comment"># for movie in rank_list:</span></span><br><span class="line">    <span class="comment">#     print(movie)</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬一次写一次，爬一页写一次，爬完写一次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="string">'''写入文件'''</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'Maoyan_Rank.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(type(json.dumps(content)))</span><br><span class="line">        f.write(json.dumps(content, ensure_ascii=<span class="keyword">False</span>)+<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#spider()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> spider(i):</span><br><span class="line">            write_to_file(item)</span><br><span class="line"></span><br><span class="line">     <span class="comment"># print("一共爬取到&#123;&#125;部电影".format(len(rank_list)))</span></span><br><span class="line">     <span class="comment"># for movie in rank_list:</span></span><br><span class="line">     <span class="comment">#    print(movie)</span></span><br><span class="line"></span><br><span class="line">     <span class="comment"># f = open('Maoyan_Rank.txt', 'w')</span></span><br><span class="line">     <span class="comment"># f.write(item for item in rank_list)</span></span><br></pre></td></tr></table></figure><h2 id="书上用的正则表达式，这里跳过"><a href="#书上用的正则表达式，这里跳过" class="headerlink" title="书上用的正则表达式，这里跳过"></a>书上用的正则表达式，这里跳过</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span></span><br><span class="line">                      <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    <span class="comment"># get 请求 成功返回 状态码 = 200</span></span><br><span class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># print(res.text)</span></span><br><span class="line">        <span class="keyword">return</span> res.text</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(offset)</span>:</span></span><br><span class="line">    <span class="string">'''爬取猫眼电影排行榜'''</span></span><br><span class="line">    url = <span class="string">"https://maoyan.com/board/4?offset=&#123;&#125;"</span>.format(offset)</span><br><span class="line">    html_data = get_one_page(url)</span><br><span class="line">    <span class="comment"># print(html_data)</span></span><br><span class="line">    selector = html.fromstring(html_data)</span><br><span class="line">    <span class="comment"># print(selector)</span></span><br><span class="line"></span><br><span class="line">    topper = selector.xpath(<span class="string">'//dd'</span>)</span><br><span class="line">    <span class="comment"># print(topper)</span></span><br><span class="line"></span><br><span class="line">    rank_list = []</span><br><span class="line">    <span class="keyword">for</span> movie <span class="keyword">in</span> topper:</span><br><span class="line">        <span class="comment"># 排名</span></span><br><span class="line">        rank = movie.xpath(<span class="string">'i/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"排名:&#123;&#125;"</span>.format(rank))</span><br><span class="line">        <span class="comment"># 电影名</span></span><br><span class="line">        name = movie.xpath(<span class="string">'div/div/div/p/a/@title'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"《&#123;&#125;》"</span>.format(name))</span><br><span class="line">        <span class="comment"># 主演</span></span><br><span class="line">        star = movie.xpath(<span class="string">'div/div/div/p[@class="star"]/text()'</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        print(star)</span><br><span class="line">        <span class="comment"># 上映时间</span></span><br><span class="line">        time = movie.xpath(<span class="string">'div/div/div/p[@class="releasetime"]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(time)</span><br><span class="line">        <span class="comment"># 评分</span></span><br><span class="line">        score1 = movie.xpath(<span class="string">'div/div/div/p[@class="score"]/i[1]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"评分:&#123;&#125;"</span>.format(score1), end=<span class="string">''</span>)</span><br><span class="line">        score2 = movie.xpath(<span class="string">'div/div/div/p[@class="score"]/i[2]/text()'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(<span class="string">"&#123;&#125;"</span>.format(score2))</span><br><span class="line">        <span class="comment"># 封面,网站两个&lt;img&gt;标签，两个src资源无法区分，通过pycharm获取html源代码,src标签是不一样的</span></span><br><span class="line">        image = movie.xpath(<span class="string">'a[@class="image-link"]/img/@data-src'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(image)</span><br><span class="line">        print(<span class="string">"-"</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        rank_list.append(&#123;</span><br><span class="line">            <span class="string">'rank'</span>: rank,</span><br><span class="line">            <span class="string">'name'</span>: name,</span><br><span class="line">            <span class="string">'star'</span>: star,</span><br><span class="line">            <span class="string">'time'</span>: time,</span><br><span class="line">            <span class="string">'score'</span>: score1+score2,</span><br><span class="line">            <span class="string">'image'</span>: image</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment"># print("一共爬取到&#123;&#125;部电影".format(len(rank_list)))</span></span><br><span class="line">    <span class="comment"># for movie in rank_list:</span></span><br><span class="line">    <span class="comment">#     print(movie)</span></span><br><span class="line">    <span class="keyword">return</span> rank_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="string">'''写入文件'''</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(type(json.dumps(content)))</span><br><span class="line">        f.write(json.dumps(content, ensure_ascii=<span class="keyword">False</span>)+<span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#spider()</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> spider(i):</span><br><span class="line">            write_to_file(item)</span><br></pre></td></tr></table></figure><h2 id="爬取结果"><a href="#爬取结果" class="headerlink" title="爬取结果"></a>爬取结果</h2><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\Anaconda3\python.exe F:/Python+/Spider/Maoyan.py</span><br><span class="line">排名:1</span><br><span class="line">《霸王别姬》</span><br><span class="line">主演：张国荣,张丰毅,巩俐</span><br><span class="line">上映时间：1993-01-01</span><br><span class="line">评分:9.6</span><br><span class="line">https://p1.meituan.net/movie/20803f59291c47e1e116c11963ce019e68711.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:2</span></span><br><span class="line"><span class="emphasis">《肖申克的救赎》</span></span><br><span class="line"><span class="emphasis">主演：蒂姆·罗宾斯,摩根·弗里曼,鲍勃·冈顿</span></span><br><span class="line"><span class="emphasis">上映时间：1994-10-14(美国)</span></span><br><span class="line"><span class="emphasis">评分:9.5</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/283292171619cdfd5b240c8fd093f1eb255670.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:3</span><br><span class="line">《罗马假日》</span><br><span class="line">主演：格利高里·派克,奥黛丽·赫本,埃迪·艾伯特</span><br><span class="line">上映时间：1953-09-02(美国)</span><br><span class="line">评分:9.1</span><br><span class="line">https://p0.meituan.net/movie/54617769d96807e4d81804284ffe2a27239007.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:4</span></span><br><span class="line"><span class="emphasis">《这个杀手不太冷》</span></span><br><span class="line"><span class="emphasis">主演：让·雷诺,加里·奥德曼,娜塔莉·波特曼</span></span><br><span class="line"><span class="emphasis">上映时间：1994-09-14(法国)</span></span><br><span class="line"><span class="emphasis">评分:9.5</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/e55ec5d18ccc83ba7db68caae54f165f95924.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:5</span><br><span class="line">《教父》</span><br><span class="line">主演：马龙·白兰度,阿尔·帕西诺,詹姆斯·肯恩</span><br><span class="line">上映时间：1972-03-24(美国)</span><br><span class="line">评分:9.3</span><br><span class="line">https://p1.meituan.net/movie/f5a924f362f050881f2b8f82e852747c118515.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:6</span></span><br><span class="line"><span class="emphasis">《泰坦尼克号》</span></span><br><span class="line"><span class="emphasis">主演：莱昂纳多·迪卡普里奥,凯特·温丝莱特,比利·赞恩</span></span><br><span class="line"><span class="emphasis">上映时间：1998-04-03</span></span><br><span class="line"><span class="emphasis">评分:9.5</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/0699ac97c82cf01638aa5023562d6134351277.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:7</span><br><span class="line">《唐伯虎点秋香》</span><br><span class="line">主演：周星驰,巩俐,郑佩佩</span><br><span class="line">上映时间：1993-07-01(中国香港)</span><br><span class="line">评分:9.2</span><br><span class="line">https://p0.meituan.net/movie/da64660f82b98cdc1b8a3804e69609e041108.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:8</span></span><br><span class="line"><span class="emphasis">《千与千寻》</span></span><br><span class="line"><span class="emphasis">主演：柊瑠美,入野自由,夏木真理</span></span><br><span class="line"><span class="emphasis">上映时间：2001-07-20(日本)</span></span><br><span class="line"><span class="emphasis">评分:9.3</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/b076ce63e9860ecf1ee9839badee5228329384.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:9</span><br><span class="line">《魂断蓝桥》</span><br><span class="line">主演：费雯·丽,罗伯特·泰勒,露塞尔·沃特森</span><br><span class="line">上映时间：1940-05-17(美国)</span><br><span class="line">评分:9.2</span><br><span class="line">https://p0.meituan.net/movie/46c29a8b8d8424bdda7715e6fd779c66235684.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:10</span></span><br><span class="line"><span class="emphasis">《乱世佳人》</span></span><br><span class="line"><span class="emphasis">主演：费雯·丽,克拉克·盖博,奥利维娅·德哈维兰</span></span><br><span class="line"><span class="emphasis">上映时间：1939-12-15(美国)</span></span><br><span class="line"><span class="emphasis">评分:9.1</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/230e71d398e0c54730d58dc4bb6e4cca51662.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:11</span><br><span class="line">《天空之城》</span><br><span class="line">主演：寺田农,鹫尾真知子,龟山助清</span><br><span class="line">上映时间：1992</span><br><span class="line">评分:9.1</span><br><span class="line">https://p1.meituan.net/movie/ba1ed511668402605ed369350ab779d6319397.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:12</span></span><br><span class="line"><span class="emphasis">《喜剧之王》</span></span><br><span class="line"><span class="emphasis">主演：周星驰,莫文蔚,张柏芝</span></span><br><span class="line"><span class="emphasis">上映时间：1999-02-13(中国香港)</span></span><br><span class="line"><span class="emphasis">评分:9.2</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/18e3191039d5e71562477659301f04aa61905.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:13</span><br><span class="line">《辛德勒的名单》</span><br><span class="line">主演：连姆·尼森,拉尔夫·费因斯,本·金斯利</span><br><span class="line">上映时间：1993-12-15(美国)</span><br><span class="line">评分:9.2</span><br><span class="line">https://p1.meituan.net/movie/39ed7a0941a3604bba78d299b11a18ce119679.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:14</span></span><br><span class="line"><span class="emphasis">《大闹天宫》</span></span><br><span class="line"><span class="emphasis">主演：邱岳峰,毕克,富润生</span></span><br><span class="line"><span class="emphasis">上映时间：1965-12-31</span></span><br><span class="line"><span class="emphasis">评分:9.0</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/14a7b337e8063e3ce05a5993ed80176b74208.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:15</span><br><span class="line">《音乐之声》</span><br><span class="line">主演：朱莉·安德鲁斯,克里斯托弗·普卢默,埃琳诺·帕克</span><br><span class="line">上映时间：1965-03-02(美国)</span><br><span class="line">评分:9.0</span><br><span class="line">https://p1.meituan.net/movie/6bc004d57358ee6875faa5e9a1239140128550.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:16</span></span><br><span class="line"><span class="emphasis">《剪刀手爱德华》</span></span><br><span class="line"><span class="emphasis">主演：约翰尼·德普,薇诺娜·瑞德,黛安·韦斯特</span></span><br><span class="line"><span class="emphasis">上映时间：1990-12-06(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/0e91ffcfa7e53449216cc29ee8af513a75791.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:17</span><br><span class="line">《春光乍泄》</span><br><span class="line">主演：张国荣,梁朝伟,张震</span><br><span class="line">上映时间：1997-05-30(中国香港)</span><br><span class="line">评分:9.2</span><br><span class="line">https://p0.meituan.net/movie/ae7245920d95c03765fe1615f3a1fe3865785.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:18</span></span><br><span class="line"><span class="emphasis">《美丽人生》</span></span><br><span class="line"><span class="emphasis">主演：罗伯托·贝尼尼,尼可莱塔·布拉斯基,乔治·坎塔里尼</span></span><br><span class="line"><span class="emphasis">上映时间：1997-12-20(意大利)</span></span><br><span class="line"><span class="emphasis">评分:9.3</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/43d259ecbcd53e8bbe902632772281d6327525.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:19</span><br><span class="line">《海上钢琴师》</span><br><span class="line">主演：蒂姆·罗斯,普路特·泰勒·文斯,比尔·努恩</span><br><span class="line">上映时间：1998-10-28(意大利)</span><br><span class="line">评分:9.2</span><br><span class="line">https://p1.meituan.net/movie/c15b7623cce2f51c75562a3baefe507b68290.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:20</span></span><br><span class="line"><span class="emphasis">《黑客帝国》</span></span><br><span class="line"><span class="emphasis">主演：基努·里维斯,凯瑞-安·莫斯,劳伦斯·菲什伯恩</span></span><br><span class="line"><span class="emphasis">上映时间：2000-01-14</span></span><br><span class="line"><span class="emphasis">评分:9.0</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/d981a12f59d3cc92ff666094404ad8f0211220.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:21</span><br><span class="line">《加勒比海盗》</span><br><span class="line">主演：约翰尼·德普,凯拉·奈特莉,奥兰多·布鲁姆</span><br><span class="line">上映时间：2003-11-21</span><br><span class="line">评分:8.9</span><br><span class="line">https://p1.meituan.net/movie/b449893ebc63d5c54eb4a5b60341f334383831.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:22</span></span><br><span class="line"><span class="emphasis">《指环王3：王者无敌》</span></span><br><span class="line"><span class="emphasis">主演：伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒</span></span><br><span class="line"><span class="emphasis">上映时间：2004-03-15</span></span><br><span class="line"><span class="emphasis">评分:9.2</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/932bdfbef5be3543e6b136246aeb99b8123736.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:23</span><br><span class="line">《哈利·波特与魔法石》</span><br><span class="line">主演：丹尼尔·雷德克里夫,鲁伯特·格林特,艾玛·沃特森</span><br><span class="line">上映时间：2002-01-26</span><br><span class="line">评分:9.1</span><br><span class="line">https://p1.meituan.net/movie/aacb9ed2a6601bfe515ef0970add1715623792.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:24</span></span><br><span class="line"><span class="emphasis">《无间道》</span></span><br><span class="line"><span class="emphasis">主演：刘德华,梁朝伟,黄秋生</span></span><br><span class="line"><span class="emphasis">上映时间：2003-09-05</span></span><br><span class="line"><span class="emphasis">评分:9.1</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/0d93b5b585ce29c6688e43f3989fb41f86421.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:25</span><br><span class="line">《射雕英雄传之东成西就》</span><br><span class="line">主演：张国荣,梁朝伟,张学友</span><br><span class="line">上映时间：1993-02-05(中国香港)</span><br><span class="line">评分:8.9</span><br><span class="line">https://p1.meituan.net/movie/53b6f0b66882a53b08896c92076515a8236400.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:26</span></span><br><span class="line"><span class="emphasis">《楚门的世界》</span></span><br><span class="line"><span class="emphasis">主演：金·凯瑞,劳拉·琳妮,诺亚·艾默里奇</span></span><br><span class="line"><span class="emphasis">上映时间：1998-06-01(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/8959888ee0c399b0fe53a714bc8a5a17460048.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:27</span><br><span class="line">《蝙蝠侠：黑暗骑士》</span><br><span class="line">主演：克里斯蒂安·贝尔,希斯·莱杰,阿伦·伊克哈特</span><br><span class="line">上映时间：2008-07-18(美国)</span><br><span class="line">评分:9.3</span><br><span class="line">https://p0.meituan.net/movie/d12a1c198ad9ffac72b5db57feacb449294699.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:28</span></span><br><span class="line"><span class="emphasis">《教父2》</span></span><br><span class="line"><span class="emphasis">主演：阿尔·帕西诺,罗伯特·德尼罗,黛安·基顿</span></span><br><span class="line"><span class="emphasis">上映时间：1974-12-12(美国)</span></span><br><span class="line"><span class="emphasis">评分:9.0</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/7bac8bfa6739c18620065132ce9c64fa85110.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:29</span><br><span class="line">《指环王2：双塔奇兵》</span><br><span class="line">主演：伊莱贾·伍德,伊恩·麦克莱恩,丽芙·泰勒</span><br><span class="line">上映时间：2003-04-25</span><br><span class="line">评分:9.1</span><br><span class="line">https://p0.meituan.net/movie/5cfa597a98b35ee4ee598695942641ba287922.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:30</span></span><br><span class="line"><span class="emphasis">《机器人总动员》</span></span><br><span class="line"><span class="emphasis">主演：本·贝尔特,艾丽莎·奈特,杰夫·格尔林</span></span><br><span class="line"><span class="emphasis">上映时间：2008-06-27(美国)</span></span><br><span class="line"><span class="emphasis">评分:9.3</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/4592eef6b6dffcd1d950f55f41ab098f239816.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:31</span><br><span class="line">《天堂电影院》</span><br><span class="line">主演：菲利浦·诺瓦雷,赛尔乔·卡斯特利托,蒂兹亚娜·罗达托</span><br><span class="line">上映时间：1988-11-17(意大利)</span><br><span class="line">评分:9.2</span><br><span class="line">https://p1.meituan.net/movie/618e57ddb3173de6bbf2e278946b11f279679.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:32</span></span><br><span class="line"><span class="emphasis">《活着》</span></span><br><span class="line"><span class="emphasis">主演：葛优,巩俐,牛犇</span></span><br><span class="line"><span class="emphasis">上映时间：1994-05-18(法国)</span></span><br><span class="line"><span class="emphasis">评分:9.0</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/4c41068ef7608c1d4fbfbe6016e589f7204391.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:33</span><br><span class="line">《拯救大兵瑞恩》</span><br><span class="line">主演：汤姆·汉克斯,马特·达蒙,汤姆·塞兹摩尔</span><br><span class="line">上映时间：1998-07-24(美国)</span><br><span class="line">评分:8.9</span><br><span class="line">https://p1.meituan.net/movie/779bcc212a50a2526343362778f6b63c334618.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:34</span></span><br><span class="line"><span class="emphasis">《哈尔的移动城堡》</span></span><br><span class="line"><span class="emphasis">主演：倍赏千惠子,木村拓哉,美轮明宏</span></span><br><span class="line"><span class="emphasis">上映时间：2004-11-20(日本)</span></span><br><span class="line"><span class="emphasis">评分:9.0</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/0127b451d5b8f0679c6f81c8ed414bb2432442.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:35</span><br><span class="line">《阿凡达》</span><br><span class="line">主演：萨姆·沃辛顿,佐伊·索尔达娜,米歇尔·罗德里格兹</span><br><span class="line">上映时间：2010-01-04</span><br><span class="line">评分:9.1</span><br><span class="line">https://p1.meituan.net/movie/91f575ec93f019f428d1f33e3ceca7c5115495.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:36</span></span><br><span class="line"><span class="emphasis">《盗梦空间》</span></span><br><span class="line"><span class="emphasis">主演：莱昂纳多·迪卡普里奥,渡边谦,约瑟夫·高登-莱维特</span></span><br><span class="line"><span class="emphasis">上映时间：2010-09-01</span></span><br><span class="line"><span class="emphasis">评分:9.2</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/2f344a9f9575edbcae9f0abe0578bc90339773.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:37</span><br><span class="line">《忠犬八公的故事》</span><br><span class="line">主演：Forest,理查·基尔,琼·艾伦</span><br><span class="line">上映时间：2010-03-12(英国)</span><br><span class="line">评分:9.3</span><br><span class="line">https://p0.meituan.net/movie/7787c10ad5e95b03cf83ef9473500d8e282796.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:38</span></span><br><span class="line"><span class="emphasis">《幽灵公主》</span></span><br><span class="line"><span class="emphasis">主演：松田洋治,石田百合子,田中裕子</span></span><br><span class="line"><span class="emphasis">上映时间：1997-07-12(日本)</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/6ab1882a217e848acceb240365043d53329196.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:39</span><br><span class="line">《搏击俱乐部》</span><br><span class="line">主演：爱德华·哈里森·诺顿,布拉德·皮特,海伦娜·伯翰·卡特</span><br><span class="line">上映时间：1999-10-15(美国)</span><br><span class="line">评分:8.8</span><br><span class="line">https://p1.meituan.net/movie/c5e76795bf7a78b12a2ffabb4a0c5c11112921.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:40</span></span><br><span class="line"><span class="emphasis">《东邪西毒》</span></span><br><span class="line"><span class="emphasis">主演：张国荣,梁朝伟,刘嘉玲</span></span><br><span class="line"><span class="emphasis">上映时间：1994-09-17</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/7e471a9171a410ebc9413b2f1de67afc130067.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:41</span><br><span class="line">《风之谷》</span><br><span class="line">主演：岛本须美,永井一郎,坂本千夏</span><br><span class="line">上映时间：1992</span><br><span class="line">评分:8.9</span><br><span class="line">https://p0.meituan.net/movie/4f9638ba234c3fb673f23a09968db875371576.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:42</span></span><br><span class="line"><span class="emphasis">《疯狂原始人》</span></span><br><span class="line"><span class="emphasis">主演：尼古拉斯·凯奇,艾玛·斯通,瑞安·雷诺兹</span></span><br><span class="line"><span class="emphasis">上映时间：2013-04-20</span></span><br><span class="line"><span class="emphasis">评分:9.5</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/d5e5e53ef9bbd98223e83df261b51b84103223.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:43</span><br><span class="line">《当幸福来敲门》</span><br><span class="line">主演：威尔·史密斯,贾登·史密斯,坦迪·牛顿</span><br><span class="line">上映时间：2008-01-17</span><br><span class="line">评分:8.9</span><br><span class="line">https://p1.meituan.net/movie/5896de3c1474277730e321c9b1db04a9205644.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:44</span></span><br><span class="line"><span class="emphasis">《V字仇杀队》</span></span><br><span class="line"><span class="emphasis">主演：娜塔莉·波特曼,雨果·维文,斯蒂芬·瑞</span></span><br><span class="line"><span class="emphasis">上映时间：2006-03-17(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/4a4c84aa103ab47202f1aa907c5542a4128882.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:45</span><br><span class="line">《十二怒汉》</span><br><span class="line">主演：亨利·方达,李·科布,马丁·鲍尔萨姆</span><br><span class="line">上映时间：1957-04-13(美国)</span><br><span class="line">评分:9.1</span><br><span class="line">https://p0.meituan.net/movie/df15efd261060d3094a73ef679888d4f238149.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:46</span></span><br><span class="line"><span class="emphasis">《放牛班的春天》</span></span><br><span class="line"><span class="emphasis">主演：热拉尔·朱尼奥,让-巴蒂斯特·莫尼耶,玛丽·布奈尔</span></span><br><span class="line"><span class="emphasis">上映时间：2004-10-16</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/7cd18fcf0b4f9180500124711e81492994030.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:47</span><br><span class="line">《三傻大闹宝莱坞》</span><br><span class="line">主演：阿米尔·汗,黄渤,卡琳娜·卡普</span><br><span class="line">上映时间：2011-12-08</span><br><span class="line">评分:9.1</span><br><span class="line">https://p0.meituan.net/movie/4bb144bc0a674ba6908349018fd092e6330929.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:48</span></span><br><span class="line"><span class="emphasis">《勇敢的心》</span></span><br><span class="line"><span class="emphasis">主演：梅尔·吉布森,苏菲·玛索,帕特里克·麦高汉</span></span><br><span class="line"><span class="emphasis">上映时间：1995-05-24(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/f8e9d5a90224746d15dfdbd53d4fae3d209420.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:49</span><br><span class="line">《黑客帝国3：矩阵革命》</span><br><span class="line">主演：基努·里维斯,雨果·维文,凯瑞-安·莫斯</span><br><span class="line">上映时间：2003-11-05</span><br><span class="line">评分:8.8</span><br><span class="line">https://p1.meituan.net/movie/5ca6ffcbb994a51cd6215e7c4fff2d9b71039.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:50</span></span><br><span class="line"><span class="emphasis">《速度与激情5》</span></span><br><span class="line"><span class="emphasis">主演：范·迪塞尔,保罗·沃克,道恩·强森</span></span><br><span class="line"><span class="emphasis">上映时间：2011-05-12</span></span><br><span class="line"><span class="emphasis">评分:9.2</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/1d0fa86bcf7a44484b9c16ac6af5be68191952.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:51</span><br><span class="line">《驯龙高手》</span><br><span class="line">主演：杰伊·巴鲁切尔,杰拉德·巴特勒,亚美莉卡·费雷拉</span><br><span class="line">上映时间：2010-05-14</span><br><span class="line">评分:9.0</span><br><span class="line">https://p1.meituan.net/movie/8194ae885ed9419aadf35c196af86ba4239039.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:52</span></span><br><span class="line"><span class="emphasis">《少年派的奇幻漂流》</span></span><br><span class="line"><span class="emphasis">主演：苏拉·沙玛,伊尔凡·可汗,塔布</span></span><br><span class="line"><span class="emphasis">上映时间：2012-11-22</span></span><br><span class="line"><span class="emphasis">评分:9.1</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/34998e31c6d07475f1add6b8b16fd21d192579.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:53</span><br><span class="line">《神偷奶爸》</span><br><span class="line">主演：史蒂夫·卡瑞尔,杰森·席格尔,拉塞尔·布兰德</span><br><span class="line">上映时间：2010-07-09(美国)</span><br><span class="line">评分:9.0</span><br><span class="line">https://p0.meituan.net/movie/85c2bfba6025bfbfb53291ae5924c215308805.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:54</span></span><br><span class="line"><span class="emphasis">《闻香识女人》</span></span><br><span class="line"><span class="emphasis">主演：阿尔·帕西诺,克里斯·奥唐纳,加布里埃尔·安瓦尔</span></span><br><span class="line"><span class="emphasis">上映时间：1992-12-23(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/7cb7965469cb7ff95613714389f1ea3d87743.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:55</span><br><span class="line">《断背山》</span><br><span class="line">主演：希斯·莱杰,杰克·吉伦哈尔,米歇尔·威廉姆斯</span><br><span class="line">上映时间：2006-01-13(美国)</span><br><span class="line">评分:9.0</span><br><span class="line">https://p0.meituan.net/movie/e71affe126eeb4f8bfcc738cbddeebc8288766.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:56</span></span><br><span class="line"><span class="emphasis">《飞屋环游记》</span></span><br><span class="line"><span class="emphasis">主演：爱德华·阿斯纳,乔丹·长井,鲍勃·彼德森</span></span><br><span class="line"><span class="emphasis">上映时间：2009-08-04</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/47dd790e19dad72b50580641de5608c5199014.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:57</span><br><span class="line">《大话西游之月光宝盒》</span><br><span class="line">主演：周星驰,莫文蔚,吴孟达</span><br><span class="line">上映时间：2014-10-24</span><br><span class="line">评分:9.6</span><br><span class="line">https://p0.meituan.net/movie/92eb862c42c49f8e41e459c369c4512b226610.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:58</span></span><br><span class="line"><span class="emphasis">《飞越疯人院》</span></span><br><span class="line"><span class="emphasis">主演：杰克·尼科尔森,路易丝·弗莱彻,威尔·萨姆森</span></span><br><span class="line"><span class="emphasis">上映时间：1975-11-19(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/4dddd98730274c3b1464ff0a0ad195e5233381.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:59</span><br><span class="line">《怦然心动》</span><br><span class="line">主演：玛德琳·卡罗尔,卡兰·麦克奥利菲,艾丹·奎因</span><br><span class="line">上映时间：2010-08-06(美国)</span><br><span class="line">评分:8.9</span><br><span class="line">https://p0.meituan.net/movie/457a35fda360cb72090fa6dcbd1db3c1275333.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:60</span></span><br><span class="line"><span class="emphasis">《美国往事》</span></span><br><span class="line"><span class="emphasis">主演：罗伯特·德尼罗,詹姆斯·伍兹,伊丽莎白·麦戈文</span></span><br><span class="line"><span class="emphasis">上映时间：1984-02-17(美国)</span></span><br><span class="line"><span class="emphasis">评分:9.1</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/92198a6fc8c3f5d13aa1bdf203572c0f99438.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:61</span><br><span class="line">《致命魔术》</span><br><span class="line">主演：休·杰克曼,克里斯蒂安·贝尔,迈克尔·凯恩</span><br><span class="line">上映时间：2006-10-20(美国)</span><br><span class="line">评分:8.8</span><br><span class="line">https://p1.meituan.net/movie/75c0d3eb584be030a01f2e26741a8f41251454.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:62</span></span><br><span class="line"><span class="emphasis">《鬼子来了》</span></span><br><span class="line"><span class="emphasis">主演：姜文,姜宏波,陈强</span></span><br><span class="line"><span class="emphasis">上映时间：2000-05-12(法国戛纳)</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/0b507aa44c4dfbbcc91949b69b1b39a168922.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:63</span><br><span class="line">《无敌破坏王》</span><br><span class="line">主演：约翰·C·赖利,萨拉·西尔弗曼,简·林奇</span><br><span class="line">上映时间：2012-11-06</span><br><span class="line">评分:9.1</span><br><span class="line">https://p0.meituan.net/movie/fcc17667b8343131101eeb4c67d90bf9150883.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:64</span></span><br><span class="line"><span class="emphasis">《美丽心灵》</span></span><br><span class="line"><span class="emphasis">主演：罗素·克洛,詹妮弗·康纳利,艾德·哈里斯</span></span><br><span class="line"><span class="emphasis">上映时间：2001-12-21(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/7b7d1f8aa36d7a15463ce6942708a1a7265296.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:65</span><br><span class="line">《蝙蝠侠：黑暗骑士崛起》</span><br><span class="line">主演：克里斯蒂安·贝尔,迈克尔·凯恩,加里·奥德曼</span><br><span class="line">上映时间：2012-08-27</span><br><span class="line">评分:8.9</span><br><span class="line">https://p1.meituan.net/movie/96bb58f3e9d213fb0438987d16d27561379209.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:66</span></span><br><span class="line"><span class="emphasis">《夜访吸血鬼》</span></span><br><span class="line"><span class="emphasis">主演：汤姆·克鲁斯,布拉德·皮特,克尔斯滕·邓斯特</span></span><br><span class="line"><span class="emphasis">上映时间：1994-11-11(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/7ec873ba943f13e3c63789d899bd0e23256871.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:67</span><br><span class="line">《倩女幽魂》</span><br><span class="line">主演：张国荣,王祖贤,午马</span><br><span class="line">上映时间：2011-04-30</span><br><span class="line">评分:9.2</span><br><span class="line">https://p1.meituan.net/movie/6d0510f326bf145dcf49a901fb949b77278838.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:68</span></span><br><span class="line"><span class="emphasis">《哈利·波特与死亡圣器（下）》</span></span><br><span class="line"><span class="emphasis">主演：丹尼尔·雷德克里夫,鲁伯特·格林特,艾玛·沃特森</span></span><br><span class="line"><span class="emphasis">上映时间：2011-08-04</span></span><br><span class="line"><span class="emphasis">评分:9.0</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/68fa7db99e958c47d7aa07d015845a6f335154.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:69</span><br><span class="line">《本杰明·巴顿奇事》</span><br><span class="line">主演：布拉德·皮特,凯特·布兰切特,塔拉吉·P·汉森</span><br><span class="line">上映时间：2008-12-25(美国)</span><br><span class="line">评分:8.8</span><br><span class="line">https://p0.meituan.net/movie/2526f77c650bf7cf3d5ee2dccdeac332244951.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:70</span></span><br><span class="line"><span class="emphasis">《钢琴家》</span></span><br><span class="line"><span class="emphasis">主演：艾德里安·布洛迪,艾米莉娅·福克斯,米哈乌·热布罗夫斯基</span></span><br><span class="line"><span class="emphasis">上映时间：2002-09-25(法国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/484171372de45945e8bbbcc97db57e09136701.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:71</span><br><span class="line">《触不可及》</span><br><span class="line">主演：弗朗索瓦·克鲁塞,奥玛·希,安娜·勒尼</span><br><span class="line">上映时间：2011-11-02(法国)</span><br><span class="line">评分:9.1</span><br><span class="line">https://p0.meituan.net/movie/7874ba1378033b0b491df0cc56c43d25221208.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:72</span></span><br><span class="line"><span class="emphasis">《熔炉》</span></span><br><span class="line"><span class="emphasis">主演：孔刘,郑有美,金智英</span></span><br><span class="line"><span class="emphasis">上映时间：2011-09-22(韩国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/4ad513be2e9419ec7d7d63ba8cc2b6cc134065.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:73</span><br><span class="line">《初恋这件小事》</span><br><span class="line">主演：马里奥·毛瑞尔,平采娜·乐维瑟派布恩,阿查拉那·阿瑞亚卫考</span><br><span class="line">上映时间：2012-06-05</span><br><span class="line">评分:8.8</span><br><span class="line">https://p1.meituan.net/movie/7ed07b8ea8c0e0d0c7b685d20e3ec64e232004.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:74</span></span><br><span class="line"><span class="emphasis">《大话西游之大圣娶亲》</span></span><br><span class="line"><span class="emphasis">主演：周星驰,朱茵,莫文蔚</span></span><br><span class="line"><span class="emphasis">上映时间：2014-10-24</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/dc2246233a6f5ac1e34c7176b602c8ca174557.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:75</span><br><span class="line">《新龙门客栈》</span><br><span class="line">主演：张曼玉,梁家辉,甄子丹</span><br><span class="line">上映时间：2012-02-24</span><br><span class="line">评分:8.8</span><br><span class="line">https://p0.meituan.net/movie/9e9f12cfc1f54c973dda6c85bd3a139d334520.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:76</span></span><br><span class="line"><span class="emphasis">《甜蜜蜜》</span></span><br><span class="line"><span class="emphasis">主演：黎明,张曼玉,曾志伟</span></span><br><span class="line"><span class="emphasis">上映时间：2015-02-13</span></span><br><span class="line"><span class="emphasis">评分:9.2</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/8ad5a0f521fb15637dfdf9cab38d414453783.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:77</span><br><span class="line">《小鞋子》</span><br><span class="line">主演：默罕默德·阿米尔·纳吉,Kamal Mirkarimi,Behzad Rafi</span><br><span class="line">上映时间：1999-01-22(美国)</span><br><span class="line">评分:9.1</span><br><span class="line">https://p1.meituan.net/movie/bc7b6ababa54e11577d45c05e84a33af54072.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:78</span></span><br><span class="line"><span class="emphasis">《素媛》</span></span><br><span class="line"><span class="emphasis">主演：李来,薛耿求,严志媛</span></span><br><span class="line"><span class="emphasis">上映时间：2013-10-02(韩国)</span></span><br><span class="line"><span class="emphasis">评分:9.1</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/4cc4c55c29b77b090485ce9943bf6f87274708.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:79</span><br><span class="line">《萤火之森》</span><br><span class="line">主演：内山昂辉,佐仓绫音,后藤弘树</span><br><span class="line">上映时间：2011-09-17(日本)</span><br><span class="line">评分:9.0</span><br><span class="line">https://p0.meituan.net/movie/5420be40e3b755ffe04779b9b199e935256906.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:80</span></span><br><span class="line"><span class="emphasis">《时空恋旅人》</span></span><br><span class="line"><span class="emphasis">主演：瑞秋·麦克亚当斯,多姆纳尔·格里森,比尔·奈伊</span></span><br><span class="line"><span class="emphasis">上映时间：2013-09-04(英国)</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/4abc8c932cfacfc0089e2883765d02d1295222.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:81</span><br><span class="line">《穿条纹睡衣的男孩》</span><br><span class="line">主演：阿沙·巴特菲尔德,维拉·法梅加,大卫·休里斯</span><br><span class="line">上映时间：2008-09-12(英国)</span><br><span class="line">评分:9.0</span><br><span class="line">https://p1.meituan.net/movie/a0e0426a4390f5ecb49d25770a184dc0150779.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:82</span></span><br><span class="line"><span class="emphasis">《窃听风暴》</span></span><br><span class="line"><span class="emphasis">主演：乌尔里希·穆埃,塞巴斯蒂安·科赫,马蒂娜·格德克</span></span><br><span class="line"><span class="emphasis">上映时间：2006-03-23(德国)</span></span><br><span class="line"><span class="emphasis">评分:9.0</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/3985eaf3858bea0f2a3d966bf7ee2103178217.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:83</span><br><span class="line">《借东西的小人阿莉埃蒂》</span><br><span class="line">主演：志田未来,神木隆之介,大竹忍</span><br><span class="line">上映时间：2010-07-17(日本)</span><br><span class="line">评分:8.8</span><br><span class="line">https://p0.meituan.net/movie/ce262f261f69fc3d679020402336a4af270365.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:84</span></span><br><span class="line"><span class="emphasis">《恐怖直播》</span></span><br><span class="line"><span class="emphasis">主演：河正宇,李璟荣,李大为</span></span><br><span class="line"><span class="emphasis">上映时间：2013-07-31(韩国)</span></span><br><span class="line"><span class="emphasis">评分:8.8</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/b5ff0216e689b3fcc065590c48cd5105255305.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:85</span><br><span class="line">《7号房的礼物》</span><br><span class="line">主演：柳承龙,郑镇荣,朴信惠</span><br><span class="line">上映时间：2013-01-23(韩国)</span><br><span class="line">评分:8.9</span><br><span class="line">https://p1.meituan.net/movie/6a6e74b2c289f9fa4433dd2dc04a7741331638.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:86</span></span><br><span class="line"><span class="emphasis">《海豚湾》</span></span><br><span class="line"><span class="emphasis">主演：里克·奥巴瑞,路易·西霍尤斯,哈迪·琼斯</span></span><br><span class="line"><span class="emphasis">上映时间：2009-07-31(美国)</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/7373dbba07b50ce6f24336edb96b2ea4271536.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:87</span><br><span class="line">《忠犬八公物语》</span><br><span class="line">主演：仲代达矢,春川真澄,井川比佐志</span><br><span class="line">上映时间：1987-08-01(日本)</span><br><span class="line">评分:9.0</span><br><span class="line">https://p1.meituan.net/movie/c835b3588d0061ed3b992388a0a96f15160913.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:88</span></span><br><span class="line"><span class="emphasis">《上帝之城》</span></span><br><span class="line"><span class="emphasis">主演：亚历桑德雷·罗德里格斯,艾莉丝·布拉加,莱安德鲁·菲尔米诺</span></span><br><span class="line"><span class="emphasis">上映时间：2002-08-30(巴西)</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/b553d13f30100db731ab6cf45668e52d94703.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:89</span><br><span class="line">《辩护人》</span><br><span class="line">主演：宋康昊,郭度沅,吴达洙</span><br><span class="line">上映时间：2013-12-18(韩国)</span><br><span class="line">评分:8.8</span><br><span class="line">https://p0.meituan.net/movie/8fabf3894b7d12d3d2f6e66404813670265761.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:90</span></span><br><span class="line"><span class="emphasis">《七武士》</span></span><br><span class="line"><span class="emphasis">主演：三船敏郎,志村乔,千秋实</span></span><br><span class="line"><span class="emphasis">上映时间：1954-04-26(日本)</span></span><br><span class="line"><span class="emphasis">评分:9.1</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/73349facab53529ab9e079c6c8c7c059281729.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:91</span><br><span class="line">《英雄本色》</span><br><span class="line">主演：狄龙,张国荣,周润发</span><br><span class="line">上映时间：2017-11-17</span><br><span class="line">评分:9.2</span><br><span class="line">https://p0.meituan.net/movie/3e5f5f3aa4b7e5576521e26c2c7c894d253975.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:92</span></span><br><span class="line"><span class="emphasis">《一一》</span></span><br><span class="line"><span class="emphasis">主演：吴念真,金燕玲,李凯莉</span></span><br><span class="line"><span class="emphasis">上映时间：2000-09-20(法国)</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/2c0a5fedf4b43d142121b91c6ccabe1b59051.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:93</span><br><span class="line">《完美的世界》</span><br><span class="line">主演：凯文·科斯特纳,克林特·伊斯特伍德,T·J·劳瑟</span><br><span class="line">上映时间：1993-11-24(美国)</span><br><span class="line">评分:8.9</span><br><span class="line">https://p1.meituan.net/movie/30310858fdab34c7a17cfd7ec8ad8bfc112201.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:94</span></span><br><span class="line"><span class="emphasis">《海洋》</span></span><br><span class="line"><span class="emphasis">主演：雅克·贝汉,姜文,兰斯洛特·佩林</span></span><br><span class="line"><span class="emphasis">上映时间：2011-08-12</span></span><br><span class="line"><span class="emphasis">评分:9.0</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/0018b57299d0d4540330a31244c880a9112971.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:95</span><br><span class="line">《爱·回家》</span><br><span class="line">主演：俞承豪,金艺芬,童孝熙</span><br><span class="line">上映时间：2002-04-05(韩国)</span><br><span class="line">评分:9.0</span><br><span class="line">https://p1.meituan.net/movie/36a893c53a13f9bb934071b86ae3b5c492427.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:96</span></span><br><span class="line"><span class="emphasis">《黄金三镖客》</span></span><br><span class="line"><span class="emphasis">主演：克林特·伊斯特伍德,李·范·克里夫,埃里·瓦拉赫</span></span><br><span class="line"><span class="emphasis">上映时间：1966-12-23(意大利)</span></span><br><span class="line"><span class="emphasis">评分:8.9</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/9bff56ed3ea38bb1825daa1d354bc92352781.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:97</span><br><span class="line">《我爱你》</span><br><span class="line">主演：宋在浩,李顺才,尹秀晶</span><br><span class="line">上映时间：2011-02-17(韩国)</span><br><span class="line">评分:9.0</span><br><span class="line">https://p1.meituan.net/movie/ed50b58bf636d207c56989872a91f4cf305138.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:98</span></span><br><span class="line"><span class="emphasis">《迁徙的鸟》</span></span><br><span class="line"><span class="emphasis">主演：雅克·贝汉,Philippe Labro</span></span><br><span class="line"><span class="emphasis">上映时间：2001-12-12(法国)</span></span><br><span class="line"><span class="emphasis">评分:9.1</span></span><br><span class="line"><span class="emphasis">https://p1.meituan.net/movie/a1634f4e49c8517ae0a3e4adcac6b0dc43994.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line">排名:99</span><br><span class="line">《阿飞正传》</span><br><span class="line">主演：张国荣,张曼玉,刘德华</span><br><span class="line">上映时间：2018-06-25</span><br><span class="line">评分:8.8</span><br><span class="line">https://p0.meituan.net/movie/885fc379c614a2b4175587b95ac98eb95045650.jpg@160w<span class="emphasis">_220h_</span>1e<span class="emphasis">_1c</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">排名:100</span></span><br><span class="line"><span class="emphasis">《龙猫》</span></span><br><span class="line"><span class="emphasis">主演：帕特·卡洛尔,蒂姆·达利,丽娅·萨隆加</span></span><br><span class="line"><span class="emphasis">上映时间：2018-12-14</span></span><br><span class="line"><span class="emphasis">评分:9.2</span></span><br><span class="line"><span class="emphasis">https://p0.meituan.net/movie/c304c687e287c7c2f9e22cf78257872d277201.jpg@160w_</span>220h<span class="emphasis">_1e_</span>1c</span><br><span class="line">--------------------</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h3 id="保存到txt文件"><a href="#保存到txt文件" class="headerlink" title="保存到txt文件"></a>保存到txt文件</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python爬取猫眼电影排行榜&quot;&gt;&lt;a href=&quot;#Python爬取猫眼电影排行榜&quot; class=&quot;headerlink&quot; title=&quot;Python爬取猫眼电影排行榜&quot;&gt;&lt;/a&gt;Python爬取猫眼电影排行榜&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;requests 获取 
      
    
    </summary>
    
      <category term="python" scheme="https://coderjeremy.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://coderjeremy.github.io/tags/python/"/>
    
      <category term="lxml" scheme="https://coderjeremy.github.io/tags/lxml/"/>
    
      <category term="requests" scheme="https://coderjeremy.github.io/tags/requests/"/>
    
      <category term="json" scheme="https://coderjeremy.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记</title>
    <link href="https://coderjeremy.github.io/2019/01/14/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://coderjeremy.github.io/2019/01/14/Python学习笔记/</id>
    <published>2019-01-14T08:55:26.000Z</published>
    <updated>2019-01-14T12:56:32.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><blockquote><p>产生列表的子集<br>字符串、列表、元组都支持切片操作<br>切片的语法：[起始 ： 结束 ：步长]<br>左闭右开 步长表示选取的间隔 默认是 1</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">字符串切片</span><br><span class="line">name = <span class="string">"abcdefghijk"</span></span><br><span class="line">print(name[<span class="number">4</span>:<span class="number">6</span>]) <span class="comment"># 取下表4-6，也就是name[4],name[5]</span></span><br><span class="line">print(name[<span class="number">2</span>:]) <span class="comment"># 结束缺省，表示取下标为2开始到最后的字符</span></span><br><span class="line">print(name[:<span class="number">3</span>]) <span class="comment"># 开始缺省，表示取开始到下标为3之前的字符</span></span><br><span class="line">print(name[<span class="number">1</span>:<span class="number">-1</span>]) <span class="comment"># 负数索引返回离列表末尾相应距离的元素</span></span><br><span class="line">print(name[::<span class="number">-1</span>]) <span class="comment"># 步长为负， 表示从后往前切片</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">列表切片</span><br><span class="line">cars = [<span class="string">'Audi'</span>, <span class="string">'BMW'</span>, <span class="string">'BenZi'</span>, <span class="string">'Toyota'</span>]</span><br><span class="line">print(cars[::<span class="number">-1</span>]) <span class="comment"># 逆序输出列表,实际结构没有发生改变</span></span><br><span class="line">print(cars[<span class="number">1</span>:<span class="number">3</span>]) <span class="comment"># 产生列表的子集，切片始于'BMW',终于‘Benzi’</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">切片的应用</span><br><span class="line"><span class="comment"># 实现 [1，2，3，4....100]变成[[1,2,3],[4,5,6],...]</span></span><br><span class="line">a = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)]</span><br><span class="line">print(a)</span><br><span class="line">b = [a[x:x+<span class="number">3</span>] <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(a), <span class="number">3</span>)] <span class="comment"># 产生列表的子集</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><h1 id="可变的类型-：-列表List-字典Dict-集合Set"><a href="#可变的类型-：-列表List-字典Dict-集合Set" class="headerlink" title="可变的类型 ： 列表List 字典Dict 集合Set"></a>可变的类型 ： 列表List 字典Dict 集合Set</h1><h2 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表</span></span><br><span class="line">nameList = [<span class="string">'zhangsan'</span>, <span class="string">'lisi'</span>, <span class="number">1234</span>]</span><br><span class="line"><span class="comment"># 打印列表</span></span><br><span class="line">print(nameList)</span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">print(nameList[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># for循环遍历</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">    print(name)</span><br><span class="line"><span class="comment"># while循环遍历</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; len(nameList):</span><br><span class="line">    print(nameList[i])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的相关操作</span></span><br><span class="line"><span class="comment"># 1. 添加元素</span></span><br><span class="line"><span class="comment"># append()</span></span><br><span class="line">A = [<span class="string">'zhangsan'</span>, <span class="string">'lisi'</span>, <span class="number">1234</span>]</span><br><span class="line">temp = input(<span class="string">"请输入学生姓名:"</span>)</span><br><span class="line">A.append(temp)</span><br><span class="line">print(A)</span><br><span class="line"></span><br><span class="line"><span class="comment"># extend()可以将另一个元素逐一追加到列表中,append是整体添加</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">a.append(b)</span><br><span class="line">print(a)</span><br><span class="line">a.extend(b)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># insert() 在指定位置插入元素(位置，元素)</span></span><br><span class="line">c = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">c.insert(<span class="number">1</span>, <span class="string">'3'</span>)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.修改操作</span></span><br><span class="line">A = [<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>, <span class="number">1234</span>]</span><br><span class="line">A[<span class="number">1</span>] = <span class="string">'小红'</span></span><br><span class="line">print(A)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.查询</span></span><br><span class="line"><span class="comment"># in / not in / index / count</span></span><br><span class="line"><span class="comment"># in</span></span><br><span class="line">nameList = [<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>, <span class="number">1234</span>]</span><br><span class="line">findName = input(<span class="string">"请输入要查找的姓名"</span>)</span><br><span class="line"><span class="keyword">if</span> findName <span class="keyword">in</span> nameList:</span><br><span class="line">    print(<span class="string">"你要找的人在列表中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"没找到"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#index 返回第一次出现的序号</span></span><br><span class="line"><span class="comment">#count 返回出现的次数</span></span><br><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">index = a.index(<span class="string">'a'</span>)</span><br><span class="line">print(index)</span><br><span class="line">count = a.count(<span class="string">'a'</span>)</span><br><span class="line">print(count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.删除</span></span><br><span class="line">nameList = [<span class="string">'xiaoming'</span>, <span class="string">'xiaohong'</span>, <span class="number">1234</span>]</span><br><span class="line"><span class="comment"># del  根据下表删除</span></span><br><span class="line"><span class="keyword">del</span> nameList[<span class="number">2</span>]</span><br><span class="line">print(nameList)</span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line">print(nameList)</span><br><span class="line">nameList.pop()</span><br><span class="line">print(nameList)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove 根据元素的值进行删除</span></span><br><span class="line">a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">print(a)</span><br><span class="line">a.remove(<span class="string">'a'</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line"><span class="comment"># sort()正序</span></span><br><span class="line">a.sort()</span><br><span class="line"><span class="comment">#a.reverse(sort=True)</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># reverse() 逆序  也可以写作sort(reverse=True)，反过来不可以</span></span><br><span class="line">b.sort(reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment">#b.reverse()</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个学校，有三个办公室，8位老师等待分配工位，完成随机分配</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 定义一个列表来保存3个办公室</span></span><br><span class="line">offices = [[], [], []]</span><br><span class="line"><span class="comment"># 定义一个列表来保存8个教师姓名</span></span><br><span class="line">names = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    names.append(string.ascii_uppercase[i])</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    index = random.randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">    offices[index].append(name)</span><br><span class="line"><span class="comment"># print(offices)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历展示</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> tempNames <span class="keyword">in</span> offices:</span><br><span class="line">    print(<span class="string">"办公室%d的人数为 %d : "</span> % (i, len(tempNames)), end=<span class="string">''</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> tempNames:</span><br><span class="line">        print(<span class="string">"%s"</span> % name, end=<span class="string">' '</span>)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">'-'</span>*<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h2 id="字典Dict"><a href="#字典Dict" class="headerlink" title="字典Dict"></a>字典Dict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典 &#123;key1: value1, key2: value2&#125;</span></span><br><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'马云'</span>, id: <span class="number">100</span>, <span class="string">'sex'</span>: <span class="string">'m'</span>, <span class="string">'address'</span>: <span class="string">'杭州'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据键 进行访问</span></span><br><span class="line"><span class="comment"># key: value</span></span><br><span class="line">print(info[id])</span><br><span class="line"><span class="comment"># 访问不存在的键会报错</span></span><br><span class="line"><span class="comment">#print(info['age']) #keyError: 'age‘</span></span><br><span class="line"><span class="comment"># 面向对象的访问, 若不存在，返回默认值</span></span><br><span class="line">age = info.get(<span class="string">'age'</span>, <span class="number">18</span>)</span><br><span class="line">print(age)</span><br><span class="line">print(type(age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常见操作</span></span><br><span class="line"><span class="comment"># 1. 查看</span></span><br><span class="line">info = &#123;<span class="string">'name'</span>: <span class="string">'西卡'</span>, <span class="string">'age'</span>: <span class="number">26</span>&#125;</span><br><span class="line">print(info[<span class="string">'age'</span>])</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">age = input(<span class="string">"请输入年龄:"</span>)</span><br><span class="line">info[<span class="string">'age'</span>] = age</span><br><span class="line">print(info)</span><br><span class="line"><span class="comment"># 添加 键不存在，就会新增这个元素</span></span><br><span class="line">add = input(<span class="string">"请输入户籍所在地:"</span>)</span><br><span class="line">info[<span class="string">'address'</span>] = add</span><br><span class="line">print(info)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 del删除字典某个元素 clear()清空字典</span></span><br><span class="line"><span class="comment"># del info['address']</span></span><br><span class="line"><span class="comment"># print(info)</span></span><br><span class="line"><span class="comment"># info.clear()</span></span><br><span class="line"><span class="comment"># print(info)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典方法</span></span><br><span class="line"><span class="comment"># len() 键值对个数 以列表方式储存</span></span><br><span class="line">print(len(info))</span><br><span class="line"><span class="comment"># keys()返回所有键 values() 返回所有值 以列表方式储存</span></span><br><span class="line">print(info.keys())</span><br><span class="line">print(info.values())</span><br><span class="line"><span class="comment"># items 返回键值对列表 以列表方式储存</span></span><br><span class="line">print(info.items())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典的遍历</span></span><br><span class="line"><span class="comment"># key()</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> info.keys():</span><br><span class="line">    print(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># value</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> info.values():</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项 (元素)</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info.items():</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> info.items():</span><br><span class="line">    print(key, value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for 循环迭代</span></span><br><span class="line"><span class="comment"># chars = ['a', 'b', 'c', 'd']</span></span><br><span class="line"><span class="comment"># for i, chr in enumerate(chars):</span></span><br><span class="line"><span class="comment">#     print(i, chr)</span></span><br></pre></td></tr></table></figure><h2 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集合</span></span><br><span class="line"><span class="comment"># 无序 元素唯一 一般用于元组或列表的元素去重</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 添加元素 add()</span></span><br><span class="line">set1.add(<span class="number">9</span>)</span><br><span class="line">print(set1)</span><br><span class="line"><span class="comment"># 修改元素 update()</span></span><br><span class="line">set1.update(<span class="string">'abcd'</span>)</span><br><span class="line">print(set1)</span><br><span class="line"><span class="comment"># 删除元素 remove()不存在会报错</span></span><br><span class="line">set1.remove(<span class="number">1</span>)</span><br><span class="line">print(set1)</span><br><span class="line"><span class="comment"># pop 随机删除集合中某个元素</span></span><br><span class="line">set1.pop()</span><br><span class="line">print(set1)</span><br><span class="line"><span class="comment"># discard 丢弃，放弃，不会报错</span></span><br><span class="line">set1.discard(<span class="number">123</span>)</span><br><span class="line">print(set1)</span><br></pre></td></tr></table></figure><h1 id="不可变的类型-：数字Num-字符串Str-元组Tuple"><a href="#不可变的类型-：数字Num-字符串Str-元组Tuple" class="headerlink" title="不可变的类型 ：数字Num 字符串Str 元组Tuple"></a>不可变的类型 ：数字Num 字符串Str 元组Tuple</h1><h2 id="数字Num"><a href="#数字Num" class="headerlink" title="数字Num"></a>数字Num</h2><p>Python Number 数据类型用于存储数值。<br>数据类型是不允许改变的,这就意味着如果改变 Number 数据类型的值，将重新分配内存空间。</p><h2 id="字符串Str"><a href="#字符串Str" class="headerlink" title="字符串Str"></a>字符串Str</h2><p>Python不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。<br>Python访问子字符串，可以使用方括号来截取字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'today is Sunday'</span></span><br><span class="line">print(str[<span class="number">4</span>])</span><br><span class="line">print(len(str))</span><br><span class="line">print(type(str))</span><br></pre></td></tr></table></figure></p><h2 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 元组 tuple</span></span><br><span class="line"><span class="comment"># python 中的元组和列表类似，元组的元素是无法进行修改的</span></span><br><span class="line"><span class="comment"># 元组() 列表[]</span></span><br><span class="line"><span class="comment"># return a, b, c</span></span><br><span class="line">aTuple = (<span class="string">'et'</span>, <span class="number">77</span> , <span class="number">3.14</span>)</span><br><span class="line">print(aTuple)</span><br><span class="line">print(type(aTuple))</span><br><span class="line"><span class="comment"># 元组中只有一个元素，需要逗号结尾，否则会引起歧异</span></span><br><span class="line">bTuple = (<span class="number">12</span>,)</span><br><span class="line">print(type(bTuple))</span><br><span class="line"><span class="comment"># 访问元组</span></span><br><span class="line">print(aTuple[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 修改元组 不支持修改</span></span><br><span class="line"><span class="comment"># aTuple[0] = 123</span></span><br><span class="line"><span class="comment"># count index</span></span><br><span class="line">a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>)</span><br><span class="line">print(a.index(<span class="string">'a'</span>, <span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line">print(a.count(<span class="string">'b'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;切片&quot;&gt;&lt;a href=&quot;#切片&quot; class=&quot;headerlink&quot; title=&quot;切片&quot;&gt;&lt;/a&gt;切片&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;产生列表的子集&lt;br&gt;字符串、列表、元组都支持切片操作&lt;br&gt;切片的语法：[起始 ： 结束 ：步长]&lt;br&gt;左闭右
      
    
    </summary>
    
    
      <category term="python" scheme="https://coderjeremy.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Shell读取文件并批量添加用户</title>
    <link href="https://coderjeremy.github.io/2018/11/06/Shell%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%B9%B6%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
    <id>https://coderjeremy.github.io/2018/11/06/Shell读取文件并批量添加用户/</id>
    <published>2018-11-06T06:29:15.000Z</published>
    <updated>2018-11-06T08:01:10.421Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在linux中要求从一个文件中读取用户名和密码，并批量添加账户</p></blockquote><p>文件格式：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jeremy]# cat users.list </span><br><span class="line">apple 12345</span><br><span class="line">banana 123456</span><br><span class="line">orange 123123</span><br><span class="line">pear 123123</span><br></pre></td></tr></table></figure></p><h1 id="第一步：读取用户名和密码"><a href="#第一步：读取用户名和密码" class="headerlink" title="第一步：读取用户名和密码"></a>第一步：读取用户名和密码</h1><ol><li>创建 <code>user.sh</code>文件</li><li>按行读取用户信息<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jeremy]# vim user.sh</span><br><span class="line">[root@localhost jeremy]# cat user.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">cat users.list | while read line</span><br><span class="line">do </span><br><span class="line"> echo $line</span><br><span class="line">done</span><br><span class="line">[root@localhost jeremy]# ./user.sh </span><br><span class="line">apple 12345</span><br><span class="line">banana 123456</span><br><span class="line">orange 123123</span><br><span class="line">pear 123123</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>读取每一行内容并输出有多种方式<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 第一种 <span class="keyword">while</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">while</span> <span class="built_in">read</span> line</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  <span class="built_in">echo</span> <span class="variable">$line</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">done</span> &lt; filename</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 第二种 <span class="keyword">while</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> cat filename | <span class="keyword">while</span> <span class="built_in">read</span> line</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  <span class="built_in">echo</span> <span class="variable">$line</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 第三种 <span class="keyword">for</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">for</span> line <span class="keyword">in</span> `cat filename`</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">do</span> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  <span class="built_in">echo</span> <span class="variable">$line</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">for</span>循环在读取文件时，任何空白字符都可以作为其读取的分隔符.</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">while</span>使用是换行符作为标记</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> ex: </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">for</span> line <span class="keyword">in</span> $(&lt;users.list) 结果如下</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> apple</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 12345</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> banana</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 123456</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> orange</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 123123</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> pear</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 123123</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="第二步：分割用户名和密码"><a href="#第二步：分割用户名和密码" class="headerlink" title="第二步：分割用户名和密码"></a>第二步：分割用户名和密码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jeremy]# cat user.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">cat users.list | while read line</span><br><span class="line">do </span><br><span class="line"> username=`echo $line | cut -f1 -d' '`</span><br><span class="line"> password=`echo $line | cut -f2 -d' '`</span><br><span class="line"> echo -n "USERNAME:$username PASSWORD:$password"</span><br><span class="line"> echo</span><br><span class="line">done </span><br><span class="line">[root@localhost jeremy]# ./user.sh </span><br><span class="line">USERNAME:apple PASSWORD:12345</span><br><span class="line">USERNAME:banana PASSWORD:123456</span><br><span class="line">USERNAME:orange PASSWORD:123123</span><br><span class="line">USERNAME:pear PASSWORD:123123</span><br></pre></td></tr></table></figure><h1 id="第三步：批量添加用户"><a href="#第三步：批量添加用户" class="headerlink" title="第三步：批量添加用户"></a>第三步：批量添加用户</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jeremy]# cat user.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">cat users.list | while read line</span><br><span class="line">do </span><br><span class="line"> username=`echo $line | cut -f1 -d' '`</span><br><span class="line"> password=`echo $line | cut -f2 -d' '`</span><br><span class="line"> useradd $username</span><br><span class="line"> echo $password | passwd --stdin $username</span><br><span class="line">done </span><br><span class="line">[root@localhost jeremy]# ./user.sh </span><br><span class="line">更改用户 apple 的密码 。</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line">更改用户 banana 的密码 。</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line">更改用户 orange 的密码 。</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line">更改用户 pear 的密码 。</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br></pre></td></tr></table></figure><h1 id="第四步：完善脚本"><a href="#第四步：完善脚本" class="headerlink" title="第四步：完善脚本"></a>第四步：完善脚本</h1><p>以上脚本再运行一便，会发现新增用户不行了。但会修改了密码.应该增加一个用户是否存在的判断.另外所有非Shell内建命令都建议使用全路径，以避免由于环境变量的问题造成command not found。最后，脚本主体要尽量少使用变量，所以需要在脚本开头定义变量.如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">USER_INFO=/home/jeremy/users.list</span><br><span class="line">USERADD=/usr/sbin/useradd</span><br><span class="line">PASSWD=/usr/bin/passwd</span><br><span class="line">CUT=/bin/cut</span><br><span class="line">while read LINES</span><br><span class="line">do</span><br><span class="line">    USERNAME=`echo $LINES | $CUT -f1 -d' '`</span><br><span class="line">    USERPASS=`echo $LINES | $CUT -f2 -d' '`</span><br><span class="line">    $USERADD $USERNAME</span><br><span class="line">    if [ $? -ne 0 ];then</span><br><span class="line">        echo "$USERNAME exists,skip set password"</span><br><span class="line">    else</span><br><span class="line">        echo $USERPASS | $PASSWD --stdin $USERNAME</span><br><span class="line">    fi</span><br><span class="line">done &lt; $USER_INFO</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在linux中要求从一个文件中读取用户名和密码，并批量添加账户&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文件格式：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="Language" scheme="https://coderjeremy.github.io/categories/Language/"/>
    
    
      <category term="编程语言" scheme="https://coderjeremy.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="脚本" scheme="https://coderjeremy.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="Shell" scheme="https://coderjeremy.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本编程</title>
    <link href="https://coderjeremy.github.io/2018/11/06/Shell%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B/"/>
    <id>https://coderjeremy.github.io/2018/11/06/Shell脚本编程/</id>
    <published>2018-11-06T01:18:01.000Z</published>
    <updated>2018-11-06T05:53:27.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><p>Shell 是一个用C语言编写的程序，它既是一种命令语言，又是一种程序设计语言。</p><h1 id="Shell-Script"><a href="#Shell-Script" class="headerlink" title="Shell Script"></a>Shell Script</h1><p>Shell脚本，用shell编写的脚本程序</p><h1 id="First-Shell"><a href="#First-Shell" class="headerlink" title="First Shell"></a>First Shell</h1><ol><li>创建一个<code>.sh</code>为文件后缀的文件，<code>hello.sh</code></li><li>内容如下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">注释</span></span><br><span class="line"><span class="meta">#</span><span class="bash">author : jeremy</span></span><br><span class="line">echo "Hello Shell !"</span><br></pre></td></tr></table></figure></li></ol><p>保存退出</p><ol start="3"><li><p>先赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chmod a+x hello.sh</span></span><br></pre></td></tr></table></figure></li><li><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ./hello.sh</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">variable_name=variable_value</span><br><span class="line">等号左右无空格</span><br><span class="line"></span><br><span class="line">ex:</span><br><span class="line">User="Jeremy"</span><br><span class="line">Pwd="123456"</span><br></pre></td></tr></table></figure><h2 id="访问变量"><a href="#访问变量" class="headerlink" title="访问变量"></a>访问变量</h2><p>使用美元符号<code>$</code>访问变量,可以给变量加上<code>{ }</code>花括号，帮助解释器识别变量的边界<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/bin/sh</span></span><br><span class="line"></span><br><span class="line">User="Jeremy"</span><br><span class="line">Pwd=“123456”</span><br><span class="line">echo $User</span><br><span class="line">echo $&#123;Pwd&#125;</span><br></pre></td></tr></table></figure></p><p>打印 <code>User</code> 和 <code>Pwd</code> 的值</p><h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h2><p>使用<code>readonly</code>可以将变量定义为只读变量，只读变量的值不能改变<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/bin/sh</span></span><br><span class="line"></span><br><span class="line">User="Jeremy"</span><br><span class="line">readonly User</span><br></pre></td></tr></table></figure></p><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p>使用<code>unset</code>命令可以删除变量<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">！/bin/sh</span></span><br><span class="line"></span><br><span class="line">User="Jeremy"</span><br><span class="line">unset User</span><br></pre></td></tr></table></figure></p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量在脚本或命令中定义，仅在当前shell实例中有效</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证正常运行，shell脚本也可以定义环境变量</p><h3 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h3><p>shell变量是由shell程序设置的特殊变量，shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</p><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">0当前脚本的文件名</span></span><br><span class="line"><span class="meta">$</span><span class="bash">n传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是<span class="variable">$1</span>，第二个参数是<span class="variable">$2</span>。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="comment">#传递给脚本或函数的参数个数。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">*传递给脚本或函数的所有参数。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">@传递给脚本或函数的所有参数。被双引号(<span class="string">" "</span>)包含时，与 $* 稍有不同，下面将会讲到。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">?上个命令的退出状态，或函数的返回值。</span></span><br><span class="line"><span class="meta">$</span><span class="bash">$当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</span></span><br></pre></td></tr></table></figure><h1 id="数组Arrays"><a href="#数组Arrays" class="headerlink" title="数组Arrays"></a>数组Arrays</h1><p>Bash Shell只支持一维数组，初始化时不需要定义数组大小<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">array_name</span>=(value1...valueN)</span><br></pre></td></tr></table></figure></p><h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array_name[index]=value</span><br><span class="line"></span><br><span class="line">ex:</span><br><span class="line">User[0]="apple"</span><br><span class="line">User[1]="banana"</span><br><span class="line">User[2]="orange"</span><br></pre></td></tr></table></figure><h2 id="访问数组"><a href="#访问数组" class="headerlink" title="访问数组"></a>访问数组</h2><p>和访问变量格式相同<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[index]&#125;</span></span><br><span class="line">ex:</span><br><span class="line">User[0]="apple"</span><br><span class="line">User[1]="banana"</span><br><span class="line">User[2]="orange"</span><br><span class="line">echo $&#123;User[0]&#125;</span><br><span class="line">echo $&#123;User[@]&#125;</span><br><span class="line"></span><br><span class="line">以下两种方式可以访问数组中的所有项目</span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[*]&#125;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">&#123;array_name[@]&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h1><p>Bourne shell没有任何机制来执行简单的算术，它使用外部程序awk或expr</p><ul><li>运算符和表达式之间必须有空格</li><li>`  `  倒逗号之间包含完整的表达式 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line">echo $val</span><br></pre></td></tr></table></figure><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>a=10<br>b=20</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加法</td><td style="text-align:center">` expr $a + $b ` 结果为 30。</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减法</td><td style="text-align:center">` expr $a - $b ` 结果为 -10。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘法</td><td style="text-align:center">` expr $a * $b ` 结果为  200。</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除法</td><td style="text-align:center">` expr $b / $a ` 结果为 2。</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td style="text-align:center">` expr $b % $a ` 结果为 0。</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">相等</td><td style="text-align:center">[$a==$b] 返回 false。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不相等</td><td style="text-align:center">[$a!=$b] 返回 true。</td></tr></tbody></table><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td style="text-align:center">检测两个数是否相等，相等返回 true。</td><td style="text-align:center">[ $a -eq $b ] 返回 false。</td></tr><tr><td style="text-align:center">-ne</td><td style="text-align:center">检测两个数是否不相等，不相等返回 true。</td><td style="text-align:center">[ $a -ne $b ] 返回 true。</td></tr><tr><td style="text-align:center">-gt</td><td style="text-align:center">检测左边的数是否大于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -gt $b ] 返回 false。</td></tr><tr><td style="text-align:center">-lt</td><td style="text-align:center">检测左边的数是否小于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -lt $b ] 返回 true。</td></tr><tr><td style="text-align:center">-ge</td><td style="text-align:center">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -ge $b ] 返回 false。</td></tr><tr><td style="text-align:center">-le</td><td style="text-align:center">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -le $b ] 返回 true。</td></tr></tbody></table><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">!</td><td style="text-align:center">非运算，表达式为 true 则返回 false，否则返回 true。</td><td style="text-align:center">[ ! false ] 返回 true。</td></tr><tr><td style="text-align:center">-o</td><td style="text-align:center">或运算，有一个表达式为 true 则返回 true。</td><td style="text-align:center">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td style="text-align:center">-a</td><td style="text-align:center">与运算，两个表达式都为 true 才返回 true。</td><td style="text-align:center">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">检测两个字符串是否相等，相等返回 true。</td><td style="text-align:center">[ $a = $b ] 返回 false。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">检测两个字符串是否相等，不相等返回 true。</td><td style="text-align:center">[ $a != $b ] 返回 true。</td></tr><tr><td style="text-align:center">-z</td><td style="text-align:center">检测字符串长度是否为0，为0返回 true。</td><td style="text-align:center">[ -z $a ] 返回 false。</td></tr><tr><td style="text-align:center">-n</td><td style="text-align:center">检测字符串长度是否为0，不为0返回 true。</td><td style="text-align:center">[ -n “$a” ] 返回 true。</td></tr><tr><td style="text-align:center">str</td><td style="text-align:center">检测字符串是否为空，不为空返回 true。</td><td style="text-align:center">[ $a ] 返回 true。</td></tr></tbody></table><h1 id="Shell条件语句"><a href="#Shell条件语句" class="headerlink" title="Shell条件语句"></a>Shell条件语句</h1><h2 id="if-…-fi"><a href="#if-…-fi" class="headerlink" title="if … fi"></a>if … fi</h2><p>shell expression求值，结果是true，statement被执行，否则不执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if[ expression ]</span><br><span class="line">then</span><br><span class="line">Statement(s) to be executed if expression is true</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h2 id="if-…-else-…-fi"><a href="#if-…-else-…-fi" class="headerlink" title="if … else … fi"></a>if … else … fi</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if[ expression ]</span><br><span class="line">then</span><br><span class="line">Statement(s) to be executed if expression is true</span><br><span class="line">else</span><br><span class="line">Statement(s) to be executed if expression is not true</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="if-…-elif-…-fi"><a href="#if-…-elif-…-fi" class="headerlink" title="if … elif … fi"></a>if … elif … fi</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if [ expression 1 ]</span><br><span class="line">then</span><br><span class="line">Statement(s) to be executed if expression 1 is true</span><br><span class="line">elif [ expression 2 ]</span><br><span class="line">then</span><br><span class="line">Statement(s) to be executed if expression 2 is true</span><br><span class="line">elif [ expression 3 ]</span><br><span class="line">then</span><br><span class="line">Statement(s) to be executed if expression 3 is true</span><br><span class="line">else</span><br><span class="line">Statement(s) to be executed if no expression is true</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="case-esac"><a href="#case-esac" class="headerlink" title="case .. esac"></a>case .. esac</h2><p>这里的字符串字每个模式进行比较，直到找到一个匹配。执行语句匹配模式。如果没有找到匹配，声明退出的情况下不执行任何动作。<br>没有最大数量的模式，但最小是一个。<br>当语句部分执行，命令<code>;;</code> 表明程序流程跳转到结束整个 case 语句。和C编程语言的 break 类似。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case word in</span><br><span class="line">  pattern1)</span><br><span class="line">     Statement(s) to be executed if pattern1 matches</span><br><span class="line">     ;;</span><br><span class="line">  pattern2)</span><br><span class="line">     Statement(s) to be executed if pattern2 matches</span><br><span class="line">     ;;</span><br><span class="line">  pattern3)</span><br><span class="line">     Statement(s) to be executed if pattern3 matches</span><br><span class="line">     ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p><h1 id="Shell循环类型"><a href="#Shell循环类型" class="headerlink" title="Shell循环类型"></a>Shell循环类型</h1><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>这里Shell命令进行计算。如果结果值是 true，给定语句被执行。如果命令为 false，那么没有语句将不执行，程序将跳转到done语句后的下一行。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while command</span><br><span class="line">do</span><br><span class="line">Statement(s) to be executed if command is true</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>var是一个变量，word1 到 wordN 是由空格分隔的字符（字）序列的名称。每次for 循环的执行，变量var的值被设置为下一个单词的列表中的字，word1 到 wordN 。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for var in word1 word2 ... wordN</span><br><span class="line">do</span><br><span class="line">Statement(s) to be executed if command is true</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h2><p>这里Shell命令进行评估计算。如果结果值是false，给定语句（s）被执行。如果命令没有语句为true，那么将不执行，程序会跳转到下一行done语句后。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until command</span><br><span class="line">do</span><br><span class="line">   Statement(s) to be executed until command is true</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h2 id="select-循环"><a href="#select-循环" class="headerlink" title="select 循环"></a>select 循环</h2><p>var是一个变量，word1 到 wordN是由空格分隔的字符（字）序列的名称。每次for循环的执行，变量var的值被设置为下一个单词的列表中的字，由 word1 到wordN。</p><p>对于每一个选择的一组命令将被执行，在循环中。这个循环在ksh，并已被改编成的bash。这不是在sh。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select var in word1 word2 ... wordN</span><br><span class="line">do</span><br><span class="line">   Statement(s) to be executed for every word.</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Shell&quot;&gt;&lt;a href=&quot;#Shell&quot; class=&quot;headerlink&quot; title=&quot;Shell&quot;&gt;&lt;/a&gt;Shell&lt;/h1&gt;&lt;p&gt;Shell 是一个用C语言编写的程序，它既是一种命令语言，又是一种程序设计语言。&lt;/p&gt;
&lt;h1 id=&quot;Shell
      
    
    </summary>
    
      <category term="Language" scheme="https://coderjeremy.github.io/categories/Language/"/>
    
    
      <category term="编程语言" scheme="https://coderjeremy.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="脚本" scheme="https://coderjeremy.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
      <category term="Shell" scheme="https://coderjeremy.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Linux磁盘管理</title>
    <link href="https://coderjeremy.github.io/2018/10/31/Linux%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86/"/>
    <id>https://coderjeremy.github.io/2018/10/31/Linux磁盘管理/</id>
    <published>2018-10-31T05:45:17.000Z</published>
    <updated>2018-10-31T06:01:37.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="列出磁盘使用量df"><a href="#列出磁盘使用量df" class="headerlink" title="列出磁盘使用量df"></a>列出磁盘使用量df</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> df [‐ahikHTm] 目录或文件名</span></span><br></pre></td></tr></table></figure><blockquote><p>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；<br>-k ：以 KBytes 的容量显示各文件系统；<br>-m ：以 MBytes 的容量显示各文件系统；<br>-h ：以人们较易阅读的 GBytes，MBytes，KBytes 等格式显示；<br>-H ：以 M=1000K 取代 M=1024K 的进位方式；<br>-T ：显示文件系统类型，连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；<br>-i ：不用硬盘容量，而以 inode 的数量来</p></blockquote><h1 id="检查磁盘空间使用量du"><a href="#检查磁盘空间使用量du" class="headerlink" title="检查磁盘空间使用量du"></a>检查磁盘空间使用量du</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> du [‐ahskm] 文件或目录名称</span></span><br></pre></td></tr></table></figure><blockquote><p>-a ：递归列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。<br>-h ：以人们较易读的容量格式 (G/M) 显示；<br>-s ：列出总量而已，而不列出每个各别的目录占用容量；<br>-S ：不包括子目录下的总计，与 ­s 有点差别。<br>-k ：以 KBytes 列出容量显示；<br>-m ：以 MBytes 列出容量显</p></blockquote><h1 id="磁盘分区fdisk"><a href="#磁盘分区fdisk" class="headerlink" title="磁盘分区fdisk"></a>磁盘分区fdisk</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> fdisk [‐l] 装置名称（或者叫分区名称，下同）</span></span><br></pre></td></tr></table></figure><blockquote><p>-l ：输出后面参数指定装置所有的分区内容。若仅有<code>fdisk -l</code>时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来</p></blockquote><h1 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkfs [-t 文件系统格式] 装置名称（系统分区名称）</span></span><br></pre></td></tr></table></figure><blockquote><p>-t ：可以指令文件系统格式，例如 xfs，ext4，ext3，ext2, vfat 等(系统有支持才会生</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将分区 <span class="regexp">/dev/</span>hdc6（可指定你自己的分区） 格式化为 ext3 文件系统：</span><br><span class="line"><span class="comment"># mkfs ‐t ext3 /dev/hdc6</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果一个分区已经格式化，则需要再次格式化时，可以加参数 -f 表示强制再次格式化。<br>注意：如果一个分区已经挂载到一个目录之下，则不能在挂载的情况下进行再次格式化操作</p></blockquote><h1 id="磁盘检验"><a href="#磁盘检验" class="headerlink" title="磁盘检验"></a>磁盘检验</h1><p>fsck（file system check）用来检查和维护不一致的文件系统。若系统掉电或磁盘发生问题，可利用fsck 命令对文件系统进行检查</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># fsck <span class="string">[‐t 文件系统]</span> <span class="string">[‐ACay]</span> 装置名称</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>-t ： 给定文件系统的格式，若在 /etc/fstab 中已有定义或 kernel 本身已支持的则<br>需加上此参数<br>-s ：依序一个一个地执行 fsck 的指令来检查<br>-A ：对/etc/fstab 中所有列出来的 分区（partition）做检查<br>-C ：显示完整的检查进度<br>-d ：打印出 e2fsck 的 debug 结果<br>-p ：同时有 -A 条件时，同时有多个 fsck 的检查一起执行<br>-R ：同时有 -A 条件时，省略 / 不检查<br>-V ：详细显示模式<br>-a ：如果检查有错则自动修复<br>-r ：如果检查有错则由使用者回答是否修复<br>-y ：选项指定检测每个文件是自动输入yes，在不确定那些是不正常的时候，可<br>以执行 # fsck -y 全部检查修复</p><h1 id="磁盘挂载与卸载"><a href="#磁盘挂载与卸载" class="headerlink" title="磁盘挂载与卸载"></a>磁盘挂载与卸载</h1><p>Linux 的磁盘挂载使用 mount 命令，卸载使用 umount 命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">挂载</span><br><span class="line"><span class="comment"># mount [‐t 文件系统] [‐L Label名] [‐o 额外选项] [‐n] 装置文件名（也叫分区名称） 挂载点（也叫目录名）</span></span><br><span class="line"></span><br><span class="line">将刚刚创建的 <span class="string">/dev/hdc6</span> 分区挂载到 <span class="string">/mnt/hdc6</span> 上面</span><br><span class="line"><span class="comment"># mkdir /mnt/hdc6</span></span><br><span class="line"><span class="comment"># mount /dev/hdc6 /mnt/hdc6</span></span><br><span class="line"><span class="comment"># df</span></span><br><span class="line">Filesystem 1K‐blocks Used Available Use% Mounted on</span><br><span class="line"><span class="string">.....</span>中间省略<span class="string">.....</span></span><br><span class="line"><span class="string">/dev/hdc6</span> 1976312 42072 1833836 3% <span class="string">/mnt/hd6</span></span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line"><span class="comment"># umount /dev/hdc6</span></span><br><span class="line">-f ：强制卸除！可用在类似网络文件系统 <span class="params">(NFS)</span> 无法读取到的情况下；</span><br><span class="line">-n ：不升级 <span class="string">/etc/mtab</span> 情况卸除</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;列出磁盘使用量df&quot;&gt;&lt;a href=&quot;#列出磁盘使用量df&quot; class=&quot;headerlink&quot; title=&quot;列出磁盘使用量df&quot;&gt;&lt;/a&gt;列出磁盘使用量df&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/categories/Linux/"/>
    
    
      <category term="CentOs" scheme="https://coderjeremy.github.io/tags/CentOs/"/>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux用户管理</title>
    <link href="https://coderjeremy.github.io/2018/10/31/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/"/>
    <id>https://coderjeremy.github.io/2018/10/31/Linux用户管理/</id>
    <published>2018-10-31T04:24:19.000Z</published>
    <updated>2018-10-31T05:42:11.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统用户账号的管理"><a href="#系统用户账号的管理" class="headerlink" title="系统用户账号的管理"></a>系统用户账号的管理</h1><h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> useradd &lt;选项&gt; 用户名  <span class="comment">#添加新的用户账号</span></span></span><br></pre></td></tr></table></figure><blockquote><p>-c comment 指定一段用户注释性描述。<br>-d 目录，指定用户主目录，如果此目录不存在，则同时配合使用<br>-m 选项，可以自动创建主目录。<br>-g 用户组，指定用户所属的用户组（主组）。<br>-G 用户组，指定用户所属的附加组（可指定多个，当然并不建议太多个）。<br>-s Shell 文件，指定用户的登录 Shell。默认是 /bin/bash，注意 /bin/bash 不等于是 /bin/sh。<br>-u 用户号，指定用户的用户号，如果同时有<br>-o 选项，则可以重复使用其它用户的标识</p></blockquote><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> userdel 用户名<span class="comment">#删除用户</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> userdel -r 用户名 <span class="comment">#把用户的主目录一起删除</span></span></span><br></pre></td></tr></table></figure><h2 id="修改账号"><a href="#修改账号" class="headerlink" title="修改账号"></a>修改账号</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> usermod &lt;选项&gt; 用户名 <span class="comment">#修改已有用户的信息</span></span></span><br></pre></td></tr></table></figure><h2 id="修改用户口令"><a href="#修改用户口令" class="headerlink" title="修改用户口令"></a>修改用户口令</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># passwd <span class="meta-string">&lt;选项&gt; 用户名</span></span></span><br></pre></td></tr></table></figure><blockquote><p>-l 锁定口令，即禁用账号。<br>-u 口令解锁。<br>-d 使账号无口令，即清除密码（设置空密码）<br>-f 强迫用户下次登录时修改口令</p></blockquote><h1 id="系统用户组的管理"><a href="#系统用户组的管理" class="headerlink" title="系统用户组的管理"></a>系统用户组的管理</h1><h2 id="增加用户组"><a href="#增加用户组" class="headerlink" title="增加用户组"></a>增加用户组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># groupadd <span class="meta-string">&lt;选项&gt; 用户组</span></span></span><br></pre></td></tr></table></figure><blockquote><p>-g GID 指定新用户组的组标识号（GID）。<br>-o 一般与 -g 选项同时使用，表示新用户组的 GID 可以与系统已有用户组的 GID相同。</p></blockquote><h2 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> groupdel 用户组</span></span><br></pre></td></tr></table></figure><h2 id="修改用户组"><a href="#修改用户组" class="headerlink" title="修改用户组"></a>修改用户组</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># groupmod <span class="meta-string">&lt;选项&gt; 用户组</span></span></span><br></pre></td></tr></table></figure><blockquote><p>-g GID 为用户组指定新的组标识号。<br>-o 与 -g 选项同时使用，用户组的新 GID 可以与系统已有用户组的 GID 相同。<br>-n 新用户组，将用户组的名字改为新名字</p></blockquote><h2 id="切换用户组"><a href="#切换用户组" class="headerlink" title="切换用户组"></a>切换用户组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> newgrp 用户组</span></span><br></pre></td></tr></table></figure><h1 id="与用户账号有关的系统文件"><a href="#与用户账号有关的系统文件" class="headerlink" title="与用户账号有关的系统文件"></a>与用户账号有关的系统文件</h1><h2 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/passwd</span></span><br><span class="line">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录 <span class="keyword">Shell</span><span class="bash"></span></span><br></pre></td></tr></table></figure><h2 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h2><p>/etc/shadow 中的记录行与 /etc/passwd 中的一一对应，它由 pwconv 命令根据/etc/passwd 中的数据自动产生。它的文件格式与 /etc/passwd 类似，由若干个字段组成，字段之间用”:”隔开。这些字<br>段是：<br><strong>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</strong></p><blockquote><p>“登录名”是与<code>/etc/passwd</code>文件中的登录名相一致的用户账号<br>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 <code>{ ./0-9A-Za-z }</code>中的字符，则对应的用户不能登录。<br>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。<br>“最小时间间隔”指的是两次修改口令之间所需的最小天数。<br>“最大时间间隔”指的是口令保持有效的最大天数。<br>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。<br>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。<br>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了</p></blockquote><h2 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h2><p>用户组的所有信息都存放在 /etc/group 文件中。此文件的格式也类似于 /etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：<br><strong> 组名:口令:组标识号:组内用户列表</strong></p><blockquote><p>“组名”是用户组的名称，由字母或数字构成。与 /etc/passwd 中的登录名一样，组名不应重复。<br>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。”组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。<br>“组内用户列表”是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统用户账号的管理&quot;&gt;&lt;a href=&quot;#系统用户账号的管理&quot; class=&quot;headerlink&quot; title=&quot;系统用户账号的管理&quot;&gt;&lt;/a&gt;系统用户账号的管理&lt;/h1&gt;&lt;h2 id=&quot;添加用户&quot;&gt;&lt;a href=&quot;#添加用户&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/categories/Linux/"/>
    
    
      <category term="CentOs" scheme="https://coderjeremy.github.io/tags/CentOs/"/>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件基本属性及权限设置</title>
    <link href="https://coderjeremy.github.io/2018/10/31/Linux%E6%96%87%E4%BB%B6%E5%9F%BA%E6%9C%AC%E5%B1%9E%E6%80%A7%E5%8F%8A%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE/"/>
    <id>https://coderjeremy.github.io/2018/10/31/Linux文件基本属性及权限设置/</id>
    <published>2018-10-31T02:29:56.000Z</published>
    <updated>2018-10-31T03:32:49.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h1><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[jeremy@localhost ~]$ ll</span><br><span class="line">total 0</span><br><span class="line">drwxrwxr-x.<span class="number"> 2 </span>jeremy jeremy<span class="number"> 110 </span>Oct<span class="number"> 17 </span>20:11 aaa</span><br><span class="line">drwxrwxr-x.<span class="number"> 3 </span>jeremy jeremy <span class="number"> 30 </span>Oct <span class="number"> 6 </span>20:43 bbb</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>jeremy jeremy  <span class="number"> 6 </span>Oct<span class="number"> 17 </span>16:27 Desktop</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>jeremy jeremy  <span class="number"> 6 </span>Oct<span class="number"> 17 </span>16:27 Documents</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>jeremy jeremy  <span class="number"> 6 </span>Oct<span class="number"> 17 </span>16:27 Downloads</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>jeremy jeremy  <span class="number"> 6 </span>Oct<span class="number"> 17 </span>16:27 Music</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>jeremy jeremy  <span class="number"> 6 </span>Oct<span class="number"> 17 </span>16:27 Pictures</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>jeremy jeremy  <span class="number"> 6 </span>Oct<span class="number"> 17 </span>16:27 Public</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>jeremy jeremy  <span class="number"> 6 </span>Oct<span class="number"> 17 </span>16:27 Templates</span><br><span class="line">drwxr-xr-x.<span class="number"> 2 </span>jeremy jeremy  <span class="number"> 6 </span>Oct<span class="number"> 17 </span>16:27 Videos</span><br></pre></td></tr></table></figure><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p><blockquote><p>当为[ d ]则是目录<br>当为[ - ]则是文件；<br>若是[ l ]则表示为链接文件(link file)；<br>若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；<br>若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置</p></blockquote><p>接下来的字符中，以三个为一组，且均为 “rwx” 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。<br><img src="/2018/10/31/Linux文件基本属性及权限设置/01.png"></p><blockquote><p>从左至右用 0-9 这些数字来表示。<br>第 0 位确定文件类型，<br>第 1-3 位确定文件属主（该文件的所有者）拥有该文件的权限。<br>第 4-6 位确定文件属组（所有者的同组用户）拥有该文件的权限，<br>第 7-9 位确定其他用户拥有该文件的权限。<br>其中，第 1、4、7 位表示读权限，如果用 “r” 字符表示，则有读权限，如果用 “-“ 字符表示，则没有读权限；<br>第 2、5、8 位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；<br>第 3、6、9 位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权</p></blockquote><h1 id="文件属主和属组"><a href="#文件属主和属组" class="headerlink" title="文件属主和属组"></a>文件属主和属组</h1><ul><li>属主 ：该文件具有所有权的用户，通常时文件的所有者是指创建此文件的用户，或者手动指定的拥有者</li><li>属组 ：Linux中，用户时按组分类的，一个用户可以属于一个或者多个组。文件所有者以外的用户，又可以分为文件所有者的同组用户和其它用户。root是顶级用户，可以无视权限，进行任何操作。</li></ul><h1 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h1><h2 id="chgrp"><a href="#chgrp" class="headerlink" title="chgrp"></a>chgrp</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chgrp [-R] 属组名 文件名  <span class="comment">#更改文件属组，前提是组已经存在</span></span></span><br></pre></td></tr></table></figure><blockquote><p>-R : 递归更改文件属组，就是在更改某个目录文件的属组时，如果加上 -R 的参数，那么该目录下的所有文件的属组都会更改</p></blockquote><h2 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chown [-R] 属主名 文件名 <span class="comment">#更改文件属主</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> chown [-R] 属主名：属组名 文件名 <span class="comment">#更改文件属主，同时修改文件属组</span></span></span><br></pre></td></tr></table></figure><h2 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h2><p>Linux 文件属性有两种设置方法，一种是数字，一种是符号。</p><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>Linux 文件的基本权限就有九个，分别是 owner/group/others 三种身份各有自己read/write/execute 权限<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">r:</span><span class="number">4</span></span><br><span class="line"><span class="symbol">w:</span><span class="number">2</span></span><br><span class="line"><span class="symbol">x:</span><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>每种身份（owner/group/others）<br>各自的三个权限（r/w/x）分数是需要累加的，</p><blockquote><p>例如当权限为： [-rwxrwx—] 分数则是：<br>owner = rwx = 4+2+1 = 7<br>group = rwx = 4+2+1 = 7<br>others= — = 0+0+0 = 0</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chmod [-R] xyz 文件或目录<span class="comment">#修改文件的9个属性</span></span></span><br></pre></td></tr></table></figure><blockquote><p>xyz ：为rwx属性数值的相加</p><ul><li>R ：进行递归recursive的持续变更，即连同次目录下的所有文件都会变更</li></ul></blockquote><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls ‐al .bashrc</span></span><br><span class="line">‐rw‐r‐‐r‐‐<span class="number"> 1 </span>root root<span class="number"> 395 </span>Jul<span class="number"> 4 </span>11:45 .bashrc</span><br><span class="line"><span class="comment"># chmod 777 .bashrc</span></span><br><span class="line"><span class="comment"># ls ‐al .bashrc</span></span><br><span class="line">‐rwxrwxrwx<span class="number"> 1 </span>root root<span class="number"> 395 </span>Jul<span class="number"> 4 </span>11:45 .bashrc</span><br></pre></td></tr></table></figure><h3 id="符号类型"><a href="#符号类型" class="headerlink" title="符号类型"></a>符号类型</h3><p>基本上就九个权限分别是(1)user (2)group (3)others三种身份，那么我们就可以藉由u，g，o来代表三种身份的权限。此外， a 则代表 all 亦即全部的身份！那么读写的权限就可以写成r，w，x。也就是可以使用底下的方式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># chmod [ugoa] +/-/= [rwx] 文件或目录</span></span><br><span class="line">+（加入）-(除去) =（设定）</span><br><span class="line">将文件权限设置为 -rwxr-xr-- </span><br><span class="line">可以使用 chmod <span class="attribute">u</span>=rwx,g=rx,o=r 文件名</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件基本属性&quot;&gt;&lt;a href=&quot;#文件基本属性&quot; class=&quot;headerlink&quot; title=&quot;文件基本属性&quot;&gt;&lt;/a&gt;文件基本属性&lt;/h1&gt;&lt;figure class=&quot;highlight tap&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
      <category term="CentOs" scheme="https://coderjeremy.github.io/tags/CentOs/"/>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件管理及操作</title>
    <link href="https://coderjeremy.github.io/2018/10/30/Linux%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%8F%8A%E6%93%8D%E4%BD%9C/"/>
    <id>https://coderjeremy.github.io/2018/10/30/Linux文件管理及操作/</id>
    <published>2018-10-30T13:57:42.000Z</published>
    <updated>2018-10-30T15:09:13.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/bin：</span><br><span class="line">bin 是 Binary 的缩写，这个目录存放着最经常使用的命令。实际上是链接到/usr/bin。</span><br><span class="line">/boot：</span><br><span class="line">这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</span><br><span class="line">/dev ：</span><br><span class="line">dev 是 Device(设备)的缩写，该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</span><br><span class="line">/etc：</span><br><span class="line">这个目录用来存放所有的系统管理所需要的配置文件和子目录。</span><br><span class="line">/home：</span><br><span class="line">用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</span><br><span class="line">/lib：</span><br><span class="line">这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的DLL文件，几乎所有的应用程序都需要用到这些共享库。64 位系统还有一个</span><br><span class="line">lib64，这两个目录连接到 /usr下对应的lib目录。</span><br><span class="line">/lost+found：</span><br><span class="line">这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</span><br><span class="line">/media：</span><br><span class="line">linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。</span><br><span class="line">/mnt：</span><br><span class="line">系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/ 上，然后进入该目录就可以查看光驱里的内容了。</span><br><span class="line">/opt：</span><br><span class="line">这是给主机额外安装软件所摆放的目录。比如你安装一个 ORACLE 数据库则就可以放到这个目录下。默认是空的。</span><br><span class="line">/proc：</span><br><span class="line">这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的<span class="built_in"> ping </span>命令，使别人无法<span class="built_in"> ping </span>你的机器： echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br><span class="line">/root：</span><br><span class="line">该目录为系统管理员，也称作超级权限者的用户主目录（相当于普通用户的家目录）。</span><br><span class="line">/sbin：</span><br><span class="line">s 就是 Super<span class="built_in"> User </span>的意思，这里存放的是系统管理员使用的系统管理程序。实际上连接到 /usr/sbin</span><br><span class="line">/selinux：</span><br><span class="line">这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于windows 的防火墙，但是这套机制比较复杂，这个目录就是存放 selinux 相关的文件的。</span><br><span class="line">/srv：</span><br><span class="line">该目录存放一些服务启动之后需要提取的数据。</span><br><span class="line">/sys：</span><br><span class="line">这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。sysfs 文件系统集成了下面 3 种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</span><br><span class="line">/tmp：</span><br><span class="line">这个目录是用来存放一些临时文件的。</span><br><span class="line">/usr：</span><br><span class="line">这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</span><br><span class="line">/usr/bin：</span><br><span class="line">系统用户使用的应用程序。</span><br><span class="line">/usr/sbin：</span><br><span class="line">超级用户使用的比较高级的管理程序和系统守护程序。</span><br><span class="line">/usr/src：</span><br><span class="line">内核源代码默认的放置目录。</span><br><span class="line">/var：</span><br><span class="line">这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</span><br></pre></td></tr></table></figure><img src="/2018/10/30/Linux文件管理及操作/01.png"><p>在Linux文件系统中有两个特殊的目录，一个用户所在的工作目录，也叫当前目录，可以使用一个点 <code>.</code> 来表示；另一个是当前目录的上一级目录，也叫父目录，可以使用两个点<code>..</code> 来表示。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. ：代表当前的目录，也可以使用 <span class="string">./</span> 来表示；</span><br><span class="line"><span class="string">..</span> ：代表上一层目录，也可以 <span class="string">../</span> 来代表。</span><br></pre></td></tr></table></figure></p><h1 id="文件、目录常用命令"><a href="#文件、目录常用命令" class="headerlink" title="文件、目录常用命令"></a>文件、目录常用命令</h1><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>路径的写法，由根目录<code>/</code>写起，例如：<code>/usr/share/doc</code>这个目录。</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>路径的写法，不是由<code>/</code>写起，例如由 <code>/usr/share/doc</code>要到<code>/usr/share/man</code>底下时，可以写成：<code>cd ../man</code>这就是相对路径的写法</p><h2 id="显示当前工作目录pwd"><a href="#显示当前工作目录pwd" class="headerlink" title="显示当前工作目录pwd"></a>显示当前工作目录pwd</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">pwd</span> <span class="comment">#Print Working Directory 显示当前所在目录</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">pwd</span> -P <span class="comment">#显示出确实的路径，而非使用连接路径</span></span></span><br></pre></td></tr></table></figure><h2 id="列出目录ls"><a href="#列出目录ls" class="headerlink" title="列出目录ls"></a>列出目录ls</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls [‐aAdfFhilnrRSt] 目录名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls [‐‐color=&#123;never,auto,always&#125;] 目录名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls [‐‐full‐time] 目录名称</span></span><br></pre></td></tr></table></figure><blockquote><p>-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来（常用）<br>-d ：仅列出目录本身，而不是列出目录内的文件数据（常用）<br>-l ：以长格式列出，包含文件的属性与权限等等数据；(常用)<br>-i ：在第 1 列显示文件的 inode 节点号</p></blockquote><h2 id="切换目录cd"><a href="#切换目录cd" class="headerlink" title="切换目录cd"></a>切换目录cd</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用 mkdir 命令创建 runoob 目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir runoob</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用绝对路径切换到 runoob 目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /root/runoob/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用相对路径切换到 runoob 目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> ./runoob/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示回到自己的家目录，亦即是 /root 这个目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> ~</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br></pre></td></tr></table></figure><h2 id="创建新目录mkdir"><a href="#创建新目录mkdir" class="headerlink" title="创建新目录mkdir"></a>创建新目录mkdir</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir [-mp] 目录名称</span></span><br></pre></td></tr></table></figure><blockquote><p>-m ：配置文件的权限！直接配置，不需要看默认权限 (umask) 的脸色。<br>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来</p></blockquote><h2 id="删除空目录rmdir"><a href="#删除空目录rmdir" class="headerlink" title="删除空目录rmdir"></a>删除空目录rmdir</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rmdir [-p] 目录名称</span></span><br></pre></td></tr></table></figure><blockquote><p>-p ：连同上一级的“空的”目录也一起删除</p></blockquote><h2 id="移除文件或目录rm"><a href="#移除文件或目录rm" class="headerlink" title="移除文件或目录rm"></a>移除文件或目录rm</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm [-fir] 文件或目录</span></span><br></pre></td></tr></table></figure><blockquote><p>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；<br>-i ：互动模式，在删除前会询问使用者是否动作<br>-r ：递归删除，最常用的目录删除！这是非常危险的选项</p></blockquote><h2 id="复制文件或目录cp"><a href="#复制文件或目录cp" class="headerlink" title="复制文件或目录cp"></a>复制文件或目录cp</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp [‐adfilprsu] 来源档(<span class="built_in">source</span>) 目标档(destination)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><blockquote><p>-a：相当于 ­pdr 的意思，至于 pdr 请参考下列说明；(常用)<br>-d：若来源文件为连接文件的属性(link file)，则复制连接文件而非文件本身；<br>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；<br>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)<br>-l：进行硬连接(hard link)的文件创建，而非复制文件本身；<br>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；<br>-r：递归持续复制，用于目录的复制行为；(常用)<br>-s：复制成为符号连接 (symbolic link)，亦即『连接』文件；<br>-u：若 destination 比 source 旧才升级 destination</p></blockquote><h2 id="移动文件与目录，或修改名称mv"><a href="#移动文件与目录，或修改名称mv" class="headerlink" title="移动文件与目录，或修改名称mv"></a>移动文件与目录，或修改名称mv</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv [‐fiu] <span class="built_in">source</span> destination</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mv [options] source1 source2 source3 .... directory</span></span><br></pre></td></tr></table></figure><blockquote><p>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；<br>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！<br>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</p></blockquote><h2 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat [-AbEnTv]  <span class="comment">#由第一行开始显示文件内容</span></span></span><br></pre></td></tr></table></figure><blockquote><p>-A ：相当於 ­vET 的整合选项，可显示出一些特殊字符（如空白字符）；<br>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！<br>-E ：将结尾的断行字节 $ 显示出来；<br>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；<br>-T ：将 [tab] 按键以 ^I 显示出来；<br>-v ：列出一些看不出来的特殊字符</p></blockquote><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p>tac 与 cat 命令刚好相反，文件内容从最后一行开始向前逐行显示，可以看出 tac 是cat 的倒写</p><h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nl [-bnw] 文件 <span class="comment">#显示行号</span></span></span><br></pre></td></tr></table></figure><blockquote><p>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；<br>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；<br>-w ：行号栏位的占用的位数</p></blockquote><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>一页页翻动</p><blockquote><p>空白键 (space)：代表向下翻一页；<br>Enter ：代表向下翻『一行』<br>/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；<br>:f ：立刻显示出档名以及目前显示的行数；<br>q ：代表立刻离开 more ，不再显示该文件内容<br>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用</p></blockquote><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>一页一页翻动</p><blockquote><p>空白键 ：向下翻动一页；<br>[pagedown]：向下翻动一页；<br>[pageup] ：向上翻动一页；<br>/字串 ：向下搜寻『字串』的功能；<br>?字串 ：向上搜寻『字串』的功能；<br>n ：重复前一个搜寻 (与 / 或 ? 有关！)<br>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)<br>q ：离开 less 这个程序；</p></blockquote><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>取出文件前面的几行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> head [-n number] 文件</span></span><br></pre></td></tr></table></figure></p><blockquote><p>-n ：后面接数字，代表显示几行的意思</p></blockquote><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>取出文件后面几行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tail [-nf number] 文件</span></span><br></pre></td></tr></table></figure></p><blockquote><p>-n ：后面接数字，代表显示几行的意思<br>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux-系统目录结构&quot;&gt;&lt;a href=&quot;#Linux-系统目录结构&quot; class=&quot;headerlink&quot; title=&quot;Linux 系统目录结构&quot;&gt;&lt;/a&gt;Linux 系统目录结构&lt;/h1&gt;&lt;figure class=&quot;highlight routeros
      
    
    </summary>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/categories/Linux/"/>
    
    
      <category term="CentOs" scheme="https://coderjeremy.github.io/tags/CentOs/"/>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://coderjeremy.github.io/2018/10/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://coderjeremy.github.io/2018/10/30/Linux常用命令/</id>
    <published>2018-10-30T12:54:13.000Z</published>
    <updated>2018-10-30T13:51:14.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> clear<span class="comment">#清空当前终端命令历史记录</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exit</span><span class="comment">#退出终端</span></span></span><br></pre></td></tr></table></figure><h1 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> reboot<span class="comment">#重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown -r now<span class="comment">#重启。等同reboot</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> shutdown -h now<span class="comment">#关机，慎用，通常情况远程服务器关机后，物理机无法重启</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> halt<span class="comment">#关机，慎用</span></span></span><br></pre></td></tr></table></figure><h1 id="目录和文件操作"><a href="#目录和文件操作" class="headerlink" title="目录和文件操作"></a>目录和文件操作</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> &lt;directory&gt;<span class="comment">#切换到指定目录下，参数可使用通配符，按下 tab 键可自动补足，连按两下 tab 键，则会将所有相关文件列出。directory 既可是绝对路径，也可是相对路径，./ 表示当前路径，../ 表示上一级路径，下同。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls &lt;directory&gt;<span class="comment">#列出指定目录下所有文件，如无参数，则列出当前目录下所有文件。directory 既可是绝对路径，也可是相对路径。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -l<span class="comment">#以长格式形式列出所有文件，可简写为 ll。长格式规则：第1列：1位文件类型，9位权限标志。第2列：文件索引节点编号，第3列：文件所有者名称，第4列：文件属主所在组名称，第5列：文件大小，第6列：文件最后修改日期，第7列：文件名称。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -a <span class="comment">#列出所有文件，包括隐藏文件。在 Linux 中，隐藏文件的文件名以 “.”开头。另外，命令参数若有多个可以合写，如ls ‐la。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp &lt;<span class="built_in">source</span>&gt; &lt;target&gt;<span class="comment">#将 source 文件复制到 target 位置。source和 target 既可是绝对路径，也可是相对路径，支持通配符，下同。第二个参数是目录的话，表示将文件复制到指定目录下，第二个参数如果是文件名称的话，表示将源文件复制成参数2指定的新文件。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp -r &lt;<span class="built_in">source</span>&gt; &lt;target&gt; <span class="comment">#递归复制，‐f 参数表示静默操作，无提示。有时 ‐f 可能会失效，详细原因见最后附录部分。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> mv &lt;<span class="built_in">source</span>&gt; &lt;target&gt;<span class="comment">#移动 source 文件到 target 位置，相当于剪切，重命名也是使用此命令。‐f 参数表示静默操作，无警告提示。mv 没有 ‐r参数。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm &lt;<span class="built_in">source</span>&gt;<span class="comment">#删除文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm -r &lt;<span class="built_in">source</span>&gt;<span class="comment">#递归删除，-f 参数表示静默操作，无警告提示</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir &lt;directory&gt; <span class="comment">#创建目录</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir -p &lt;directory&gt;<span class="comment">#递归操作</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> rmdir<span class="comment">#删除空目录</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> man  &lt;命令&gt; <span class="comment">#查看命令帮助文档或使用说明，按q 退出说明</span></span></span><br></pre></td></tr></table></figure><h1 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ll /etc/centos* <span class="comment"># ll 命令等同于ls ‐l</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ll /etc/centos‐release <span class="comment">#按 tab 键可自动补足</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cat /etc/centos‐release <span class="comment">#cat 命令是直接在终端中显示</span></span></span><br></pre></td></tr></table></figure><h1 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> uname ‐r <span class="comment">#显示内核版本</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> uname ‐m <span class="comment">#查看系统位数</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> uname ‐a <span class="comment">#显示更全面的信息</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> arch <span class="comment">#与 uname ‐m 命令非常类似。如果输出 x86_64 则表示为 64 位系统，如果输出i686 或 i386 则表示为 32 位系统</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> getconf LONG_BIT<span class="comment">#查看系统位数</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$LANG</span> <span class="comment">#查看语言与本地化</span></span></span><br></pre></td></tr></table></figure><h1 id="查看网络及网卡状态"><a href="#查看网络及网卡状态" class="headerlink" title="查看网络及网卡状态"></a>查看网络及网卡状态</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ifconfig<span class="comment">#查看网络及网卡状态</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nmcli dev show <span class="comment">#检查网卡状态</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nmcli device show <span class="comment">#与之上命令效果等同</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nmcli <span class="comment">#以简单模式显示网卡状态</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nmcli con up ens33 <span class="comment">#最后一个参数是网卡名称，执行此命令后，将会激活连接此网卡</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nmcli con down ens33 <span class="comment">#表示断开此网卡</span></span></span><br></pre></td></tr></table></figure><h1 id="查看当前系统用户"><a href="#查看当前系统用户" class="headerlink" title="查看当前系统用户"></a>查看当前系统用户</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> whoami <span class="comment">#查看当前系统操作用户身份，本指令等同于执行 id -un 指令 </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> id -un<span class="comment">#查看当前系统操作用户的身份</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> who am i <span class="comment">#查看当前系统登录用户，注意：是登录 id</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> who ‐m <span class="comment">#等同于 who am i</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> who <span class="comment">#显示系统当前登录的所有用户</span></span></span><br></pre></td></tr></table></figure><h1 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> su snow <span class="comment">#切换到普通snow 账户</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> su root <span class="comment">#切换到 root 账户，切换后相对路径与当前路径一致</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> su <span class="comment">#等同于上一条</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> su ‐ <span class="comment">#切换到 root 账户，切换后相对路径为 ~ ，即家目录。同时会显示最后一次登录时间。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exit</span> <span class="comment">#退出当前的临时切换账户状态</span></span></span><br></pre></td></tr></table></figure><h1 id="CentOS-7-5-系统配置国内-yum-源和-epel"><a href="#CentOS-7-5-系统配置国内-yum-源和-epel" class="headerlink" title="CentOS 7.5 系统配置国内 yum 源和 epel"></a>CentOS 7.5 系统配置国内 yum 源和 epel</h1><ol><li>首先进入 <code>/etc/yum.repos.d/</code>目录下，新建一个 <code>repo_bak.d</code>目录，用于保存<br>系统中原来的 repo 文件 </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /etc/yum.repos.d/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mkdir repo_bak.d</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mv *.repo repo_bak.d/</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在 CentOS 中配置使用网易和阿里的开源镜像<br>点击右上角的网络管理器，连接网络。因为 CentOS 默认是不自动连接网络的。首选使用 su ‐ 命令切换到 root 用户。否则某些操作是无法完成的，需要 root 权限到网易和阿里开源镜像站点下载系统对应版本的 repo</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> yum.repos.d</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget http://mirrors.aliyun.com/repo/Centos‐7.repo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget http://mirrors.163.com/.<span class="built_in">help</span>/CentOS7‐Base‐163.repo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">Centos‐7.repo CentOS‐Base‐163.repo repo.bak</span><br></pre></td></tr></table></figure><p>或者手动下载 repo 文件并上传到<code>/etc/yum.repos.d/</code></p><ol start="3"><li>清除系统 yum 缓存并生成新的 yum </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum clean all</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum update <span class="comment">#更新软件</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>安装 epel 源</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum ‐y install epel‐release</span></span><br></pre></td></tr></table></figure><h1 id="安装压缩、解压缩工具"><a href="#安装压缩、解压缩工具" class="headerlink" title="安装压缩、解压缩工具"></a>安装压缩、解压缩工具</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install zip unzip gzip p7zip <span class="comment">#安装压缩与解压缩工具</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum remove zip unzip gzip p7zip <span class="comment">#卸载压缩与解压缩工具</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum unzip -0 cp936 xxx.zip<span class="comment">#解决使用unzip命令时中文乱码的问题</span></span></span><br></pre></td></tr></table></figure><h1 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h1><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install ibus ibus-<span class="keyword">table</span>-wubi*</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;终端&quot;&gt;&lt;a href=&quot;#终端&quot; class=&quot;headerlink&quot; title=&quot;终端&quot;&gt;&lt;/a&gt;终端&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/categories/Linux/"/>
    
    
      <category term="CentOs" scheme="https://coderjeremy.github.io/tags/CentOs/"/>
    
      <category term="Linux" scheme="https://coderjeremy.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
